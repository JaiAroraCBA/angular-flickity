{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-flickity.min.js","webpack:///webpack/bootstrap 9abb1cf6c824d6e4f5a7?5414","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/flickity.provider.js?f7a2","webpack:///./src/flickity.provider.js?01f5*","webpack:///./src/flickity.directive.js?34af","webpack:///./src/flickity.directive.js?f624*","webpack:///./src/flickity.service.js?7800","webpack:///./src/flickity.service.js?ada5*","webpack:///./src/flickityNext.directive.js?4a74","webpack:///./src/flickityNext.directive.js?96f3*","webpack:///./src/flickityPrevious.directive.js?4844","webpack:///./src/flickityPrevious.directive.js?eb57*"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_flickity","_flickity2","_flickity3","_flickityNext","_flickityPrevious","angular","provider","FlickityConfigProvider","directive","FlickityDirective","service","FlickityService","FlickityNextDirective","FlickityPreviousDirective","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","value","accessibility","autoPlay","cellAlign","cellSelector","undefined","contain","draggable","freeScroll","freeScrollFriction","selectedAttraction","friction","initialIndex","lazyLoad","percentPosition","prevNextButtons","pageDots","resize","rightToLeft","setGallerySize","watchCSS","wrapAround","imagesLoaded","asNavFor","$timeout","FlickityConfig","linkFunction","$scope","$element","$attrs","$controller","flickityOptions","extend","console","log","flickityInstance","create","flickityId","Flickity","$on","event","destroy","FlickityController","$inject","restrict","scope","bindToController","link","controller","controllerAs","instances","element","arguments","options","push","_this","pauseBeforeDestruction","flickityIndex","_getFlickityIndex","splice","isWrapped","next","previous","index","isInstant","select","selectedIndex","matchesId","item","array","negativeIndexForUnfound","findIndex","bcFlickityNext","on","require","bcFlickityPrevious"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,sBAAAH,GACA,gBAAAC,SACAA,QAAA,oBAAAD,IAEAD,EAAA,oBAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GEtDhC,YAEA,IAAIS,GAAYT,EAAQ,GAEpBU,EAAaV,EAAQ,GAErBW,EAAaX,EAAQ,GAErBY,EAAgBZ,EAAQ,GAExBa,EAAoBb,EAAQ,ECJhCc,SAAQnB,OAAO,kBACVoB,SAAS,iBAAgBN,EAPrBO,wBAQJC,UAAU,aAAYP,EAPlBQ,mBAQJC,QAAQ,kBAAiBR,EAPrBS,iBAQJH,UAAU,iBAAgBL,EAPtBS,uBAQJJ,UAAU,qBAAoBJ,EAP1BS,4BHoEH,SAAS3B,EAAQD,GIxEvB,YAQA,SAAS6B,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhH,GAAIC,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAEjiBY,QAAOC,eAAe5C,EAAS,cAC3BiD,OAAO,GCLwBjD,GAAtBsB,uBAAsB,WAE/B,QAFSA,KDYLO,EAAgBzB,KCZXkB,GAILlB,KAAK8C,eAAqB,EAC1B9C,KAAK+C,UAAqB,EAC1B/C,KAAKgD,UAAqB,SAC1BhD,KAAKiD,aAAqBC,OAC1BlD,KAAKmD,SAAqB,EAC1BnD,KAAKoD,WAAqB,EAC1BpD,KAAKqD,YAAqB,EAC1BrD,KAAKsD,oBAAqB,EAC1BtD,KAAKuD,mBAAqB,KAC1BvD,KAAKwD,SAAqB,IAC1BxD,KAAKyD,aAAqB,EAC1BzD,KAAK0D,UAAqB,EAC1B1D,KAAK2D,iBAAqB,EAC1B3D,KAAK4D,iBAAqB,EAC1B5D,KAAK6D,UAAqB,EAC1B7D,KAAK8D,QAAqB,EAC1B9D,KAAK+D,aAAqB,EAC1B/D,KAAKgE,gBAAqB,EAC1BhE,KAAKiE,UAAqB,EAC1BjE,KAAKkE,YAAqB,EAC1BlE,KAAKmE,cAAqB,EAC1BnE,KAAKoE,UAAqB,EDqB9B,MAPAvC,GCvCSX,IDwCLuB,IAAK,OACLI,MAAO,WCTP,MAAO7C,UAhCFkB,ML6HP,SAASrB,EAAQD,GM7HvB,YCeO,SAASwB,GACZiD,EACAC,EAAgBhD,GAEhB,UAaiB,SAMRiD,GAAaC,EAAQC,EAAUC,EAAQC,GAI5C,GAAMC,GAAkB5D,QAAQ6D,UAAWP,EACJK,EAAYC,gBAEnDE,SAAQC,IAAI,oBAAqBH,GAAiBP,EAKzC,WACL,GAAMW,GACF1D,EAAgB2D,OAAOR,EAAS,GAAIE,EAAYO,WAAYN,EAAiBD,GAGrEQ,SAAWH,EAAiBtD,SACxCiD,EAAYO,WAAaF,EAAiB3E,IAK5BmE,GAAOY,IAAI,WAAY,SAACC,GACtC/D,EAAgBgE,QAAQX,EAAYO,cAG3C,QAMQK,MPiFRhB,EAAaiB,SAAW,SAAU,WAAY,SAAU,cOnIzD,IAAMrE,IACFsE,SAAU,IACVC,SACAC,kBACIf,gBAAiB,MAErBgB,KAAMrB,EACNsB,WAAYN,EACZO,aAAc,KAGlB,OAAO3E,GPiGVC,EAAkBoE,SAAW,WAAY,iBAAkB,mBM/H5DjD,OAAOC,eAAe5C,EAAS,cAC3BiD,OAAO,IAEXjD,ECUgBwB,qBP2LV,SAASvB,EAAQD,GQ1MvB,YAQA,SAAS6B,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhH,GAAIC,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAEjiBY,QAAOC,eAAe5C,EAAS,cAC3BiD,OAAO,GRmNYjD,GAAQ0B,gBAAkB,WSrN7C,QAFSA,GAGL+C,GAEA,UDUA5C,GAAgBzB,KCfXsB,GAOLtB,KAAKqE,SAAWA,EAEhBrE,KAAK+F,aDmMT,MRYCzE,GAAgBkE,SAAW,YQzL5B3D,EC/BSP,IDgCLmB,IAAK,SACLI,MAAO,SCTJmD,GDUC,GCVQ3F,GAAE4F,UAAA/D,QAAA,GAAAgB,SAAA+C,UAAA,GAAGjG,KAAK+F,UAAU7D,OAAS,EAAC+D,UAAA,GAAEC,EAAOD,UAAA,GAG7CvE,GACFrB,GAAIA,EACJqB,SAAU,GAAIyD,UAASa,EAASE,GAMpC,OALElG,MAGG+F,UAAUI,KAAKzE,GAEbA,KDqBPe,IAAK,UACLI,MAAO,SCZHxC,GDaA,GAAI+F,GAAQpG,KCZVqG,EAAyB,IACzBC,EAAgBtG,KAAKuG,kBAAkBlG,EAE7C,OAAoB,GAAhBiG,GACO,MACVtG,MAKIqE,SAAS,WAGV+B,EAAKL,UAAUO,GAAe5E,SAAS4D,UAAUc,EAG5CL,UAAUS,OAAOF,EAAe,IAEtCD,MDuBH5D,IAAK,OACLI,MAAO,SCdNxC,EAAIoG,GACL,GAAMH,GAAgBtG,KAAKuG,kBAAkBlG,EAE7C,OAAoB,GAAhBiG,GACO,MACVtG,MAGI+F,UAAUO,GAAe5E,SAASgF,KAAKD,MDwB5ChE,IAAK,WACLI,MAAO,SChBFxC,EAAIoG,GACT,GAAMH,GAAgBtG,KAAKuG,kBAAkBlG,EAE7C,OAAoB,GAAhBiG,GACO,MACVtG,MAGI+F,UAAUO,GAAe5E,SAASiF,SAASF,MD6BhDhE,IAAK,SACLI,MAAO,SClBJxC,EAAIuG,GDmBH,GCnBUH,GAASR,UAAA/D,QAAA,GAAAgB,SAAA+C,UAAA,IAAG,EAAKA,UAAA,GAAEY,EAASZ,UAAA/D,QAAA,GAAAgB,SAAA+C,UAAA,IAAG,EAAKA,UAAA,GAC5CK,EAAgBtG,KAAKuG,kBAAkBlG,EAE7C,OAAoB,GAAhBiG,GACO,MACVtG,MAGI+F,UAAUO,GAAe5E,SAASoF,OAAOF,EAAOH,EAAWI,MDgChEpE,IAAK,mBACLI,MAAO,SCvBMxC,GACb,GAAMiG,GAAgBtG,KAAKuG,kBAAkBlG,EAE7C,OAAoB,GAAhBiG,GACO,EAIJtG,KAAK+F,UAAUO,GAAe5E,SAASqF,iBDsC9CtE,IAAK,oBACLI,MAAO,SCtBOxC,GAmBb,QAGQ2G,GAAUC,EAAML,EAAOM,GAC5B,MAAID,GAAK5G,KAAOA,EACL4G,EADX,OAtBJ,GAAME,GAA0B,EAAG,IAG/BnH,KAAK+F,UAAU7D,OAAS,EAExB,MAAOiF,EAKP,IAAMP,GAAQ5G,KAAK+F,UAAUqB,UAAUJ,EAEvC,OAAIJ,MAAU,EACHO,EAEAP,MA1KVtF,MT8ZP,SAASzB,EAAQD,GU/ZvB,YCAO,SAAS2B,GACZD,GAEA,UAWiB,SAMRiD,GACLC,EAAQC,EAAUC,EAAQC,GAKW,iBAA1BH,GAAO6C,iBACd7C,EAAO6C,gBAAiB,GAC3B5C,EAGQ6C,GAAG,QAAS,WACjBhG,EAAgBoF,KAAK/B,EAAYO,WAAYV,EAAO6C,kBX2Y3D9C,EAAaiB,SAAW,SAAU,WAAY,SAAU,cWtazD,IAAMrE,IACFsE,SAAU,IACV8B,QAAS,cACT7B,OACI2B,eAAgB,MAEpBzB,KAAMrB,EAGV,OAAOpD,GXqZVI,EAAsBiE,SAAW,mBUjalCjD,OAAOC,eAAe5C,EAAS,cAC3BiD,OAAO,IAEXjD,ECLgB2B,yBX4cV,SAAS1B,EAAQD,GY5cvB,YCAO,SAAS4B,GACZF,GAEA,UAWiB,SAMRiD,GACLC,EAAQC,EAAUC,EAAQC,GAKe,iBAA9BH,GAAOgD,qBACdhD,EAAOgD,oBAAqB,GAC/B/C,EAGQ6C,GAAG,QAAS,WACjBhG,EAAgBqF,SAAShC,EAAYO,WAAYV,EAAOgD,sBbwb/DjD,EAAaiB,SAAW,SAAU,WAAY,SAAU,candzD,IAAMrE,IACFsE,SAAU,IACV8B,QAAS,cACT7B,OACI8B,mBAAoB,MAExB5B,KAAMrB,EAGV,OAAOpD,GbkcVK,EAA0BgE,SAAW,mBY9ctCjD,OAAOC,eAAe5C,EAAS,cAC3BiD,OAAO,IAEXjD,ECLgB4B","file":"angular-flickity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _flickity = __webpack_require__(1);\n\t\n\tvar _flickity2 = __webpack_require__(2);\n\t\n\tvar _flickity3 = __webpack_require__(3);\n\t\n\tvar _flickityNext = __webpack_require__(4);\n\t\n\tvar _flickityPrevious = __webpack_require__(5);\n\t\n\tangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).directive('bcFlickity', _flickity2.FlickityDirective).service('FlickityService', _flickity3.FlickityService).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n\t    function FlickityConfigProvider() {\n\t        _classCallCheck(this, FlickityConfigProvider);\n\t\n\t        // Define Flickity defaults\n\t        this.accessibility = true;\n\t        this.autoPlay = false;\n\t        this.cellAlign = 'center';\n\t        this.cellSelector = undefined;\n\t        this.contain = false;\n\t        this.draggable = true;\n\t        this.freeScroll = false;\n\t        this.freeScrollFriction = false;\n\t        this.selectedAttraction = .025;\n\t        this.friction = .28;\n\t        this.initialIndex = 0;\n\t        this.lazyLoad = true;\n\t        this.percentPosition = true;\n\t        this.prevNextButtons = true;\n\t        this.pageDots = true;\n\t        this.resize = true;\n\t        this.rightToLeft = false;\n\t        this.setGallerySize = true;\n\t        this.watchCSS = false;\n\t        this.wrapAround = false;\n\t        this.imagesLoaded = true;\n\t        this.asNavFor = true;\n\t    }\n\t\n\t    _createClass(FlickityConfigProvider, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return FlickityConfigProvider;\n\t})();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlickityDirective.$inject = [\"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityDirective = FlickityDirective;\n\t/* global Flickity */\n\t\n\t/**\n\t * Flickity.js\n\t * http://flickity.metafizzy.co/options.html\n\t *\n\t * Required markup\n\t *\n\t * <div bc-flickity flickity-options=\"{{ vm.options }}\">\n\t *   <div>\n\t *   <div>\n\t *   ...\n\t * </div>\n\t *\n\t */\n\tfunction FlickityDirective($timeout, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            flickityOptions: '=?'\n\t        },\n\t        link: linkFunction,\n\t        controller: FlickityController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // Extend the default options with user configuration\n\t\n\t        var flickityOptions = angular.extend({}, FlickityConfig, $controller.flickityOptions);\n\t\n\t        console.log('flickityOptions: ', flickityOptions);\n\t\n\t        // Initialize Flickity\n\t        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n\t        $timeout(function () {\n\t            var flickityInstance = FlickityService.create($element[0], $controller.flickityId, flickityOptions);\n\t\n\t            // Expose the Flickity instance and ID\n\t            $controller.Flickity = flickityInstance.instance;\n\t            $controller.flickityId = flickityInstance.id;\n\t        });\n\t\n\t        // Clean up when being destroyed\n\t        var onDestroy = $scope.$on('$destroy', function (event) {\n\t            FlickityService.destroy($controller.flickityId);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Controller\n\t     */\n\t    function FlickityController() {}\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/* global Flickity */\n\t\n\tvar FlickityService = exports.FlickityService = (function () {\n\t    FlickityService.$inject = [\"$timeout\"];\n\t    function FlickityService($timeout) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, FlickityService);\n\t\n\t        this.$timeout = $timeout;\n\t\n\t        this.instances = [];\n\t    }\n\t\n\t    /**\n\t     * Create a new Flickity instance\n\t     *\n\t     * @param {Element} element\n\t     * @param {String} id\n\t     * @param {Object} options\n\t     * @return {Element} element\n\t     */\n\t\n\t    _createClass(FlickityService, [{\n\t        key: 'create',\n\t        value: function create(element) {\n\t            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n\t            var options = arguments[2];\n\t\n\t            // Define the new instance\n\t            var instance = {\n\t                id: id,\n\t                instance: new Flickity(element, options)\n\t            };\n\t\n\t            // Save this instance to the array\n\t            this.instances.push(instance);\n\t\n\t            return instance;\n\t        }\n\t\n\t        /**\n\t         * Destroy a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         */\n\t\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy(id) {\n\t            var _this = this;\n\t\n\t            var pauseBeforeDestruction = 2000;\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Pause to allow other scope cleanup to occur\n\t            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n\t            // directive can leave view\n\t            this.$timeout(function () {\n\t\n\t                // Destroy the Flickity instance\n\t                _this.instances[flickityIndex].instance.destroy();\n\t\n\t                // Remove the instance from the array\n\t                _this.instances.splice(flickityIndex, 1);\n\t            }, pauseBeforeDestruction);\n\t        }\n\t\n\t        /**\n\t         * Move to the next slide\n\t         *\n\t         * @param {Bool} isWrapped\n\t         */\n\t\n\t    }, {\n\t        key: 'next',\n\t        value: function next(id, isWrapped) {\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Trigger the next slide\n\t            this.instances[flickityIndex].instance.next(isWrapped);\n\t        }\n\t\n\t        /**\n\t         * Move to the previous slide\n\t         *\n\t         * @param {Bool} isWrapped\n\t         */\n\t\n\t    }, {\n\t        key: 'previous',\n\t        value: function previous(id, isWrapped) {\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Trigger the next slide\n\t            this.instances[flickityIndex].instance.previous(isWrapped);\n\t        }\n\t\n\t        /**\n\t         * Select a slide\n\t         *\n\t         * @param {String} id\n\t         * @param {Number} index\n\t         * @param {Bool} isWrapped\n\t         * @param {Bool} isInstant\n\t         */\n\t\n\t    }, {\n\t        key: 'select',\n\t        value: function select(id, index) {\n\t            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Trigger the next slide\n\t            this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\t        }\n\t\n\t        /**\n\t         * Get the current slide index\n\t         *\n\t         * @param {String} id\n\t         * @return {Number} index\n\t         */\n\t\n\t    }, {\n\t        key: 'getSelectedIndex',\n\t        value: function getSelectedIndex(id) {\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            // Return the current index\n\t            return this.instances[flickityIndex].instance.selectedIndex;\n\t        }\n\t\n\t        //\n\t        // Helper methods\n\t        //\n\t\n\t        /**\n\t         * Find the index for a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Number} flickityIndex\n\t         */\n\t\n\t    }, {\n\t        key: '_getFlickityIndex',\n\t        value: function _getFlickityIndex(id) {\n\t            var negativeIndexForUnfound = -1;\n\t\n\t            // If no instances exist, cancel\n\t            if (this.instances.length < 1) {\n\t\n\t                return negativeIndexForUnfound;\n\t            } else {\n\t\n\t                // Find the instance by ID\n\t                var index = this.instances.findIndex(matchesId);\n\t\n\t                if (index === false) {\n\t                    return negativeIndexForUnfound;\n\t                } else {\n\t                    return index;\n\t                }\n\t            }\n\t\n\t            // Test to match an item in an array based on the id\n\t            function matchesId(item, index, array) {\n\t                if (item.id === id) {\n\t                    return item;\n\t                }\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return FlickityService;\n\t})();\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlickityNextDirective.$inject = [\"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityNextDirective = FlickityNextDirective;\n\tfunction FlickityNextDirective(FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        require: '^bcFlickity',\n\t        scope: {\n\t            bcFlickityNext: '=?'\n\t        },\n\t        link: linkFunction\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // If no boolean was passed in, set to a default\n\t\n\t        if (typeof $scope.bcFlickityNext !== 'boolean') {\n\t            $scope.bcFlickityNext = true;\n\t        }\n\t\n\t        // Trigger next() method\n\t        $element.on('click', function () {\n\t            FlickityService.next($controller.flickityId, $scope.bcFlickityNext);\n\t        });\n\t    }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlickityPreviousDirective.$inject = [\"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityPreviousDirective = FlickityPreviousDirective;\n\tfunction FlickityPreviousDirective(FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        require: '^bcFlickity',\n\t        scope: {\n\t            bcFlickityPrevious: '=?'\n\t        },\n\t        link: linkFunction\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // If no boolean was passed in, set to a default\n\t\n\t        if (typeof $scope.bcFlickityPrevious !== 'boolean') {\n\t            $scope.bcFlickityPrevious = true;\n\t        }\n\t\n\t        // Bind the click up to the required controller\n\t        $element.on('click', function () {\n\t            FlickityService.previous($controller.flickityId, $scope.bcFlickityPrevious);\n\t        });\n\t    }\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-flickity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9abb1cf6c824d6e4f5a7\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.directive');\n\nvar _flickity3 = require('./flickity.service');\n\nvar _flickityNext = require('./flickityNext.directive');\n\nvar _flickityPrevious = require('./flickityPrevious.directive');\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).directive('bcFlickity', _flickity2.FlickityDirective).service('FlickityService', _flickity3.FlickityService).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityService } from './flickity.service';\nimport { FlickityNextDirective } from './flickityNext.directive';\nimport { FlickityPreviousDirective } from './flickityPrevious.directive';\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .directive('bcFlickity', FlickityDirective)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.options }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nfunction FlickityDirective($timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            flickityOptions: '=?'\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Extend the default options with user configuration\n\n        var flickityOptions = angular.extend({}, FlickityConfig, $controller.flickityOptions);\n\n        console.log('flickityOptions: ', flickityOptions);\n\n        // Initialize Flickity\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(function () {\n            var flickityInstance = FlickityService.create($element[0], $controller.flickityId, flickityOptions);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.flickityId = flickityInstance.id;\n        });\n\n        // Clean up when being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            FlickityService.destroy($controller.flickityId);\n        });\n    }\n\n    /**\n     * Controller\n     */\n    function FlickityController() {}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.options }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nexport function FlickityDirective(\n    $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            flickityOptions: '=?',\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Extend the default options with user configuration\n        const flickityOptions = angular.extend({}, FlickityConfig,\n                                               $controller.flickityOptions);\n\n        console.log('flickityOptions: ', flickityOptions);\n\n\n        // Initialize Flickity\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(() => {\n            const flickityInstance =\n                FlickityService.create($element[0], $controller.flickityId, flickityOptions);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.flickityId = flickityInstance.id;\n        });\n\n\n        // Clean up when being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            FlickityService.destroy($controller.flickityId);\n        });\n\n    }\n\n\n    /**\n     * Controller\n     */\n    function FlickityController() {\n\n\n\n    }\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\n\nvar FlickityService = exports.FlickityService = (function () {\n    function FlickityService($timeout) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Element} element\n     */\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return instance;\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this = this;\n\n            var pauseBeforeDestruction = 2000;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(function () {\n\n                // Destroy the Flickity instance\n                _this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                _this.instances.splice(flickityIndex, 1);\n            }, pauseBeforeDestruction);\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {Bool} isWrapped\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped) {\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            // Trigger the next slide\n            this.instances[flickityIndex].instance.next(isWrapped);\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {Bool} isWrapped\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped) {\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            // Trigger the next slide\n            this.instances[flickityIndex].instance.previous(isWrapped);\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Number} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            // Trigger the next slide\n            this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Number} index\n         */\n\n    }, {\n        key: 'getSelectedIndex',\n        value: function getSelectedIndex(id) {\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            // Return the current index\n            return this.instances[flickityIndex].instance.selectedIndex;\n        }\n\n        //\n        // Helper methods\n        //\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Number} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var negativeIndexForUnfound = -1;\n\n            // If no instances exist, cancel\n            if (this.instances.length < 1) {\n\n                return negativeIndexForUnfound;\n            } else {\n\n                // Find the instance by ID\n                var index = this.instances.findIndex(matchesId);\n\n                if (index === false) {\n                    return negativeIndexForUnfound;\n                } else {\n                    return index;\n                }\n            }\n\n            // Test to match an item in an array based on the id\n            function matchesId(item, index, array) {\n                if (item.id === id) {\n                    return item;\n                }\n            }\n        }\n    }]);\n\n    return FlickityService;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Element} element\n     */\n    create(element, id = this.instances.length + 1, options) {\n\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return instance;\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 2000;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        // Pause to allow other scope cleanup to occur\n        // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n        // directive can leave view\n        this.$timeout(() => {\n\n            // Destroy the Flickity instance\n            this.instances[flickityIndex].instance.destroy();\n\n            // Remove the instance from the array\n            this.instances.splice(flickityIndex, 1);\n\n        }, pauseBeforeDestruction);\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {Bool} isWrapped\n     */\n    next(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        // Trigger the next slide\n        this.instances[flickityIndex].instance.next(isWrapped);\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {Bool} isWrapped\n     */\n    previous(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        // Trigger the next slide\n        this.instances[flickityIndex].instance.previous(isWrapped);\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Number} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        // Trigger the next slide\n        this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Number} index\n     */\n    getSelectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        // Return the current index\n        return this.instances[flickityIndex].instance.selectedIndex;\n    }\n\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Number} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        const negativeIndexForUnfound = -1;\n\n        // If no instances exist, cancel\n        if (this.instances.length < 1) {\n\n            return negativeIndexForUnfound;\n\n        } else {\n\n            // Find the instance by ID\n            const index = this.instances.findIndex(matchesId);\n\n            if (index === false) {\n                return negativeIndexForUnfound;\n            } else {\n                return index;\n            }\n\n        }\n\n        // Test to match an item in an array based on the id\n        function matchesId(item, index, array) {\n            if (item.id === id) {\n                return item;\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\nfunction FlickityNextDirective(FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        require: '^bcFlickity',\n        scope: {\n            bcFlickityNext: '=?'\n        },\n        link: linkFunction\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no boolean was passed in, set to a default\n\n        if (typeof $scope.bcFlickityNext !== 'boolean') {\n            $scope.bcFlickityNext = true;\n        }\n\n        // Trigger next() method\n        $element.on('click', function () {\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext);\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickityNext.directive.js\n **/","export function FlickityNextDirective(\n    FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        require: '^bcFlickity',\n        scope: {\n            bcFlickityNext: '=?',\n        },\n        link: linkFunction,\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // If no boolean was passed in, set to a default\n        if (typeof $scope.bcFlickityNext !== 'boolean') {\n            $scope.bcFlickityNext = true;\n        }\n\n        // Trigger next() method\n        $element.on('click', () => {\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext);\n        });\n\n    }\n\n\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickityNext.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\nfunction FlickityPreviousDirective(FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        require: '^bcFlickity',\n        scope: {\n            bcFlickityPrevious: '=?'\n        },\n        link: linkFunction\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no boolean was passed in, set to a default\n\n        if (typeof $scope.bcFlickityPrevious !== 'boolean') {\n            $scope.bcFlickityPrevious = true;\n        }\n\n        // Bind the click up to the required controller\n        $element.on('click', function () {\n            FlickityService.previous($controller.flickityId, $scope.bcFlickityPrevious);\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickityPrevious.directive.js\n **/","export function FlickityPreviousDirective(\n    FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        require: '^bcFlickity',\n        scope: {\n            bcFlickityPrevious: '=?',\n        },\n        link: linkFunction,\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // If no boolean was passed in, set to a default\n        if (typeof $scope.bcFlickityPrevious !== 'boolean') {\n            $scope.bcFlickityPrevious = true;\n        }\n\n        // Bind the click up to the required controller\n        $element.on('click', () => {\n            FlickityService.previous($controller.flickityId, $scope.bcFlickityPrevious);\n        });\n\n    }\n\n\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickityPrevious.directive.js\n **/"],"sourceRoot":""}