{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-flickity.min.js","webpack:///webpack/bootstrap 1593092a0f8c6a064fde?0213","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/flickity.provider.js?f7a2","webpack:///./src/flickity.provider.js?01f5*","webpack:///./src/flickity.service.js?7800","webpack:///./src/flickity.service.js?ada5*","webpack:///./src/flickity.directive.js?34af","webpack:///./src/flickity.directive.js?f624*","webpack:///./src/next/flickityNext.directive.js?3c63","webpack:///./src/next/flickityNext.directive.js?8e3d*","webpack:///./src/next/next.controller.js?6830","webpack:///./src/next/next.controller.js?019e*","webpack:///./src/previous/flickityPrevious.directive.js?8057","webpack:///./src/previous/flickityPrevious.directive.js?8761*"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_flickity","_flickity2","_flickity3","_flickityNext","_flickityPrevious","angular","provider","FlickityConfigProvider","service","FlickityService","directive","FlickityDirective","FlickityNextDirective","FlickityPreviousDirective","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","value","accessibility","autoPlay","cellAlign","cellSelector","undefined","contain","draggable","freeScroll","freeScrollFriction","selectedAttraction","friction","initialIndex","lazyLoad","percentPosition","prevNextButtons","pageDots","resize","rightToLeft","setGallerySize","watchCSS","wrapAround","imagesLoaded","asNavFor","$timeout","$q","instances","$inject","element","arguments","options","Flickity","push","resolve","_this","pauseBeforeDestruction","flickityIndex","_getFlickityIndex","reject","destroy","splice","isWrapped","_this2","next","_this3","previous","index","_this4","isInstant","select","_this5","selectedIndex","_this6","_this7","reposition","_this8","reloadCells","_this9","_this10","data","elements","_this11","prepend","_this12","append","_this13","insert","_this14","getCellElements","_this15","remove","_this16","selectedElement","_this17","cells","matchesId","item","array","negativeIndexForUnfound","findIndex","FlickityConfig","linkFunction","$scope","$element","$attrs","$controller","bcFlickityId","flickityInstance","create","$on","event","FlickityController","extend","fromJson","bcFlickity","restrict","scope","bindToController","link","controller","controllerAs","$log","on","flickityId","bcFlickityNext","then","console","log","_next","NextController","_activate","cellCount","bcIsDisabled","_setId","getFirst","error","warn","FlickityPreviousController","bcFlickityPrevious"],"mappings":"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","file":"angular-flickity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _flickity = __webpack_require__(1);\n\t\n\tvar _flickity2 = __webpack_require__(2);\n\t\n\tvar _flickity3 = __webpack_require__(3);\n\t\n\tvar _flickityNext = __webpack_require__(4);\n\t\n\tvar _flickityPrevious = __webpack_require__(6);\n\t\n\tangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n\t    function FlickityConfigProvider() {\n\t        _classCallCheck(this, FlickityConfigProvider);\n\t\n\t        // Define Flickity defaults\n\t        this.accessibility = true;\n\t        this.autoPlay = false;\n\t        this.cellAlign = 'center';\n\t        this.cellSelector = undefined;\n\t        this.contain = false;\n\t        this.draggable = true;\n\t        this.freeScroll = false;\n\t        this.freeScrollFriction = false;\n\t        this.selectedAttraction = .025;\n\t        this.friction = .28;\n\t        this.initialIndex = 0;\n\t        this.lazyLoad = true;\n\t        this.percentPosition = true;\n\t        this.prevNextButtons = true;\n\t        this.pageDots = true;\n\t        this.resize = true;\n\t        this.rightToLeft = false;\n\t        this.setGallerySize = true;\n\t        this.watchCSS = false;\n\t        this.wrapAround = false;\n\t        this.imagesLoaded = true;\n\t        this.asNavFor = true;\n\t    }\n\t\n\t    _createClass(FlickityConfigProvider, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return FlickityConfigProvider;\n\t})();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/* global Flickity */\n\t\n\tvar FlickityService = exports.FlickityService = (function () {\n\t    FlickityService.$inject = [\"$timeout\", \"$q\"];\n\t    function FlickityService($timeout, $q) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, FlickityService);\n\t\n\t        this.$timeout = $timeout;\n\t        this.$q = $q;\n\t\n\t        this.instances = [];\n\t    }\n\t\n\t    /**\n\t     * Create a new Flickity instance\n\t     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n\t     *\n\t     * @param {Element} element\n\t     * @param {String} id\n\t     * @param {Object} options\n\t     * @return {Object} instance\n\t     */\n\t\n\t    _createClass(FlickityService, [{\n\t        key: 'create',\n\t        value: function create(element) {\n\t            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n\t            var options = arguments[2];\n\t\n\t            // Define the new instance\n\t            var instance = {\n\t                id: id,\n\t                instance: new Flickity(element, options)\n\t            };\n\t\n\t            // Save this instance to the array\n\t            this.instances.push(instance);\n\t\n\t            return this.$q(function (resolve) {\n\t                resolve(instance);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Destroy a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy(id) {\n\t            var _this = this;\n\t\n\t            var pauseBeforeDestruction = 2000;\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                }\n\t\n\t                // Pause to allow other scope cleanup to occur\n\t                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n\t                // directive can leave view\n\t                _this.$timeout(function () {\n\t\n\t                    // Destroy the Flickity instance\n\t                    _this.instances[flickityIndex].instance.destroy();\n\t\n\t                    // Remove the instance from the array\n\t                    _this.instances.splice(flickityIndex, 1);\n\t\n\t                    resolve('Instance ' + id + ' destroyed.');\n\t                }, pauseBeforeDestruction);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Move to the next slide\n\t         *\n\t         * @param {string} id\n\t         * @param {Bool} isWrapped\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'next',\n\t        value: function next(id, isWrapped) {\n\t            var _this2 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the next slide\n\t                    _this2.instances[flickityIndex].instance.next(isWrapped);\n\t\n\t                    resolve(_this2.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Move to the previous slide\n\t         *\n\t         * @param {string} id\n\t         * @param {Bool} isWrapped\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'previous',\n\t        value: function previous(id, isWrapped) {\n\t            var _this3 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the previous slide\n\t                    _this3.instances[flickityIndex].instance.previous(isWrapped);\n\t\n\t                    resolve(_this3.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Select a slide\n\t         *\n\t         * @param {String} id\n\t         * @param {Integer} index\n\t         * @param {Bool} isWrapped\n\t         * @param {Bool} isInstant\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'select',\n\t        value: function select(id, index) {\n\t            var _this4 = this;\n\t\n\t            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the selected slide\n\t                    _this4.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\t\n\t                    resolve(_this4.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the current slide index\n\t         *\n\t         * @param {String} id\n\t         * @return {Integer} selectedIndex\n\t         */\n\t\n\t    }, {\n\t        key: 'selectedIndex',\n\t        value: function selectedIndex(id) {\n\t            var _this5 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Return the current index\n\t                    resolve(_this5.instances[flickityIndex].instance.selectedIndex);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Resize the gallery and re-position cells.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'resize',\n\t        value: function resize(id) {\n\t            var _this6 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Trigger the resize\n\t                    _this6.instances[flickityIndex].instance.resize();\n\t\n\t                    resolve(_this6.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Position cells at selected position.\n\t         * Trigger reposition after the size of a cell has been changed.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'reposition',\n\t        value: function reposition(id) {\n\t            var _this7 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Trigger the resize\n\t                    _this7.instances[flickityIndex].instance.reposition();\n\t\n\t                    resolve(_this7.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Re-collect all cell elements in `flickity-slider`.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'reloadCells',\n\t        value: function reloadCells(id) {\n\t            var _this8 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Reload cells\n\t                    _this8.instances[flickityIndex].instance.reloadCells();\n\t\n\t                    resolve(_this8.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'get',\n\t        value: function get(id) {\n\t            var _this9 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this9.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the first Flickity instance\n\t         *\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'getFirst',\n\t        value: function getFirst() {\n\t            var _this10 = this;\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (!_this10.instances || _this10.instances.length < 1) {\n\t                    reject('No instances exist');\n\t                } else {\n\t                    resolve(_this10.instances[0]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the Flickity instance\n\t         *\n\t         * @param {Element} element\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'getByElement',\n\t        value: function getByElement(element) {\n\t            return this.$q(function (resolve, reject) {\n\t                var instance = Flickity.data(element);\n\t\n\t                if (instance) {\n\t                    resolve(instance);\n\t                } else {\n\t                    reject('Instance not found for ' + element);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Prepend elements and create cells to the beginning of the gallery.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'prepend',\n\t        value: function prepend(id, elements) {\n\t            var _this11 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Prepend the slides\n\t                    _this11.instances[flickityIndex].instance.prepend(elements);\n\t\n\t                    resolve(_this11.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Append elements and create cells to the end of the gallery.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'append',\n\t        value: function append(id, elements) {\n\t            var _this12 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Append the slides\n\t                    _this12.instances[flickityIndex].instance.append(elements);\n\t\n\t                    resolve(_this12.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Insert elements into the gallery and create cells at the desired index.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @param {Integer} index - Zero based index\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'insert',\n\t        value: function insert(id, elements, index) {\n\t            var _this13 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Insert the slides\n\t                    _this13.instances[flickityIndex].instance.insert(elements, index);\n\t\n\t                    resolve(_this13.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the elements of the cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Array} cellElements\n\t         */\n\t\n\t    }, {\n\t        key: 'getCellElements',\n\t        value: function getCellElements(id) {\n\t            var _this14 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this14.instances[flickityIndex].instance.getCellElements());\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the elements of the cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(id, elements) {\n\t            var _this15 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    _this15.instances[flickityIndex].instance.remove(elements);\n\t\n\t                    resolve(_this15.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the currently selected cell element\n\t         *\n\t         * @param {String} id\n\t         * @return {Element} selectedCellElement\n\t         */\n\t\n\t    }, {\n\t        key: 'selectedElement',\n\t        value: function selectedElement(id) {\n\t            var _this16 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this16.instances[flickityIndex].instance.selectedElement);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get an array of all cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Array} cells\n\t         */\n\t\n\t    }, {\n\t        key: 'cells',\n\t        value: function cells(id) {\n\t            var _this17 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this17.instances[flickityIndex].instance.cells);\n\t                }\n\t            });\n\t        }\n\t\n\t        //\n\t        // Helper methods\n\t        //\n\t\n\t        /**\n\t         * Find the index for a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Integer} flickityIndex\n\t         */\n\t\n\t    }, {\n\t        key: '_getFlickityIndex',\n\t        value: function _getFlickityIndex(id) {\n\t            var negativeIndexForUnfound = -1;\n\t\n\t            // If no instances exist, cancel\n\t            if (this.instances.length < 1) {\n\t\n\t                return negativeIndexForUnfound;\n\t            } else {\n\t\n\t                // Find the instance by ID\n\t                var index = this.instances.findIndex(matchesId);\n\t\n\t                if (index === false) {\n\t                    return negativeIndexForUnfound;\n\t                } else {\n\t                    return index;\n\t                }\n\t            }\n\t\n\t            // Test to match an item in an array based on the id\n\t            function matchesId(item, index, array) {\n\t                if (item.id === id) {\n\t                    return item;\n\t                }\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return FlickityService;\n\t})();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlickityDirective.$inject = [\"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityDirective = FlickityDirective;\n\t/* global Flickity */\n\t\n\t/**\n\t * Flickity.js\n\t * http://flickity.metafizzy.co/options.html\n\t *\n\t * Required markup\n\t *\n\t * <div bc-flickity flickity-options=\"{{ vm.myCustomOptions }}\">\n\t *   <div>\n\t *   <div>\n\t *   ...\n\t * </div>\n\t *\n\t */\n\tfunction FlickityDirective($timeout, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickity: '@?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        link: linkFunction,\n\t        controller: FlickityController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // If no ID was passed in\n\t\n\t        if (!$controller.bcFlickityId) {\n\t            // Use the element's ID if one exists\n\t            if ($attrs.id) {\n\t                $controller.bcFlickityId = $attrs.id;\n\t            }\n\t        }\n\t\n\t        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n\t        $timeout(function () {\n\t            // Initialize Flickity\n\t            var flickityInstance = FlickityService.create($element[0], $controller.bcFlickityId, $controller.options);\n\t\n\t            // Expose the Flickity instance and ID\n\t            $controller.Flickity = flickityInstance.instance;\n\t            $controller.bcFlickityId = flickityInstance.id;\n\t        });\n\t\n\t        // Clean up when being destroyed\n\t        var onDestroy = $scope.$on('$destroy', function (event) {\n\t            FlickityService.destroy($controller.bcFlickityId);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Controller\n\t     */\n\t    function FlickityController() {\n\t\n\t        // Extend the default options with user configuration\n\t        this.options = angular.extend({}, FlickityConfig, angular.fromJson(this.bcFlickity));\n\t    }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFlickityNextDirective.$inject = [\"$log\", \"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityNextDirective = FlickityNextDirective;\n\t\n\tvar _next = __webpack_require__(5);\n\t\n\tfunction FlickityNextDirective($log, $timeout, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickityNext: '=?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        link: linkFunction,\n\t        controller: _next.NextController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        $element.on('click', function () {\n\t\n\t            // Move to the next cell\n\t            FlickityService.next($controller.flickityId, $scope.bcFlickityNext).then(function () {\n\t\n\t                // After we move, set the selected index\n\t                FlickityService.selectedIndex($controller.flickityId).then(function (index) {\n\t                    console.log('selectedIndex: ', index);\n\t                    $controller.selectedIndex = index;\n\t\n\t                    /*\n\t                     *$controller.setDisabledState();\n\t                     */\n\t                });\n\t            });\n\t        });\n\t    }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NextController = exports.NextController = (function () {\n\t    NextController.$inject = [\"$log\", \"$q\", \"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\t    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, NextController);\n\t\n\t        this.$log = $log;\n\t        this.$q = $q;\n\t        this.$timeout = $timeout;\n\t        this.FlickityConfig = FlickityConfig;\n\t        this.FlickityService = FlickityService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(NextController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            var _this = this;\n\t\n\t            // Assign or fall back to default\n\t            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n\t            this.flickityId = null;\n\t            this.cellCount;\n\t            this.selectedIndex;\n\t            this.bcIsDisabled = false;\n\t\n\t            // Make sure we have an ID before we wire everything up\n\t            this._setId().then(function () {\n\t\n\t                // Get the cells\n\t                _this.FlickityService.cells(_this.flickityId).then(function (cells) {\n\t                    console.log('cells: ', cells, cells.length);\n\t\n\t                    // Save the count\n\t                    _this.cellCount = cells.length;\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: 'setDisabledState',\n\t        value: function setDisabledState() {\n\t            console.log('in setDisabledStateeeeee');\n\t\n\t            // If we can wrap, we should never disable\n\t            if (this.wrapAround) {\n\t                this.bcIsDisabled = false;\n\t            } else {\n\t                // if we cannot wrap\n\t\n\t                // If we are at the end\n\t                if (this.cellCount - this.selectedIndex < 1) {\n\t                    this.bcIsDisabled = true;\n\t                } else {\n\t                    this.bcIsDisabled = false;\n\t                }\n\t            }\n\t\n\t            console.log('in setDisabledState: ', this.cellCount, this.selectedIndex, this.bcIsDisabled);\n\t        }\n\t    }, {\n\t        key: '_setId',\n\t        value: function _setId() {\n\t            var _this2 = this;\n\t\n\t            return this.$q(function (resolve, reject) {\n\t\n\t                if (_this2.bcFlickityId) {\n\t                    _this2.flickityId = _this2.bcFlickityId;\n\t                    resolve(_this2.flickityId);\n\t                } else {\n\t                    _this2.$timeout(function () {\n\t                        _this2.FlickityService.getFirst().then(function (instance) {\n\t                            _this2.flickityId = instance.id;\n\t                            resolve(_this2.flickityId);\n\t                        }).catch(function (error) {\n\t                            _this2.$log.warn(error);\n\t                            reject(error);\n\t                        });\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return NextController;\n\t})();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tFlickityPreviousDirective.$inject = [\"$log\", \"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityPreviousDirective = FlickityPreviousDirective;\n\tfunction FlickityPreviousDirective($log, $timeout, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    linkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickityPrevious: '=?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        link: linkFunction,\n\t        controller: FlickityPreviousController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // Bind the click up to the required controller\n\t\n\t        $element.on('click', function () {\n\t            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Controller\n\t     */\n\t    function FlickityPreviousController() {\n\t        var _this = this;\n\t\n\t        // Assign or fall back to default\n\t        this.wrapAround = this.bcFlickityPrevious || FlickityConfig.wrapAround;\n\t\n\t        if (this.bcFlickityId) {\n\t            this.flickityId = this.bcFlickityId;\n\t        } else {\n\t            $timeout(function () {\n\t                FlickityService.getFirst().then(function (instance) {\n\t                    _this.flickityId = instance.id;\n\t                }).catch(function (error) {\n\t                    $log.warn(error);\n\t                });\n\t            });\n\t        }\n\t    }\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-flickity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1593092a0f8c6a064fde\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.service');\n\nvar _flickity3 = require('./flickity.directive');\n\nvar _flickityNext = require('./next/flickityNext.directive');\n\nvar _flickityPrevious = require('./previous/flickityPrevious.directive');\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityService } from './flickity.service';\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityNextDirective } from './next/flickityNext.directive';\nimport { FlickityPreviousDirective } from './previous/flickityPrevious.directive';\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickity', FlickityDirective)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\n\nvar FlickityService = exports.FlickityService = (function () {\n    function FlickityService($timeout, $q) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return this.$q(function (resolve) {\n                resolve(instance);\n            });\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this = this;\n\n            var pauseBeforeDestruction = 2000;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                }\n\n                // Pause to allow other scope cleanup to occur\n                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n                // directive can leave view\n                _this.$timeout(function () {\n\n                    // Destroy the Flickity instance\n                    _this.instances[flickityIndex].instance.destroy();\n\n                    // Remove the instance from the array\n                    _this.instances.splice(flickityIndex, 1);\n\n                    resolve('Instance ' + id + ' destroyed.');\n                }, pauseBeforeDestruction);\n            });\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped) {\n            var _this2 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the next slide\n                    _this2.instances[flickityIndex].instance.next(isWrapped);\n\n                    resolve(_this2.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped) {\n            var _this3 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the previous slide\n                    _this3.instances[flickityIndex].instance.previous(isWrapped);\n\n                    resolve(_this3.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Integer} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var _this4 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this4.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                    resolve(_this4.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Integer} selectedIndex\n         */\n\n    }, {\n        key: 'selectedIndex',\n        value: function selectedIndex(id) {\n            var _this5 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Return the current index\n                    resolve(_this5.instances[flickityIndex].instance.selectedIndex);\n                }\n            });\n        }\n\n        /**\n         * Resize the gallery and re-position cells.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize(id) {\n            var _this6 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this6.instances[flickityIndex].instance.resize();\n\n                    resolve(_this6.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Position cells at selected position.\n         * Trigger reposition after the size of a cell has been changed.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reposition',\n        value: function reposition(id) {\n            var _this7 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this7.instances[flickityIndex].instance.reposition();\n\n                    resolve(_this7.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Re-collect all cell elements in `flickity-slider`.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reloadCells',\n        value: function reloadCells(id) {\n            var _this8 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Reload cells\n                    _this8.instances[flickityIndex].instance.reloadCells();\n\n                    resolve(_this8.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'get',\n        value: function get(id) {\n            var _this9 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this9.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the first Flickity instance\n         *\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getFirst',\n        value: function getFirst() {\n            var _this10 = this;\n\n            return this.$q(function (resolve, reject) {\n                if (!_this10.instances || _this10.instances.length < 1) {\n                    reject('No instances exist');\n                } else {\n                    resolve(_this10.instances[0]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {Element} element\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getByElement',\n        value: function getByElement(element) {\n            return this.$q(function (resolve, reject) {\n                var instance = Flickity.data(element);\n\n                if (instance) {\n                    resolve(instance);\n                } else {\n                    reject('Instance not found for ' + element);\n                }\n            });\n        }\n\n        /**\n         * Prepend elements and create cells to the beginning of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'prepend',\n        value: function prepend(id, elements) {\n            var _this11 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Prepend the slides\n                    _this11.instances[flickityIndex].instance.prepend(elements);\n\n                    resolve(_this11.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Append elements and create cells to the end of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'append',\n        value: function append(id, elements) {\n            var _this12 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Append the slides\n                    _this12.instances[flickityIndex].instance.append(elements);\n\n                    resolve(_this12.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Insert elements into the gallery and create cells at the desired index.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @param {Integer} index - Zero based index\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(id, elements, index) {\n            var _this13 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Insert the slides\n                    _this13.instances[flickityIndex].instance.insert(elements, index);\n\n                    resolve(_this13.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Array} cellElements\n         */\n\n    }, {\n        key: 'getCellElements',\n        value: function getCellElements(id) {\n            var _this14 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this14.instances[flickityIndex].instance.getCellElements());\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(id, elements) {\n            var _this15 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    _this15.instances[flickityIndex].instance.remove(elements);\n\n                    resolve(_this15.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the currently selected cell element\n         *\n         * @param {String} id\n         * @return {Element} selectedCellElement\n         */\n\n    }, {\n        key: 'selectedElement',\n        value: function selectedElement(id) {\n            var _this16 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this16.instances[flickityIndex].instance.selectedElement);\n                }\n            });\n        }\n\n        /**\n         * Get an array of all cells\n         *\n         * @param {String} id\n         * @return {Array} cells\n         */\n\n    }, {\n        key: 'cells',\n        value: function cells(id) {\n            var _this17 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this17.instances[flickityIndex].instance.cells);\n                }\n            });\n        }\n\n        //\n        // Helper methods\n        //\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Integer} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var negativeIndexForUnfound = -1;\n\n            // If no instances exist, cancel\n            if (this.instances.length < 1) {\n\n                return negativeIndexForUnfound;\n            } else {\n\n                // Find the instance by ID\n                var index = this.instances.findIndex(matchesId);\n\n                if (index === false) {\n                    return negativeIndexForUnfound;\n                } else {\n                    return index;\n                }\n            }\n\n            // Test to match an item in an array based on the id\n            function matchesId(item, index, array) {\n                if (item.id === id) {\n                    return item;\n                }\n            }\n        }\n    }]);\n\n    return FlickityService;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout, $q\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n    create(element, id = this.instances.length + 1, options) {\n\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return this.$q((resolve) => {\n            resolve(instance);\n        });\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 2000;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(() => {\n\n                // Destroy the Flickity instance\n                this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                this.instances.splice(flickityIndex, 1);\n\n                resolve('Instance ' + id + ' destroyed.');\n\n            }, pauseBeforeDestruction);\n        });\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    next(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the next slide\n                this.instances[flickityIndex].instance.next(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    previous(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the previous slide\n                this.instances[flickityIndex].instance.previous(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Integer} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Integer} selectedIndex\n     */\n    selectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Return the current index\n                resolve(this.instances[flickityIndex].instance.selectedIndex);\n            }\n        });\n    }\n\n\n    /**\n     * Resize the gallery and re-position cells.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    resize(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.resize();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Position cells at selected position.\n     * Trigger reposition after the size of a cell has been changed.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reposition(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.reposition();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Re-collect all cell elements in `flickity-slider`.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reloadCells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Reload cells\n                this.instances[flickityIndex].instance.reloadCells();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    get(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the first Flickity instance\n     *\n     * @return {Object} instance\n     */\n    getFirst() {\n        return this.$q((resolve, reject) => {\n            if (!this.instances || this.instances.length < 1) {\n                reject('No instances exist');\n            } else {\n                resolve(this.instances[0]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {Element} element\n     * @return {Object} instance\n     */\n    getByElement(element) {\n        return this.$q((resolve, reject) => {\n            const instance = Flickity.data(element)\n\n            if (instance) {\n                resolve(instance);\n            } else {\n                reject('Instance not found for ' + element);\n            }\n        });\n    }\n\n\n    /**\n     * Prepend elements and create cells to the beginning of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    prepend(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Prepend the slides\n                this.instances[flickityIndex].instance.prepend(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Append elements and create cells to the end of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    append(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Append the slides\n                this.instances[flickityIndex].instance.append(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Insert elements into the gallery and create cells at the desired index.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @param {Integer} index - Zero based index\n     * @return {Object} instance\n     */\n    insert(id, elements, index) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Insert the slides\n                this.instances[flickityIndex].instance.insert(elements, index);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Array} cellElements\n     */\n    getCellElements(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.getCellElements());\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    remove(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                this.instances[flickityIndex].instance.remove(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the currently selected cell element\n     *\n     * @param {String} id\n     * @return {Element} selectedCellElement\n     */\n    selectedElement(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.selectedElement);\n            }\n        });\n    }\n\n\n    /**\n     * Get an array of all cells\n     *\n     * @param {String} id\n     * @return {Array} cells\n     */\n    cells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.cells);\n            }\n        });\n    }\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Integer} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        const negativeIndexForUnfound = -1;\n\n        // If no instances exist, cancel\n        if (this.instances.length < 1) {\n\n            return negativeIndexForUnfound;\n\n        } else {\n\n            // Find the instance by ID\n            const index = this.instances.findIndex(matchesId);\n\n            if (index === false) {\n                return negativeIndexForUnfound;\n            } else {\n                return index;\n            }\n\n        }\n\n        // Test to match an item in an array based on the id\n        function matchesId(item, index, array) {\n            if (item.id === id) {\n                return item;\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.myCustomOptions }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nfunction FlickityDirective($timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(function () {\n            // Initialize Flickity\n            var flickityInstance = FlickityService.create($element[0], $controller.bcFlickityId, $controller.options);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.bcFlickityId = flickityInstance.id;\n        });\n\n        // Clean up when being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n    }\n\n    /**\n     * Controller\n     */\n    function FlickityController() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, FlickityConfig, angular.fromJson(this.bcFlickity));\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.myCustomOptions }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nexport function FlickityDirective(\n    $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(() => {\n            // Initialize Flickity\n            const flickityInstance =\n                FlickityService.create($element[0], $controller.bcFlickityId, $controller.options);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.bcFlickityId = flickityInstance.id;\n        });\n\n\n        // Clean up when being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n\n    }\n\n\n    /**\n     * Controller\n     */\n    function FlickityController() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, FlickityConfig, angular.fromJson(this.bcFlickity));\n\n    }\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\n\nvar _next = require('./next.controller');\n\nfunction FlickityNextDirective($log, $timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: _next.NextController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext).then(function () {\n\n                // After we move, set the selected index\n                FlickityService.selectedIndex($controller.flickityId).then(function (index) {\n                    console.log('selectedIndex: ', index);\n                    $controller.selectedIndex = index;\n\n                    /*\n                     *$controller.setDisabledState();\n                     */\n                });\n            });\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/flickityNext.directive.js\n **/","import { NextController } from './next.controller';\n\nexport function FlickityNextDirective(\n    $log, $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: NextController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext).then(() => {\n\n                // After we move, set the selected index\n                FlickityService.selectedIndex($controller.flickityId).then((index) => {\n                    console.log('selectedIndex: ', index);\n                    $controller.selectedIndex = index;\n\n\n                    /*\n                     *$controller.setDisabledState();\n                     */\n                });\n\n            });\n\n        });\n\n    }\n\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/flickityNext.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NextController = exports.NextController = (function () {\n    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, NextController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(NextController, [{\n        key: '_activate',\n        value: function _activate() {\n            var _this = this;\n\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n            this.cellCount;\n            this.selectedIndex;\n            this.bcIsDisabled = false;\n\n            // Make sure we have an ID before we wire everything up\n            this._setId().then(function () {\n\n                // Get the cells\n                _this.FlickityService.cells(_this.flickityId).then(function (cells) {\n                    console.log('cells: ', cells, cells.length);\n\n                    // Save the count\n                    _this.cellCount = cells.length;\n                });\n            });\n        }\n    }, {\n        key: 'setDisabledState',\n        value: function setDisabledState() {\n            console.log('in setDisabledStateeeeee');\n\n            // If we can wrap, we should never disable\n            if (this.wrapAround) {\n                this.bcIsDisabled = false;\n            } else {\n                // if we cannot wrap\n\n                // If we are at the end\n                if (this.cellCount - this.selectedIndex < 1) {\n                    this.bcIsDisabled = true;\n                } else {\n                    this.bcIsDisabled = false;\n                }\n            }\n\n            console.log('in setDisabledState: ', this.cellCount, this.selectedIndex, this.bcIsDisabled);\n        }\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this2 = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this2.bcFlickityId) {\n                    _this2.flickityId = _this2.bcFlickityId;\n                    resolve(_this2.flickityId);\n                } else {\n                    _this2.$timeout(function () {\n                        _this2.FlickityService.getFirst().then(function (instance) {\n                            _this2.flickityId = instance.id;\n                            resolve(_this2.flickityId);\n                        }).catch(function (error) {\n                            _this2.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return NextController;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/next.controller.js\n **/","export class NextController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n        this.cellCount;\n        this.selectedIndex;\n        this.bcIsDisabled = false;\n\n        // Make sure we have an ID before we wire everything up\n        this._setId().then(() => {\n\n            // Get the cells\n            this.FlickityService.cells(this.flickityId).then((cells) => {\n                console.log('cells: ', cells, cells.length);\n\n                // Save the count\n                this.cellCount = cells.length;\n            });\n\n        });\n\n\n    }\n\n\n    setDisabledState() {\n        console.log('in setDisabledStateeeeee');\n\n        // If we can wrap, we should never disable\n        if (this.wrapAround) {\n            this.bcIsDisabled = false;\n        } else {\n            // if we cannot wrap\n\n            // If we are at the end\n            if (this.cellCount - this.selectedIndex < 1) {\n                this.bcIsDisabled = true;\n            } else {\n                this.bcIsDisabled = false;\n            }\n        }\n\n        console.log('in setDisabledState: ', this.cellCount, this.selectedIndex, this.bcIsDisabled);\n\n    }\n\n\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/next.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\nfunction FlickityPreviousDirective($log, $timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: FlickityPreviousController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Bind the click up to the required controller\n\n        $element.on('click', function () {\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n    }\n\n    /**\n     * Controller\n     */\n    function FlickityPreviousController() {\n        var _this = this;\n\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || FlickityConfig.wrapAround;\n\n        if (this.bcFlickityId) {\n            this.flickityId = this.bcFlickityId;\n        } else {\n            $timeout(function () {\n                FlickityService.getFirst().then(function (instance) {\n                    _this.flickityId = instance.id;\n                }).catch(function (error) {\n                    $log.warn(error);\n                });\n            });\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/flickityPrevious.directive.js\n **/","export function FlickityPreviousDirective(\n    $log, $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: FlickityPreviousController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Bind the click up to the required controller\n        $element.on('click', () => {\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n\n    }\n\n\n    /**\n     * Controller\n     */\n    function FlickityPreviousController() {\n\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || FlickityConfig.wrapAround;\n\n        if (this.bcFlickityId) {\n            this.flickityId = this.bcFlickityId;\n        } else {\n            $timeout(() => {\n                FlickityService.getFirst()\n                    .then((instance) => {\n                        this.flickityId = instance.id;\n                    })\n                    .catch((error) => {\n                        $log.warn(error);\n                    })\n                ;\n            });\n        }\n    }\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/flickityPrevious.directive.js\n **/"],"sourceRoot":""}