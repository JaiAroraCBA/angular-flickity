{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-flickity.min.js","webpack:///webpack/bootstrap e99098ef5a1190d2cdc5?9dcb","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/flickity.provider.js?f7a2","webpack:///./src/flickity.provider.js?01f5*","webpack:///./src/flickity.service.js?7800","webpack:///./src/flickity.service.js?ada5*","webpack:///./src/flickity.directive.js?34af","webpack:///./src/flickity.directive.js?f624*","webpack:///./src/flickity.controller.js?b07f","webpack:///./src/flickity.controller.js?ad88*","webpack:///./src/next/flickityNext.directive.js?3c63","webpack:///./src/next/flickityNext.directive.js?8e3d*","webpack:///./src/next/next.controller.js?6830","webpack:///./src/next/next.controller.js?019e*","webpack:///./src/previous/flickityPrevious.directive.js?8057","webpack:///./src/previous/flickityPrevious.directive.js?8761*","webpack:///./src/previous/previous.controller.js?e020","webpack:///./src/previous/previous.controller.js?b8f9*"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_flickity","_flickity2","_flickity3","_flickityNext","_flickityPrevious","angular","provider","FlickityConfigProvider","service","FlickityService","directive","FlickityDirective","FlickityNextDirective","FlickityPreviousDirective","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","accessibility","autoPlay","cellAlign","cellSelector","undefined","contain","draggable","freeScroll","freeScrollFriction","selectedAttraction","friction","initialIndex","lazyLoad","percentPosition","prevNextButtons","pageDots","resize","rightToLeft","setGallerySize","watchCSS","wrapAround","imagesLoaded","asNavFor","$timeout","$q","$rootScope","instances","$inject","element","_this","arguments","options","_findObjectById","index","_getFlickityIndex","console","error","Flickity","push","resolve","_bindEvents","then","_this2","pauseBeforeDestruction","flickityIndex","reject","destroy","splice","isWrapped","_this3","next","_this4","previous","_this5","isInstant","select","_this6","selectedIndex","_this7","_this8","reposition","_this9","reloadCells","_this10","_this11","data","elements","_this12","prepend","_this13","append","_this14","insert","_this15","getCellElements","_this16","remove","_this17","selectedElement","_this18","cells","foundIndex","forEach","_this19","ID","on","$emit","event","pointer","moveVector","cellElement","cellIndex","source","filter","object","preLinkFunction","$scope","$element","$attrs","$controller","bcFlickityId","postLinkFunction","document","ready","create","flickityInstance","$on","restrict","scope","bindToController","bcFlickity","compile","pre","post","controller","FlickityController","controllerAs","FlickityConfig","_activate","extend","fromJson","$log","_disableButtonIfNeeded","cellCount","$set","flickityId","selectEvent","settleEvent","bcFlickityNext","_next","NextController","_setId","getFirst","warn","bcFlickityPrevious","_previous","PreviousController"],"mappings":"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","file":"angular-flickity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _flickity = __webpack_require__(1);\n\t\n\tvar _flickity2 = __webpack_require__(2);\n\t\n\tvar _flickity3 = __webpack_require__(3);\n\t\n\tvar _flickityNext = __webpack_require__(5);\n\t\n\tvar _flickityPrevious = __webpack_require__(7);\n\t\n\tangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FlickityConfigProvider = exports.FlickityConfigProvider = function () {\n\t    function FlickityConfigProvider() {\n\t        _classCallCheck(this, FlickityConfigProvider);\n\t\n\t        // Define Flickity defaults\n\t        this.accessibility = true;\n\t        this.autoPlay = false;\n\t        this.cellAlign = 'center';\n\t        this.cellSelector = undefined;\n\t        this.contain = false;\n\t        this.draggable = true;\n\t        this.freeScroll = false;\n\t        this.freeScrollFriction = false;\n\t        this.selectedAttraction = .025;\n\t        this.friction = .28;\n\t        this.initialIndex = 0;\n\t        this.lazyLoad = true;\n\t        this.percentPosition = true;\n\t        this.prevNextButtons = true;\n\t        this.pageDots = true;\n\t        this.resize = true;\n\t        this.rightToLeft = false;\n\t        this.setGallerySize = true;\n\t        this.watchCSS = false;\n\t        this.wrapAround = false;\n\t        this.imagesLoaded = true;\n\t        this.asNavFor = true;\n\t    }\n\t\n\t    _createClass(FlickityConfigProvider, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return FlickityConfigProvider;\n\t}();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/* global Flickity */\n\t\n\tvar FlickityService = exports.FlickityService = function () {\n\t    FlickityService.$inject = [\"$timeout\", \"$q\", \"$rootScope\"];\n\t    function FlickityService($timeout, $q, $rootScope) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, FlickityService);\n\t\n\t        this.$timeout = $timeout;\n\t        this.$q = $q;\n\t        this.$rootScope = $rootScope;\n\t\n\t        this.instances = [];\n\t    }\n\t\n\t    /**\n\t     * Create a new Flickity instance\n\t     *\n\t     * @param {Element} element\n\t     * @param {String} id\n\t     * @param {Object} options\n\t     * @return {Object} instance\n\t     */\n\t\n\t\n\t    _createClass(FlickityService, [{\n\t        key: 'create',\n\t        value: function create(element) {\n\t            var _this = this;\n\t\n\t            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n\t            var options = arguments[2];\n\t\n\t\n\t            // Check to see if the ID is already in use\n\t            if (this._findObjectById(this.instances, id)) {\n\t                var index = this._getFlickityIndex(id);\n\t                console.error('This ID is already in use: ', this.instances[index]);\n\t\n\t                return false;\n\t            }\n\t\n\t            // Define the new instance\n\t            var instance = {\n\t                id: id,\n\t                instance: new Flickity(element, options)\n\t            };\n\t\n\t            // Save this instance to the array\n\t            this.instances.push(instance);\n\t\n\t            return this.$q(function (resolve) {\n\t\n\t                // Bind to all events\n\t                _this._bindEvents(id).then(function () {\n\t                    resolve(instance);\n\t                });\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Destroy a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'destroy',\n\t        value: function destroy(id) {\n\t            var _this2 = this;\n\t\n\t            var pauseBeforeDestruction = 2000;\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                }\n\t\n\t                // Pause to allow other scope cleanup to occur\n\t                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n\t                // directive can leave view\n\t                _this2.$timeout(function () {\n\t\n\t                    // Destroy the Flickity instance\n\t                    _this2.instances[flickityIndex].instance.destroy();\n\t\n\t                    // Remove the instance from the array\n\t                    _this2.instances.splice(flickityIndex, 1);\n\t\n\t                    resolve('Instance ' + id + ' destroyed.');\n\t                }, pauseBeforeDestruction);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Move to the next slide\n\t         *\n\t         * @param {string} id\n\t         * @param {Bool} isWrapped\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'next',\n\t        value: function next(id, isWrapped) {\n\t            var _this3 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the next slide\n\t                    _this3.instances[flickityIndex].instance.next(isWrapped);\n\t\n\t                    resolve(_this3.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Move to the previous slide\n\t         *\n\t         * @param {string} id\n\t         * @param {Bool} isWrapped\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'previous',\n\t        value: function previous(id, isWrapped) {\n\t            var _this4 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the previous slide\n\t                    _this4.instances[flickityIndex].instance.previous(isWrapped);\n\t\n\t                    resolve(_this4.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Select a slide\n\t         *\n\t         * @param {String} id\n\t         * @param {Integer} index\n\t         * @param {Bool} isWrapped\n\t         * @param {Bool} isInstant\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'select',\n\t        value: function select(id, index) {\n\t            var _this5 = this;\n\t\n\t            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\t            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Move to the selected slide\n\t                    _this5.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\t\n\t                    resolve(_this5.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the current slide index\n\t         *\n\t         * @param {String} id\n\t         * @return {Integer} selectedIndex\n\t         */\n\t\n\t    }, {\n\t        key: 'selectedIndex',\n\t        value: function selectedIndex(id) {\n\t            var _this6 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Return the current index\n\t                    resolve(_this6.instances[flickityIndex].instance.selectedIndex);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Resize the gallery and re-position cells.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'resize',\n\t        value: function resize(id) {\n\t            var _this7 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Trigger the resize\n\t                    _this7.instances[flickityIndex].instance.resize();\n\t\n\t                    resolve(_this7.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Position cells at selected position.\n\t         * Trigger reposition after the size of a cell has been changed.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'reposition',\n\t        value: function reposition(id) {\n\t            var _this8 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Trigger the resize\n\t                    _this8.instances[flickityIndex].instance.reposition();\n\t\n\t                    resolve(_this8.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Re-collect all cell elements in `flickity-slider`.\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'reloadCells',\n\t        value: function reloadCells(id) {\n\t            var _this9 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Reload cells\n\t                    _this9.instances[flickityIndex].instance.reloadCells();\n\t\n\t                    resolve(_this9.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'get',\n\t        value: function get(id) {\n\t            var _this10 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this10.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the first Flickity instance\n\t         *\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'getFirst',\n\t        value: function getFirst() {\n\t            var _this11 = this;\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (!_this11.instances || _this11.instances.length < 1) {\n\t                    reject('No instances exist');\n\t                } else {\n\t                    resolve(_this11.instances[0]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the Flickity instance\n\t         *\n\t         * @param {Element} element\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'getByElement',\n\t        value: function getByElement(element) {\n\t            return this.$q(function (resolve, reject) {\n\t                var instance = Flickity.data(element);\n\t\n\t                if (instance) {\n\t                    resolve(instance);\n\t                } else {\n\t                    reject('Instance not found for ' + element);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Prepend elements and create cells to the beginning of the gallery.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'prepend',\n\t        value: function prepend(id, elements) {\n\t            var _this12 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Prepend the slides\n\t                    _this12.instances[flickityIndex].instance.prepend(elements);\n\t\n\t                    resolve(_this12.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Append elements and create cells to the end of the gallery.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'append',\n\t        value: function append(id, elements) {\n\t            var _this13 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Append the slides\n\t                    _this13.instances[flickityIndex].instance.append(elements);\n\t\n\t                    resolve(_this13.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Insert elements into the gallery and create cells at the desired index.\n\t         *\n\t         * @param {String} id\n\t         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n\t         * @param {Integer} index - Zero based index\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'insert',\n\t        value: function insert(id, elements, index) {\n\t            var _this14 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    // Insert the slides\n\t                    _this14.instances[flickityIndex].instance.insert(elements, index);\n\t\n\t                    resolve(_this14.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the elements of the cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Array} cellElements\n\t         */\n\t\n\t    }, {\n\t        key: 'getCellElements',\n\t        value: function getCellElements(id) {\n\t            var _this15 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this15.instances[flickityIndex].instance.getCellElements());\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the elements of the cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Object} instance\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(id, elements) {\n\t            var _this16 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    _this16.instances[flickityIndex].instance.remove(elements);\n\t\n\t                    resolve(_this16.instances[flickityIndex]);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get the currently selected cell element\n\t         *\n\t         * @param {String} id\n\t         * @return {Element} selectedCellElement\n\t         */\n\t\n\t    }, {\n\t        key: 'selectedElement',\n\t        value: function selectedElement(id) {\n\t            var _this17 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this17.instances[flickityIndex].instance.selectedElement);\n\t                }\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Get an array of all cells\n\t         *\n\t         * @param {String} id\n\t         * @return {Array} cells\n\t         */\n\t\n\t    }, {\n\t        key: 'cells',\n\t        value: function cells(id) {\n\t            var _this18 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            return this.$q(function (resolve, reject) {\n\t                if (flickityIndex < 0) {\n\t                    reject('Instance ' + id + ' not found');\n\t                } else {\n\t                    resolve(_this18.instances[flickityIndex].instance.cells);\n\t                }\n\t            });\n\t        }\n\t\n\t        //\n\t        // Helper methods\n\t        //\n\t\n\t        /**\n\t         * Find the index for a Flickity instance\n\t         *\n\t         * @param {String} id\n\t         * @return {Integer} flickityIndex\n\t         */\n\t\n\t    }, {\n\t        key: '_getFlickityIndex',\n\t        value: function _getFlickityIndex(id) {\n\t            var foundIndex = void 0;\n\t\n\t            // If no instances exist\n\t            if (!this.instances.length) {\n\t\n\t                foundIndex = -1;\n\t            } else {\n\t                // if instances do exist\n\t\n\t                // Check the ID of each instance\n\t                this.instances.forEach(function (instance, index) {\n\t\n\t                    // If it matches our ID, set the index\n\t                    if (instance.id === id) {\n\t                        foundIndex = index;\n\t                    }\n\t                });\n\t            }\n\t\n\t            return foundIndex;\n\t        }\n\t    }, {\n\t        key: '_bindEvents',\n\t        value: function _bindEvents(id) {\n\t            var _this19 = this;\n\t\n\t            var flickityIndex = this._getFlickityIndex(id);\n\t\n\t            if (flickityIndex < 0) {\n\t                return false;\n\t            }\n\t\n\t            return this.$q(function (resolve) {\n\t                var ID = _this19.instances[flickityIndex].id;\n\t\n\t                _this19.instances[flickityIndex].instance.on('cellSelect', function () {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':cellSelect', _this19.instances[flickityIndex]);\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('settle', function () {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':settle', _this19.instances[flickityIndex]);\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('dragStart', function (event, pointer) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragStart', {\n\t                        event: event,\n\t                        pointer: pointer\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('dragMove', function (event, pointer, moveVector) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragMove', {\n\t                        event: event,\n\t                        pointer: pointer,\n\t                        moveVector: moveVector\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('dragEnd', function (event, pointer) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragEnd', {\n\t                        event: event,\n\t                        pointer: pointer\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('pointerDown', function (event, pointer) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerDown', {\n\t                        event: event,\n\t                        pointer: pointer\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('pointerMove', function (event, pointer, moveVector) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerMove', {\n\t                        event: event,\n\t                        pointer: pointer,\n\t                        moveVector: moveVector\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('pointerUp', function (event, pointer) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerUp', {\n\t                        event: event,\n\t                        pointer: pointer\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('staticClick', function (event, pointer, cellElement, cellIndex) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':staticClick', {\n\t                        event: event,\n\t                        pointer: pointer,\n\t                        cellElement: cellElement,\n\t                        cellIndex: cellIndex\n\t                    });\n\t                });\n\t\n\t                _this19.instances[flickityIndex].instance.on('lazyLoad', function (event, cellElement) {\n\t                    _this19.$rootScope.$emit('Flickity:' + ID + ':lazyLoad', {\n\t                        event: event,\n\t                        cellElement: cellElement\n\t                    });\n\t                });\n\t\n\t                resolve(true);\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Find an object within an array by ID\n\t         *\n\t         * @param {Array} source\n\t         * @param {String} id\n\t         * @return {Object} match\n\t         */\n\t\n\t    }, {\n\t        key: '_findObjectById',\n\t        value: function _findObjectById(source, id) {\n\t            return source.filter(function (object) {\n\t                return object.id === id;\n\t            })[0];\n\t        }\n\t    }]);\n\t\n\t    return FlickityService;\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFlickityDirective.$inject = [\"$timeout\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityDirective = FlickityDirective;\n\t\n\tvar _flickity = __webpack_require__(4);\n\t\n\tfunction FlickityDirective($timeout, FlickityService) {\n\t    'ngInject';\n\t\n\t    preLinkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    postLinkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickity: '@?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        compile: function compile() {\n\t            return {\n\t                pre: preLinkFunction,\n\t                post: postLinkFunction\n\t            };\n\t        },\n\t        controller: _flickity.FlickityController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    function preLinkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // If no ID was passed in\n\t\n\t        if (!$controller.bcFlickityId) {\n\t            // Use the element's ID if one exists\n\t            if ($attrs.id) {\n\t                $controller.bcFlickityId = $attrs.id;\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Post Link\n\t     */\n\t    function postLinkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // Make sure the DOM has initialized\n\t\n\t        angular.element(document).ready(function () {\n\t\n\t            // Initialize Flickity\n\t            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options).then(function (flickityInstance) {\n\t\n\t                // Expose the Flickity instance and ID\n\t                $controller.Flickity = flickityInstance.instance;\n\t                $controller.bcFlickityId = flickityInstance.id;\n\t            });\n\t        });\n\t\n\t        // When the directive is being destroyed\n\t        var onDestroy = $scope.$on('$destroy', function (event) {\n\t            // Make sure we destroy the Flickity instance\n\t            FlickityService.destroy($controller.bcFlickityId);\n\t        });\n\t    }\n\t} /* global Flickity */\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FlickityController = exports.FlickityController = function () {\n\t    FlickityController.$inject = [\"FlickityConfig\"];\n\t    function FlickityController(FlickityConfig) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, FlickityController);\n\t\n\t        this.FlickityConfig = FlickityConfig;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(FlickityController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t\n\t            // Extend the default options with user configuration\n\t            this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n\t        }\n\t    }]);\n\t\n\t    return FlickityController;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFlickityNextDirective.$inject = [\"$log\", \"$timeout\", \"$rootScope\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityNextDirective = FlickityNextDirective;\n\t\n\tvar _next = __webpack_require__(6);\n\t\n\tfunction FlickityNextDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    preLinkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickityNext: '=?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        compile: function compile() {\n\t            return {\n\t                pre: preLinkFunction\n\t            };\n\t        },\n\t        controller: _next.NextController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Pre Link\n\t     */\n\t    function preLinkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // Get the ID\n\t\n\t        var ID = $controller.flickityId;\n\t\n\t        // Define the broadcast names to listen for\n\t        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n\t        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\t\n\t        // Listen\n\t        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n\t            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n\t        });\n\t        var settle = $rootScope.$on(settleEvent, function (event, data) {\n\t            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n\t        });\n\t\n\t        $element.on('click', function () {\n\t\n\t            // Move to the next cell\n\t            FlickityService.next($controller.flickityId, $controller.wrapAround);\n\t        });\n\t\n\t        /**\n\t         * Disable button if needed\n\t         *\n\t         * @param {Int} index\n\t         */\n\t        function _disableButtonIfNeeded(index, cellCount) {\n\t\n\t            // Disable button if at the beginning and we shouldn't wrap\n\t            if (!$controller.wrapAround && index === cellCount) {\n\t                $attrs.$set('disabled', 'disabled');\n\t            } else {\n\t                $attrs.$set('disabled', false);\n\t            }\n\t        }\n\t    }\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NextController = exports.NextController = function () {\n\t    NextController.$inject = [\"$log\", \"$q\", \"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\t    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, NextController);\n\t\n\t        this.$log = $log;\n\t        this.$q = $q;\n\t        this.$timeout = $timeout;\n\t        this.FlickityConfig = FlickityConfig;\n\t        this.FlickityService = FlickityService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(NextController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            // Assign or fall back to default\n\t            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n\t            this.flickityId = null;\n\t\n\t            // Make sure we have an ID\n\t            this._setId();\n\t        }\n\t\n\t        /**\n\t         * Set ID to what is defined, fallback to first instance\n\t         *\n\t         * @return {String} flickityId\n\t         */\n\t\n\t    }, {\n\t        key: '_setId',\n\t        value: function _setId() {\n\t            var _this = this;\n\t\n\t            return this.$q(function (resolve, reject) {\n\t\n\t                if (_this.bcFlickityId) {\n\t                    _this.flickityId = _this.bcFlickityId;\n\t                    resolve(_this.flickityId);\n\t                } else {\n\t                    _this.$timeout(function () {\n\t                        _this.FlickityService.getFirst().then(function (instance) {\n\t                            _this.flickityId = instance.id;\n\t                            resolve(_this.flickityId);\n\t                        }).catch(function (error) {\n\t                            _this.$log.warn(error);\n\t                            reject(error);\n\t                        });\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return NextController;\n\t}();\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFlickityPreviousDirective.$inject = [\"$log\", \"$timeout\", \"$rootScope\", \"FlickityConfig\", \"FlickityService\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.FlickityPreviousDirective = FlickityPreviousDirective;\n\t\n\tvar _previous = __webpack_require__(8);\n\t\n\tfunction FlickityPreviousDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n\t    'ngInject';\n\t\n\t    preLinkFunction.$inject = [\"$scope\", \"$element\", \"$attrs\", \"$controller\"];\n\t    var directive = {\n\t        restrict: 'A',\n\t        scope: {},\n\t        bindToController: {\n\t            bcFlickityPrevious: '=?',\n\t            bcFlickityId: '@?'\n\t        },\n\t        compile: function compile() {\n\t            return {\n\t                pre: preLinkFunction\n\t            };\n\t        },\n\t        controller: _previous.PreviousController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Pre Link\n\t     */\n\t    function preLinkFunction($scope, $element, $attrs, $controller) {\n\t        'ngInject';\n\t\n\t        // Get the ID\n\t\n\t        var ID = $controller.flickityId;\n\t\n\t        // Define the broadcast names to listen for\n\t        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n\t        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\t\n\t        // Listen\n\t        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n\t            _disableButtonIfNeeded(data.instance.selectedIndex);\n\t        });\n\t        var settle = $rootScope.$on(settleEvent, function (event, data) {\n\t            _disableButtonIfNeeded(data.instance.selectedIndex);\n\t        });\n\t\n\t        $element.on('click', function () {\n\t\n\t            // Move to the next cell\n\t            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n\t        });\n\t\n\t        /**\n\t         * Disable button if needed\n\t         *\n\t         * @param {Int} index\n\t         */\n\t        function _disableButtonIfNeeded(index) {\n\t            // Disable button if at the beginning and we shouldn't wrap\n\t            if (!$controller.wrapAround && index === 0) {\n\t                $attrs.$set('disabled', 'disabled');\n\t            } else {\n\t                $attrs.$set('disabled', false);\n\t            }\n\t        }\n\t    }\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar PreviousController = exports.PreviousController = function () {\n\t    PreviousController.$inject = [\"$log\", \"$q\", \"$timeout\", \"FlickityConfig\", \"FlickityService\"];\n\t    function PreviousController($log, $q, $timeout, FlickityConfig, FlickityService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, PreviousController);\n\t\n\t        this.$log = $log;\n\t        this.$q = $q;\n\t        this.$timeout = $timeout;\n\t        this.FlickityConfig = FlickityConfig;\n\t        this.FlickityService = FlickityService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(PreviousController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            // Assign or fall back to default\n\t            this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n\t            this.flickityId = null;\n\t\n\t            // Make sure we have an ID\n\t            this._setId();\n\t        }\n\t\n\t        /**\n\t         * Set ID to what is defined, fallback to first instance\n\t         *\n\t         * @return {String} flickityId\n\t         */\n\t\n\t    }, {\n\t        key: '_setId',\n\t        value: function _setId() {\n\t            var _this = this;\n\t\n\t            return this.$q(function (resolve, reject) {\n\t\n\t                if (_this.bcFlickityId) {\n\t                    _this.flickityId = _this.bcFlickityId;\n\t                    resolve(_this.flickityId);\n\t                } else {\n\t                    _this.$timeout(function () {\n\t                        _this.FlickityService.getFirst().then(function (instance) {\n\t                            _this.flickityId = instance.id;\n\t                            resolve(_this.flickityId);\n\t                        }).catch(function (error) {\n\t                            _this.$log.warn(error);\n\t                            reject(error);\n\t                        });\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return PreviousController;\n\t}();\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-flickity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e99098ef5a1190d2cdc5\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.service');\n\nvar _flickity3 = require('./flickity.directive');\n\nvar _flickityNext = require('./next/flickityNext.directive');\n\nvar _flickityPrevious = require('./previous/flickityPrevious.directive');\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityService } from './flickity.service';\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityNextDirective } from './next/flickityNext.directive';\nimport { FlickityPreviousDirective } from './previous/flickityPrevious.directive';\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickity', FlickityDirective)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\n\nvar FlickityService = exports.FlickityService = function () {\n    function FlickityService($timeout, $q, $rootScope) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var _this = this;\n\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n\n            // Check to see if the ID is already in use\n            if (this._findObjectById(this.instances, id)) {\n                var index = this._getFlickityIndex(id);\n                console.error('This ID is already in use: ', this.instances[index]);\n\n                return false;\n            }\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return this.$q(function (resolve) {\n\n                // Bind to all events\n                _this._bindEvents(id).then(function () {\n                    resolve(instance);\n                });\n            });\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this2 = this;\n\n            var pauseBeforeDestruction = 2000;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                }\n\n                // Pause to allow other scope cleanup to occur\n                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n                // directive can leave view\n                _this2.$timeout(function () {\n\n                    // Destroy the Flickity instance\n                    _this2.instances[flickityIndex].instance.destroy();\n\n                    // Remove the instance from the array\n                    _this2.instances.splice(flickityIndex, 1);\n\n                    resolve('Instance ' + id + ' destroyed.');\n                }, pauseBeforeDestruction);\n            });\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped) {\n            var _this3 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the next slide\n                    _this3.instances[flickityIndex].instance.next(isWrapped);\n\n                    resolve(_this3.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped) {\n            var _this4 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the previous slide\n                    _this4.instances[flickityIndex].instance.previous(isWrapped);\n\n                    resolve(_this4.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Integer} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var _this5 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this5.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                    resolve(_this5.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Integer} selectedIndex\n         */\n\n    }, {\n        key: 'selectedIndex',\n        value: function selectedIndex(id) {\n            var _this6 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Return the current index\n                    resolve(_this6.instances[flickityIndex].instance.selectedIndex);\n                }\n            });\n        }\n\n        /**\n         * Resize the gallery and re-position cells.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize(id) {\n            var _this7 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this7.instances[flickityIndex].instance.resize();\n\n                    resolve(_this7.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Position cells at selected position.\n         * Trigger reposition after the size of a cell has been changed.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reposition',\n        value: function reposition(id) {\n            var _this8 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this8.instances[flickityIndex].instance.reposition();\n\n                    resolve(_this8.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Re-collect all cell elements in `flickity-slider`.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reloadCells',\n        value: function reloadCells(id) {\n            var _this9 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Reload cells\n                    _this9.instances[flickityIndex].instance.reloadCells();\n\n                    resolve(_this9.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'get',\n        value: function get(id) {\n            var _this10 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this10.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the first Flickity instance\n         *\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getFirst',\n        value: function getFirst() {\n            var _this11 = this;\n\n            return this.$q(function (resolve, reject) {\n                if (!_this11.instances || _this11.instances.length < 1) {\n                    reject('No instances exist');\n                } else {\n                    resolve(_this11.instances[0]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {Element} element\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getByElement',\n        value: function getByElement(element) {\n            return this.$q(function (resolve, reject) {\n                var instance = Flickity.data(element);\n\n                if (instance) {\n                    resolve(instance);\n                } else {\n                    reject('Instance not found for ' + element);\n                }\n            });\n        }\n\n        /**\n         * Prepend elements and create cells to the beginning of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'prepend',\n        value: function prepend(id, elements) {\n            var _this12 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Prepend the slides\n                    _this12.instances[flickityIndex].instance.prepend(elements);\n\n                    resolve(_this12.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Append elements and create cells to the end of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'append',\n        value: function append(id, elements) {\n            var _this13 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Append the slides\n                    _this13.instances[flickityIndex].instance.append(elements);\n\n                    resolve(_this13.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Insert elements into the gallery and create cells at the desired index.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @param {Integer} index - Zero based index\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(id, elements, index) {\n            var _this14 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Insert the slides\n                    _this14.instances[flickityIndex].instance.insert(elements, index);\n\n                    resolve(_this14.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Array} cellElements\n         */\n\n    }, {\n        key: 'getCellElements',\n        value: function getCellElements(id) {\n            var _this15 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this15.instances[flickityIndex].instance.getCellElements());\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(id, elements) {\n            var _this16 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    _this16.instances[flickityIndex].instance.remove(elements);\n\n                    resolve(_this16.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the currently selected cell element\n         *\n         * @param {String} id\n         * @return {Element} selectedCellElement\n         */\n\n    }, {\n        key: 'selectedElement',\n        value: function selectedElement(id) {\n            var _this17 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this17.instances[flickityIndex].instance.selectedElement);\n                }\n            });\n        }\n\n        /**\n         * Get an array of all cells\n         *\n         * @param {String} id\n         * @return {Array} cells\n         */\n\n    }, {\n        key: 'cells',\n        value: function cells(id) {\n            var _this18 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this18.instances[flickityIndex].instance.cells);\n                }\n            });\n        }\n\n        //\n        // Helper methods\n        //\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Integer} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var foundIndex = void 0;\n\n            // If no instances exist\n            if (!this.instances.length) {\n\n                foundIndex = -1;\n            } else {\n                // if instances do exist\n\n                // Check the ID of each instance\n                this.instances.forEach(function (instance, index) {\n\n                    // If it matches our ID, set the index\n                    if (instance.id === id) {\n                        foundIndex = index;\n                    }\n                });\n            }\n\n            return foundIndex;\n        }\n    }, {\n        key: '_bindEvents',\n        value: function _bindEvents(id) {\n            var _this19 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            return this.$q(function (resolve) {\n                var ID = _this19.instances[flickityIndex].id;\n\n                _this19.instances[flickityIndex].instance.on('cellSelect', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':cellSelect', _this19.instances[flickityIndex]);\n                });\n\n                _this19.instances[flickityIndex].instance.on('settle', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':settle', _this19.instances[flickityIndex]);\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragStart', function (event, pointer) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragStart', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragMove', function (event, pointer, moveVector) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragMove', {\n                        event: event,\n                        pointer: pointer,\n                        moveVector: moveVector\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragEnd', function (event, pointer) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragEnd', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerDown', function (event, pointer) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerDown', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerMove', function (event, pointer, moveVector) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerMove', {\n                        event: event,\n                        pointer: pointer,\n                        moveVector: moveVector\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerUp', function (event, pointer) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerUp', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('staticClick', function (event, pointer, cellElement, cellIndex) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':staticClick', {\n                        event: event,\n                        pointer: pointer,\n                        cellElement: cellElement,\n                        cellIndex: cellIndex\n                    });\n                });\n\n                _this19.instances[flickityIndex].instance.on('lazyLoad', function (event, cellElement) {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':lazyLoad', {\n                        event: event,\n                        cellElement: cellElement\n                    });\n                });\n\n                resolve(true);\n            });\n        }\n\n        /**\n         * Find an object within an array by ID\n         *\n         * @param {Array} source\n         * @param {String} id\n         * @return {Object} match\n         */\n\n    }, {\n        key: '_findObjectById',\n        value: function _findObjectById(source, id) {\n            return source.filter(function (object) {\n                return object.id === id;\n            })[0];\n        }\n    }]);\n\n    return FlickityService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout, $q, $rootScope\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n    create(element, id = this.instances.length + 1, options) {\n\n        // Check to see if the ID is already in use\n        if (this._findObjectById(this.instances, id)) {\n            const index = this._getFlickityIndex(id);\n            console.error('This ID is already in use: ', this.instances[index]);\n\n            return false;\n        }\n\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return this.$q((resolve) => {\n\n            // Bind to all events\n            this._bindEvents(id).then(() => {\n                resolve(instance);\n            });\n\n        });\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 2000;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(() => {\n\n                // Destroy the Flickity instance\n                this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                this.instances.splice(flickityIndex, 1);\n\n                resolve('Instance ' + id + ' destroyed.');\n\n            }, pauseBeforeDestruction);\n        });\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    next(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the next slide\n                this.instances[flickityIndex].instance.next(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    previous(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the previous slide\n                this.instances[flickityIndex].instance.previous(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Integer} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Integer} selectedIndex\n     */\n    selectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Return the current index\n                resolve(this.instances[flickityIndex].instance.selectedIndex);\n            }\n        });\n    }\n\n\n    /**\n     * Resize the gallery and re-position cells.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    resize(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.resize();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Position cells at selected position.\n     * Trigger reposition after the size of a cell has been changed.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reposition(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.reposition();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Re-collect all cell elements in `flickity-slider`.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reloadCells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Reload cells\n                this.instances[flickityIndex].instance.reloadCells();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    get(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the first Flickity instance\n     *\n     * @return {Object} instance\n     */\n    getFirst() {\n        return this.$q((resolve, reject) => {\n            if (!this.instances || this.instances.length < 1) {\n                reject('No instances exist');\n            } else {\n                resolve(this.instances[0]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {Element} element\n     * @return {Object} instance\n     */\n    getByElement(element) {\n        return this.$q((resolve, reject) => {\n            const instance = Flickity.data(element)\n\n            if (instance) {\n                resolve(instance);\n            } else {\n                reject('Instance not found for ' + element);\n            }\n        });\n    }\n\n\n    /**\n     * Prepend elements and create cells to the beginning of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    prepend(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Prepend the slides\n                this.instances[flickityIndex].instance.prepend(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Append elements and create cells to the end of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    append(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Append the slides\n                this.instances[flickityIndex].instance.append(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Insert elements into the gallery and create cells at the desired index.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @param {Integer} index - Zero based index\n     * @return {Object} instance\n     */\n    insert(id, elements, index) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Insert the slides\n                this.instances[flickityIndex].instance.insert(elements, index);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Array} cellElements\n     */\n    getCellElements(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.getCellElements());\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    remove(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                this.instances[flickityIndex].instance.remove(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the currently selected cell element\n     *\n     * @param {String} id\n     * @return {Element} selectedCellElement\n     */\n    selectedElement(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.selectedElement);\n            }\n        });\n    }\n\n\n    /**\n     * Get an array of all cells\n     *\n     * @param {String} id\n     * @return {Array} cells\n     */\n    cells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.cells);\n            }\n        });\n    }\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Integer} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        let foundIndex;\n\n        // If no instances exist\n        if (!this.instances.length) {\n\n            foundIndex = -1;\n\n        } else {\n            // if instances do exist\n\n            // Check the ID of each instance\n            this.instances.forEach((instance, index) => {\n\n                // If it matches our ID, set the index\n                if (instance.id === id) {\n                    foundIndex = index;\n                }\n\n            });\n\n        }\n\n        return foundIndex;\n\n    }\n\n\n    _bindEvents(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        return this.$q((resolve) => {\n            const ID = this.instances[flickityIndex].id;\n\n            this.instances[flickityIndex].instance.on('cellSelect', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':cellSelect',\n                                      this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('settle', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':settle',\n                                      this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('dragStart', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragStart', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('dragMove', (event, pointer, moveVector) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragMove', {\n                    event: event,\n                    pointer: pointer,\n                    moveVector: moveVector,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('dragEnd', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragEnd', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerDown', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerDown', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerMove',(event, pointer,\n                                                                     moveVector) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerMove', {\n                    event: event,\n                    pointer: pointer,\n                    moveVector: moveVector,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerUp', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerUp', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('staticClick', (event, pointer, cellElement,\n                                                                      cellIndex) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':staticClick', {\n                    event: event,\n                    pointer: pointer,\n                    cellElement: cellElement,\n                    cellIndex: cellIndex,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('lazyLoad', (event, cellElement) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':lazyLoad', {\n                    event: event,\n                    cellElement: cellElement,\n                });\n            });\n\n            resolve(true);\n        });\n\n    }\n\n\n    /**\n     * Find an object within an array by ID\n     *\n     * @param {Array} source\n     * @param {String} id\n     * @return {Object} match\n     */\n    _findObjectById(source, id) {\n        return source.filter((object) => {\n            return object.id === id;\n        })[0];\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n\nvar _flickity = require('./flickity.controller');\n\nfunction FlickityDirective($timeout, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction\n            };\n        },\n        controller: _flickity.FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure the DOM has initialized\n\n        angular.element(document).ready(function () {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options).then(function (flickityInstance) {\n\n                // Expose the Flickity instance and ID\n                $controller.Flickity = flickityInstance.instance;\n                $controller.bcFlickityId = flickityInstance.id;\n            });\n        });\n\n        // When the directive is being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n    }\n} /* global Flickity */\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\nimport { FlickityController } from './flickity.controller';\n\nexport function FlickityDirective(\n    $timeout,\n    FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction,\n            };\n        },\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure the DOM has initialized\n        angular.element(document).ready(() => {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options)\n                .then((flickityInstance) => {\n\n                    // Expose the Flickity instance and ID\n                    $controller.Flickity = flickityInstance.instance;\n                    $controller.bcFlickityId = flickityInstance.id;\n\n                });\n        });\n\n        // When the directive is being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n\n    }\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityController = exports.FlickityController = function () {\n    function FlickityController(FlickityConfig) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityController);\n\n        this.FlickityConfig = FlickityConfig;\n\n        this._activate();\n    }\n\n    _createClass(FlickityController, [{\n        key: '_activate',\n        value: function _activate() {\n\n            // Extend the default options with user configuration\n            this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n        }\n    }]);\n\n    return FlickityController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.controller.js\n **/","export class FlickityController {\n\n    constructor(\n        FlickityConfig\n    ) {\n        'ngInject';\n\n        this.FlickityConfig = FlickityConfig;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\n\nvar _next = require('./next.controller');\n\nfunction FlickityNextDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _next.NextController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/flickityNext.directive.js\n **/","import { NextController } from './next.controller';\n\nexport function FlickityNextDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: NextController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/flickityNext.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NextController = exports.NextController = function () {\n    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, NextController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(NextController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return NextController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/next.controller.js\n **/","export class NextController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/next.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\n\nvar _previous = require('./previous.controller');\n\nfunction FlickityPreviousDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _previous.PreviousController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/flickityPrevious.directive.js\n **/","import { PreviousController } from './previous.controller';\n\nexport function FlickityPreviousDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: PreviousController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/flickityPrevious.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PreviousController = exports.PreviousController = function () {\n    function PreviousController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, PreviousController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(PreviousController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return PreviousController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/previous.controller.js\n **/","export class PreviousController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/previous.controller.js\n **/"],"sourceRoot":""}