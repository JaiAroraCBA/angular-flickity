{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9ad2d47ba5beac83defe","webpack:///./src/index.js","webpack:///./src/index.js?1f39","webpack:///./src/flickity.provider.js","webpack:///./src/flickity.provider.js?01f5","webpack:///./src/flickity.service.js","webpack:///./src/flickity.service.js?ada5","webpack:///./src/flickity.directive.js","webpack:///./src/flickity.directive.js?f624","webpack:///./src/flickity.controller.js","webpack:///./src/flickity.controller.js?ad88","webpack:///./src/next/flickityNext.directive.js","webpack:///./src/next/flickityNext.directive.js?8e3d","webpack:///./src/next/next.controller.js","webpack:///./src/next/next.controller.js?019e","webpack:///./src/previous/flickityPrevious.directive.js","webpack:///./src/previous/flickityPrevious.directive.js?8761","webpack:///./src/previous/previous.controller.js","webpack:///./src/previous/previous.controller.js?b8f9"],"names":["console","log","Flickity","window","angular","module","provider","service","directive","FlickityConfigProvider","accessibility","adaptiveHeight","autoPlay","cellAlign","cellSelector","undefined","contain","draggable","dragThreshold","freeScroll","freeScrollFriction","selectedAttraction","friction","groupCells","initialIndex","lazyLoad","percentPosition","prevNextButtons","pageDots","resize","rightToLeft","setGallerySize","watchCSS","wrapAround","imagesLoaded","asNavFor","$timeout","$q","$rootScope","$log","instances","element","id","length","options","_findObjectById","index","_getFlickityIndex","error","instance","push","resolve","_bindEvents","then","pauseBeforeDestruction","flickityIndex","reject","destroy","splice","isWrapped","isInstant","next","previous","select","value","selectCell","selectedIndex","reposition","reloadCells","data","elements","prepend","append","insert","getCellElements","remove","selectedElement","cells","foundIndex","forEach","ID","on","$emit","progress","positionX","event","pointer","moveVector","cellElement","cellIndex","source","filter","object","FlickityDirective","FlickityService","restrict","scope","bindToController","bcFlickity","bcFlickityId","compile","pre","preLinkFunction","post","postLinkFunction","controller","controllerAs","$scope","$element","$attrs","$controller","create","flickityInstance","onDestroy","$on","FlickityConfig","_activate","extend","fromJson","FlickityNextDirective","bcFlickityNext","flickityId","selectEvent","settleEvent","cellSelect","_disableButtonIfNeeded","settle","cellCount","$set","_setId","getFirst","catch","warn","FlickityPreviousDirective","bcFlickityPrevious"],"mappings":"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","file":"angular-flickity.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9ad2d47ba5beac83defe\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.service');\n\nvar _flickity3 = require('./flickity.directive');\n\nvar _flickityNext = require('./next/flickityNext.directive');\n\nvar _flickityPrevious = require('./previous/flickityPrevious.directive');\n\nconsole.log('Flickity in DIRECTIVE: ', Flickity, window.Flickity); /* global Flickity */\n\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/* global Flickity */\nimport { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityService } from './flickity.service';\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityNextDirective } from './next/flickityNext.directive';\nimport { FlickityPreviousDirective } from './previous/flickityPrevious.directive';\nconsole.log('Flickity in DIRECTIVE: ', Flickity, window.Flickity);\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickity', FlickityDirective)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.adaptiveHeight = false;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.dragThreshold = 3;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.groupCells = false;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.adaptiveHeight     = false;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.dragThreshold      = 3;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.groupCells         = false;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\nvar FlickityService = exports.FlickityService = function () {\n    function FlickityService($timeout, $q, $rootScope, $log) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var _this = this;\n\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n\n            // Check to see if the ID is already in use\n            if (this._findObjectById(this.instances, id)) {\n                var index = this._getFlickityIndex(id);\n                this.$log.error('This ID is already in use: ', this.instances[index]);\n\n                return false;\n            }\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return this.$q(function (resolve) {\n\n                // Bind to all events\n                _this._bindEvents(id).then(function () {\n                    resolve(instance);\n                });\n            });\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this2 = this;\n\n            var pauseBeforeDestruction = 100;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                }\n\n                // Pause to allow other scope cleanup to occur\n                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n                // directive can leave view\n                _this2.$timeout(function () {\n\n                    // Destroy the Flickity instance\n                    _this2.instances[flickityIndex].instance.destroy();\n\n                    // Remove the instance from the array\n                    _this2.instances.splice(flickityIndex, 1);\n\n                    resolve('Instance ' + id + ' destroyed.');\n                }, pauseBeforeDestruction);\n            });\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped, isInstant) {\n            var _this3 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the next slide\n                    _this3.instances[flickityIndex].instance.next(isWrapped, isInstant);\n\n                    resolve(_this3.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped, isInstant) {\n            var _this4 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the previous slide\n                    _this4.instances[flickityIndex].instance.previous(isWrapped, isInstant);\n\n                    resolve(_this4.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Integer} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var _this5 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this5.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                    resolve(_this5.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide of a cell\n         *\n         * @param {String} id\n         * @param {Integer|String} value\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'selectCell',\n        value: function selectCell(id, value) {\n            var _this6 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this6.instances[flickityIndex].instance.selectCell(value, isWrapped, isInstant);\n\n                    resolve(_this6.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Integer} selectedIndex\n         */\n\n    }, {\n        key: 'selectedIndex',\n        value: function selectedIndex(id) {\n            var _this7 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Return the current index\n                    resolve(_this7.instances[flickityIndex].instance.selectedIndex);\n                }\n            });\n        }\n\n        /**\n         * Resize the gallery and re-position cells.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize(id) {\n            var _this8 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this8.instances[flickityIndex].instance.resize();\n\n                    resolve(_this8.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Position cells at selected position.\n         * Trigger reposition after the size of a cell has been changed.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reposition',\n        value: function reposition(id) {\n            var _this9 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this9.instances[flickityIndex].instance.reposition();\n\n                    resolve(_this9.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Re-collect all cell elements in `flickity-slider`.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reloadCells',\n        value: function reloadCells(id) {\n            var _this10 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Reload cells\n                    _this10.instances[flickityIndex].instance.reloadCells();\n\n                    resolve(_this10.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'get',\n        value: function get(id) {\n            var _this11 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this11.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the first Flickity instance\n         *\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getFirst',\n        value: function getFirst() {\n            var _this12 = this;\n\n            return this.$q(function (resolve, reject) {\n                if (!_this12.instances || _this12.instances.length < 1) {\n                    reject('No instances exist');\n                } else {\n                    resolve(_this12.instances[0]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {Element} element\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getByElement',\n        value: function getByElement(element) {\n            return this.$q(function (resolve, reject) {\n                var instance = Flickity.data(element);\n\n                if (instance) {\n                    resolve(instance);\n                } else {\n                    reject('Instance not found for ' + element);\n                }\n            });\n        }\n\n        /**\n         * Prepend elements and create cells to the beginning of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'prepend',\n        value: function prepend(id, elements) {\n            var _this13 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Prepend the slides\n                    _this13.instances[flickityIndex].instance.prepend(elements);\n\n                    resolve(_this13.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Append elements and create cells to the end of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'append',\n        value: function append(id, elements) {\n            var _this14 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Append the slides\n                    _this14.instances[flickityIndex].instance.append(elements);\n\n                    resolve(_this14.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Insert elements into the gallery and create cells at the desired index.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @param {Integer} index - Zero based index\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(id, elements, index) {\n            var _this15 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Insert the slides\n                    _this15.instances[flickityIndex].instance.insert(elements, index);\n\n                    resolve(_this15.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Array} cellElements\n         */\n\n    }, {\n        key: 'getCellElements',\n        value: function getCellElements(id) {\n            var _this16 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this16.instances[flickityIndex].instance.getCellElements());\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(id, elements) {\n            var _this17 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    _this17.instances[flickityIndex].instance.remove(elements);\n\n                    resolve(_this17.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the currently selected cell element\n         *\n         * @param {String} id\n         * @return {Element} selectedCellElement\n         */\n\n    }, {\n        key: 'selectedElement',\n        value: function selectedElement(id) {\n            var _this18 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this18.instances[flickityIndex].instance.selectedElement);\n                }\n            });\n        }\n\n        /**\n         * Get an array of all cells\n         *\n         * @param {String} id\n         * @return {Array} cells\n         */\n\n    }, {\n        key: 'cells',\n        value: function cells(id) {\n            var _this19 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this19.instances[flickityIndex].instance.cells);\n                }\n            });\n        }\n\n        //\n        // Helper methods\n        //\n\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Integer} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var foundIndex = void 0;\n\n            // If no instances exist\n            if (!this.instances.length) {\n\n                foundIndex = -1;\n            } else {\n                // if instances do exist\n\n                // Check the ID of each instance\n                this.instances.forEach(function (instance, index) {\n\n                    // If it matches our ID, set the index\n                    if (instance.id === id) {\n                        foundIndex = index;\n                    }\n                });\n            }\n\n            return foundIndex;\n        }\n    }, {\n        key: '_bindEvents',\n        value: function _bindEvents(id) {\n            var _this20 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            return this.$q(function (resolve) {\n                var ID = _this20.instances[flickityIndex].id;\n\n                _this20.instances[flickityIndex].instance.on('select', function () {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':select', _this20.instances[flickityIndex]);\n                });\n\n                _this20.instances[flickityIndex].instance.on('settle', function () {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':settle', _this20.instances[flickityIndex]);\n                });\n\n                _this20.instances[flickityIndex].instance.on('scroll', function (progress, positionX) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':scroll', {\n                        progress: progress,\n                        positionX: positionX\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('dragStart', function (event, pointer) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':dragStart', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('dragMove', function (event, pointer, moveVector) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':dragMove', {\n                        event: event,\n                        pointer: pointer,\n                        moveVector: moveVector\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('dragEnd', function (event, pointer) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':dragEnd', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('pointerDown', function (event, pointer) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':pointerDown', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('pointerMove', function (event, pointer, moveVector) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':pointerMove', {\n                        event: event,\n                        pointer: pointer,\n                        moveVector: moveVector\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('pointerUp', function (event, pointer) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':pointerUp', {\n                        event: event,\n                        pointer: pointer\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('staticClick', function (event, pointer, cellElement, cellIndex) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':staticClick', {\n                        event: event,\n                        pointer: pointer,\n                        cellElement: cellElement,\n                        cellIndex: cellIndex\n                    });\n                });\n\n                _this20.instances[flickityIndex].instance.on('lazyLoad', function (event, cellElement) {\n                    _this20.$rootScope.$emit('Flickity:' + ID + ':lazyLoad', {\n                        event: event,\n                        cellElement: cellElement\n                    });\n                });\n\n                resolve(true);\n            });\n        }\n\n        /**\n         * Find an object within an array by ID\n         *\n         * @param {Array} source\n         * @param {String} id\n         * @return {Object} match\n         */\n\n    }, {\n        key: '_findObjectById',\n        value: function _findObjectById(source, id) {\n            return source.filter(function (object) {\n                return object.id === id;\n            })[0];\n        }\n    }]);\n\n    return FlickityService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout, $q, $rootScope, $log\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n    create(element, id = this.instances.length + 1, options) {\n\n        // Check to see if the ID is already in use\n        if (this._findObjectById(this.instances, id)) {\n            const index = this._getFlickityIndex(id);\n            this.$log.error('This ID is already in use: ', this.instances[index]);\n\n            return false;\n        }\n\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return this.$q((resolve) => {\n\n            // Bind to all events\n            this._bindEvents(id).then(() => {\n                resolve(instance);\n            });\n\n        });\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 100;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(() => {\n\n                // Destroy the Flickity instance\n                this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                this.instances.splice(flickityIndex, 1);\n\n                resolve('Instance ' + id + ' destroyed.');\n\n            }, pauseBeforeDestruction);\n        });\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    next(id, isWrapped, isInstant) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the next slide\n                this.instances[flickityIndex].instance.next(isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    previous(id, isWrapped, isInstant) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the previous slide\n                this.instances[flickityIndex].instance.previous(isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Integer} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Select a slide of a cell\n     *\n     * @param {String} id\n     * @param {Integer|String} value\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    selectCell(id, value, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.selectCell(value, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Integer} selectedIndex\n     */\n    selectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Return the current index\n                resolve(this.instances[flickityIndex].instance.selectedIndex);\n            }\n        });\n    }\n\n\n    /**\n     * Resize the gallery and re-position cells.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    resize(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.resize();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Position cells at selected position.\n     * Trigger reposition after the size of a cell has been changed.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reposition(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.reposition();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Re-collect all cell elements in `flickity-slider`.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reloadCells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Reload cells\n                this.instances[flickityIndex].instance.reloadCells();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    get(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the first Flickity instance\n     *\n     * @return {Object} instance\n     */\n    getFirst() {\n        return this.$q((resolve, reject) => {\n            if (!this.instances || this.instances.length < 1) {\n                reject('No instances exist');\n            } else {\n                resolve(this.instances[0]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {Element} element\n     * @return {Object} instance\n     */\n    getByElement(element) {\n        return this.$q((resolve, reject) => {\n            const instance = Flickity.data(element)\n\n            if (instance) {\n                resolve(instance);\n            } else {\n                reject('Instance not found for ' + element);\n            }\n        });\n    }\n\n\n    /**\n     * Prepend elements and create cells to the beginning of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    prepend(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Prepend the slides\n                this.instances[flickityIndex].instance.prepend(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Append elements and create cells to the end of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    append(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Append the slides\n                this.instances[flickityIndex].instance.append(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Insert elements into the gallery and create cells at the desired index.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @param {Integer} index - Zero based index\n     * @return {Object} instance\n     */\n    insert(id, elements, index) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Insert the slides\n                this.instances[flickityIndex].instance.insert(elements, index);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Array} cellElements\n     */\n    getCellElements(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.getCellElements());\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    remove(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                this.instances[flickityIndex].instance.remove(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the currently selected cell element\n     *\n     * @param {String} id\n     * @return {Element} selectedCellElement\n     */\n    selectedElement(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.selectedElement);\n            }\n        });\n    }\n\n\n    /**\n     * Get an array of all cells\n     *\n     * @param {String} id\n     * @return {Array} cells\n     */\n    cells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.cells);\n            }\n        });\n    }\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Integer} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        let foundIndex;\n\n        // If no instances exist\n        if (!this.instances.length) {\n\n            foundIndex = -1;\n\n        } else {\n            // if instances do exist\n\n            // Check the ID of each instance\n            this.instances.forEach((instance, index) => {\n\n                // If it matches our ID, set the index\n                if (instance.id === id) {\n                    foundIndex = index;\n                }\n\n            });\n\n        }\n\n        return foundIndex;\n\n    }\n\n\n    _bindEvents(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        return this.$q((resolve) => {\n            const ID = this.instances[flickityIndex].id;\n\n            this.instances[flickityIndex].instance.on('select', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':select', this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('settle', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':settle',\n                                      this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('scroll', (progress, positionX) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':scroll', {\n                    progress: progress,\n                    positionX: positionX,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('dragStart', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragStart', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('dragMove', (event, pointer, moveVector) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragMove', {\n                    event: event,\n                    pointer: pointer,\n                    moveVector: moveVector,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('dragEnd', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragEnd', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerDown', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerDown', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerMove',(event, pointer,\n                                                                     moveVector) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerMove', {\n                    event: event,\n                    pointer: pointer,\n                    moveVector: moveVector,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('pointerUp', (event, pointer) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerUp', {\n                    event: event,\n                    pointer: pointer,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('staticClick', (event, pointer, cellElement,\n                                                                      cellIndex) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':staticClick', {\n                    event: event,\n                    pointer: pointer,\n                    cellElement: cellElement,\n                    cellIndex: cellIndex,\n                });\n            });\n\n            this.instances[flickityIndex].instance.on('lazyLoad', (event, cellElement) => {\n                this.$rootScope.$emit('Flickity:' + ID + ':lazyLoad', {\n                    event: event,\n                    cellElement: cellElement,\n                });\n            });\n\n            resolve(true);\n        });\n\n    }\n\n\n    /**\n     * Find an object within an array by ID\n     *\n     * @param {Array} source\n     * @param {String} id\n     * @return {Object} match\n     */\n    _findObjectById(source, id) {\n        return source.filter((object) => {\n            return object.id === id;\n        })[0];\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n\nvar _flickity = require('./flickity.controller');\n\nfunction FlickityDirective($timeout, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction\n            };\n        },\n        controller: _flickity.FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure this `create()` gets picked up in the next digest cycle\n\n        $timeout(function () {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options).then(function (flickityInstance) {\n\n                // Expose the Flickity instance and ID\n                $controller.Flickity = flickityInstance.instance;\n                $controller.bcFlickityId = flickityInstance.id;\n            });\n        });\n\n        // When the directive is being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n    }\n} /* global Flickity */\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\nimport { FlickityController } from './flickity.controller';\n\nexport function FlickityDirective(\n    $timeout,\n    FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction,\n            };\n        },\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure this `create()` gets picked up in the next digest cycle\n        $timeout(() => {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options)\n                .then((flickityInstance) => {\n\n                    // Expose the Flickity instance and ID\n                    $controller.Flickity = flickityInstance.instance;\n                    $controller.bcFlickityId = flickityInstance.id;\n\n                })\n            ;\n\n        });\n\n        // When the directive is being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n\n    }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityController = exports.FlickityController = function () {\n    function FlickityController(FlickityConfig) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityController);\n\n        this.FlickityConfig = FlickityConfig;\n\n        this._activate();\n    }\n\n    _createClass(FlickityController, [{\n        key: '_activate',\n        value: function _activate() {\n\n            // Extend the default options with user configuration\n            this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n        }\n    }]);\n\n    return FlickityController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.controller.js\n **/","export class FlickityController {\n\n    constructor(\n        FlickityConfig\n    ) {\n        'ngInject';\n\n        this.FlickityConfig = FlickityConfig;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\n\nvar _next = require('./next.controller');\n\nfunction FlickityNextDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _next.NextController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/flickityNext.directive.js\n **/","import { NextController } from './next.controller';\n\nexport function FlickityNextDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: NextController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/flickityNext.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NextController = exports.NextController = function () {\n    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, NextController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(NextController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return NextController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/next.controller.js\n **/","export class NextController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/next.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\n\nvar _previous = require('./previous.controller');\n\nfunction FlickityPreviousDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _previous.PreviousController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/flickityPrevious.directive.js\n **/","import { PreviousController } from './previous.controller';\n\nexport function FlickityPreviousDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: PreviousController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/flickityPrevious.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PreviousController = exports.PreviousController = function () {\n    function PreviousController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, PreviousController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(PreviousController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return PreviousController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/previous.controller.js\n **/","export class PreviousController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/previous.controller.js\n **/"],"sourceRoot":""}