{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1593092a0f8c6a064fde","webpack:///./src/index.js","webpack:///./src/index.js?1f39","webpack:///./src/flickity.provider.js","webpack:///./src/flickity.provider.js?01f5","webpack:///./src/flickity.service.js","webpack:///./src/flickity.service.js?ada5","webpack:///./src/flickity.directive.js","webpack:///./src/flickity.directive.js?f624","webpack:///./src/next/flickityNext.directive.js","webpack:///./src/next/flickityNext.directive.js?8e3d","webpack:///./src/next/next.controller.js","webpack:///./src/next/next.controller.js?019e","webpack:///./src/previous/flickityPrevious.directive.js","webpack:///./src/previous/flickityPrevious.directive.js?8761"],"names":[],"mappings":"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","file":"angular-flickity.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1593092a0f8c6a064fde\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.service');\n\nvar _flickity3 = require('./flickity.directive');\n\nvar _flickityNext = require('./next/flickityNext.directive');\n\nvar _flickityPrevious = require('./previous/flickityPrevious.directive');\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityService } from './flickity.service';\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityNextDirective } from './next/flickityNext.directive';\nimport { FlickityPreviousDirective } from './previous/flickityPrevious.directive';\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickity', FlickityDirective)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\n\nvar FlickityService = exports.FlickityService = (function () {\n    function FlickityService($timeout, $q) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return this.$q(function (resolve) {\n                resolve(instance);\n            });\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this = this;\n\n            var pauseBeforeDestruction = 2000;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                }\n\n                // Pause to allow other scope cleanup to occur\n                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n                // directive can leave view\n                _this.$timeout(function () {\n\n                    // Destroy the Flickity instance\n                    _this.instances[flickityIndex].instance.destroy();\n\n                    // Remove the instance from the array\n                    _this.instances.splice(flickityIndex, 1);\n\n                    resolve('Instance ' + id + ' destroyed.');\n                }, pauseBeforeDestruction);\n            });\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped) {\n            var _this2 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the next slide\n                    _this2.instances[flickityIndex].instance.next(isWrapped);\n\n                    resolve(_this2.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped) {\n            var _this3 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the previous slide\n                    _this3.instances[flickityIndex].instance.previous(isWrapped);\n\n                    resolve(_this3.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Integer} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var _this4 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this4.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                    resolve(_this4.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Integer} selectedIndex\n         */\n\n    }, {\n        key: 'selectedIndex',\n        value: function selectedIndex(id) {\n            var _this5 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Return the current index\n                    resolve(_this5.instances[flickityIndex].instance.selectedIndex);\n                }\n            });\n        }\n\n        /**\n         * Resize the gallery and re-position cells.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize(id) {\n            var _this6 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this6.instances[flickityIndex].instance.resize();\n\n                    resolve(_this6.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Position cells at selected position.\n         * Trigger reposition after the size of a cell has been changed.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reposition',\n        value: function reposition(id) {\n            var _this7 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this7.instances[flickityIndex].instance.reposition();\n\n                    resolve(_this7.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Re-collect all cell elements in `flickity-slider`.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reloadCells',\n        value: function reloadCells(id) {\n            var _this8 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Reload cells\n                    _this8.instances[flickityIndex].instance.reloadCells();\n\n                    resolve(_this8.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'get',\n        value: function get(id) {\n            var _this9 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this9.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the first Flickity instance\n         *\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getFirst',\n        value: function getFirst() {\n            var _this10 = this;\n\n            return this.$q(function (resolve, reject) {\n                if (!_this10.instances || _this10.instances.length < 1) {\n                    reject('No instances exist');\n                } else {\n                    resolve(_this10.instances[0]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {Element} element\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getByElement',\n        value: function getByElement(element) {\n            return this.$q(function (resolve, reject) {\n                var instance = Flickity.data(element);\n\n                if (instance) {\n                    resolve(instance);\n                } else {\n                    reject('Instance not found for ' + element);\n                }\n            });\n        }\n\n        /**\n         * Prepend elements and create cells to the beginning of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'prepend',\n        value: function prepend(id, elements) {\n            var _this11 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Prepend the slides\n                    _this11.instances[flickityIndex].instance.prepend(elements);\n\n                    resolve(_this11.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Append elements and create cells to the end of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'append',\n        value: function append(id, elements) {\n            var _this12 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Append the slides\n                    _this12.instances[flickityIndex].instance.append(elements);\n\n                    resolve(_this12.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Insert elements into the gallery and create cells at the desired index.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @param {Integer} index - Zero based index\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(id, elements, index) {\n            var _this13 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Insert the slides\n                    _this13.instances[flickityIndex].instance.insert(elements, index);\n\n                    resolve(_this13.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Array} cellElements\n         */\n\n    }, {\n        key: 'getCellElements',\n        value: function getCellElements(id) {\n            var _this14 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this14.instances[flickityIndex].instance.getCellElements());\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(id, elements) {\n            var _this15 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    _this15.instances[flickityIndex].instance.remove(elements);\n\n                    resolve(_this15.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the currently selected cell element\n         *\n         * @param {String} id\n         * @return {Element} selectedCellElement\n         */\n\n    }, {\n        key: 'selectedElement',\n        value: function selectedElement(id) {\n            var _this16 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this16.instances[flickityIndex].instance.selectedElement);\n                }\n            });\n        }\n\n        /**\n         * Get an array of all cells\n         *\n         * @param {String} id\n         * @return {Array} cells\n         */\n\n    }, {\n        key: 'cells',\n        value: function cells(id) {\n            var _this17 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this17.instances[flickityIndex].instance.cells);\n                }\n            });\n        }\n\n        //\n        // Helper methods\n        //\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Integer} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var negativeIndexForUnfound = -1;\n\n            // If no instances exist, cancel\n            if (this.instances.length < 1) {\n\n                return negativeIndexForUnfound;\n            } else {\n\n                // Find the instance by ID\n                var index = this.instances.findIndex(matchesId);\n\n                if (index === false) {\n                    return negativeIndexForUnfound;\n                } else {\n                    return index;\n                }\n            }\n\n            // Test to match an item in an array based on the id\n            function matchesId(item, index, array) {\n                if (item.id === id) {\n                    return item;\n                }\n            }\n        }\n    }]);\n\n    return FlickityService;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout, $q\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n    create(element, id = this.instances.length + 1, options) {\n\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return this.$q((resolve) => {\n            resolve(instance);\n        });\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 2000;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(() => {\n\n                // Destroy the Flickity instance\n                this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                this.instances.splice(flickityIndex, 1);\n\n                resolve('Instance ' + id + ' destroyed.');\n\n            }, pauseBeforeDestruction);\n        });\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    next(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the next slide\n                this.instances[flickityIndex].instance.next(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    previous(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the previous slide\n                this.instances[flickityIndex].instance.previous(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Integer} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Integer} selectedIndex\n     */\n    selectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Return the current index\n                resolve(this.instances[flickityIndex].instance.selectedIndex);\n            }\n        });\n    }\n\n\n    /**\n     * Resize the gallery and re-position cells.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    resize(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.resize();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Position cells at selected position.\n     * Trigger reposition after the size of a cell has been changed.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reposition(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.reposition();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Re-collect all cell elements in `flickity-slider`.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reloadCells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Reload cells\n                this.instances[flickityIndex].instance.reloadCells();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    get(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the first Flickity instance\n     *\n     * @return {Object} instance\n     */\n    getFirst() {\n        return this.$q((resolve, reject) => {\n            if (!this.instances || this.instances.length < 1) {\n                reject('No instances exist');\n            } else {\n                resolve(this.instances[0]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {Element} element\n     * @return {Object} instance\n     */\n    getByElement(element) {\n        return this.$q((resolve, reject) => {\n            const instance = Flickity.data(element)\n\n            if (instance) {\n                resolve(instance);\n            } else {\n                reject('Instance not found for ' + element);\n            }\n        });\n    }\n\n\n    /**\n     * Prepend elements and create cells to the beginning of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    prepend(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Prepend the slides\n                this.instances[flickityIndex].instance.prepend(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Append elements and create cells to the end of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    append(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Append the slides\n                this.instances[flickityIndex].instance.append(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Insert elements into the gallery and create cells at the desired index.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @param {Integer} index - Zero based index\n     * @return {Object} instance\n     */\n    insert(id, elements, index) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Insert the slides\n                this.instances[flickityIndex].instance.insert(elements, index);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Array} cellElements\n     */\n    getCellElements(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.getCellElements());\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    remove(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                this.instances[flickityIndex].instance.remove(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the currently selected cell element\n     *\n     * @param {String} id\n     * @return {Element} selectedCellElement\n     */\n    selectedElement(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.selectedElement);\n            }\n        });\n    }\n\n\n    /**\n     * Get an array of all cells\n     *\n     * @param {String} id\n     * @return {Array} cells\n     */\n    cells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.cells);\n            }\n        });\n    }\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Integer} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        const negativeIndexForUnfound = -1;\n\n        // If no instances exist, cancel\n        if (this.instances.length < 1) {\n\n            return negativeIndexForUnfound;\n\n        } else {\n\n            // Find the instance by ID\n            const index = this.instances.findIndex(matchesId);\n\n            if (index === false) {\n                return negativeIndexForUnfound;\n            } else {\n                return index;\n            }\n\n        }\n\n        // Test to match an item in an array based on the id\n        function matchesId(item, index, array) {\n            if (item.id === id) {\n                return item;\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.myCustomOptions }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nfunction FlickityDirective($timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(function () {\n            // Initialize Flickity\n            var flickityInstance = FlickityService.create($element[0], $controller.bcFlickityId, $controller.options);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.bcFlickityId = flickityInstance.id;\n        });\n\n        // Clean up when being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n    }\n\n    /**\n     * Controller\n     */\n    function FlickityController() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, FlickityConfig, angular.fromJson(this.bcFlickity));\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\n\n/**\n * Flickity.js\n * http://flickity.metafizzy.co/options.html\n *\n * Required markup\n *\n * <div bc-flickity flickity-options=\"{{ vm.myCustomOptions }}\">\n *   <div>\n *   <div>\n *   ...\n * </div>\n *\n */\nexport function FlickityDirective(\n    $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n        // Using a timeout ensures that any ng-repeats can finish running before we initialize\n        $timeout(() => {\n            // Initialize Flickity\n            const flickityInstance =\n                FlickityService.create($element[0], $controller.bcFlickityId, $controller.options);\n\n            // Expose the Flickity instance and ID\n            $controller.Flickity = flickityInstance.instance;\n            $controller.bcFlickityId = flickityInstance.id;\n        });\n\n\n        // Clean up when being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n\n    }\n\n\n    /**\n     * Controller\n     */\n    function FlickityController() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, FlickityConfig, angular.fromJson(this.bcFlickity));\n\n    }\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\n\nvar _next = require('./next.controller');\n\nfunction FlickityNextDirective($log, $timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: _next.NextController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext).then(function () {\n\n                // After we move, set the selected index\n                FlickityService.selectedIndex($controller.flickityId).then(function (index) {\n                    console.log('selectedIndex: ', index);\n                    $controller.selectedIndex = index;\n\n                    /*\n                     *$controller.setDisabledState();\n                     */\n                });\n            });\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/flickityNext.directive.js\n **/","import { NextController } from './next.controller';\n\nexport function FlickityNextDirective(\n    $log, $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: NextController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $scope.bcFlickityNext).then(() => {\n\n                // After we move, set the selected index\n                FlickityService.selectedIndex($controller.flickityId).then((index) => {\n                    console.log('selectedIndex: ', index);\n                    $controller.selectedIndex = index;\n\n\n                    /*\n                     *$controller.setDisabledState();\n                     */\n                });\n\n            });\n\n        });\n\n    }\n\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/flickityNext.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NextController = exports.NextController = (function () {\n    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, NextController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(NextController, [{\n        key: '_activate',\n        value: function _activate() {\n            var _this = this;\n\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n            this.cellCount;\n            this.selectedIndex;\n            this.bcIsDisabled = false;\n\n            // Make sure we have an ID before we wire everything up\n            this._setId().then(function () {\n\n                // Get the cells\n                _this.FlickityService.cells(_this.flickityId).then(function (cells) {\n                    console.log('cells: ', cells, cells.length);\n\n                    // Save the count\n                    _this.cellCount = cells.length;\n                });\n            });\n        }\n    }, {\n        key: 'setDisabledState',\n        value: function setDisabledState() {\n            console.log('in setDisabledStateeeeee');\n\n            // If we can wrap, we should never disable\n            if (this.wrapAround) {\n                this.bcIsDisabled = false;\n            } else {\n                // if we cannot wrap\n\n                // If we are at the end\n                if (this.cellCount - this.selectedIndex < 1) {\n                    this.bcIsDisabled = true;\n                } else {\n                    this.bcIsDisabled = false;\n                }\n            }\n\n            console.log('in setDisabledState: ', this.cellCount, this.selectedIndex, this.bcIsDisabled);\n        }\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this2 = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this2.bcFlickityId) {\n                    _this2.flickityId = _this2.bcFlickityId;\n                    resolve(_this2.flickityId);\n                } else {\n                    _this2.$timeout(function () {\n                        _this2.FlickityService.getFirst().then(function (instance) {\n                            _this2.flickityId = instance.id;\n                            resolve(_this2.flickityId);\n                        }).catch(function (error) {\n                            _this2.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return NextController;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/next.controller.js\n **/","export class NextController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n        this.cellCount;\n        this.selectedIndex;\n        this.bcIsDisabled = false;\n\n        // Make sure we have an ID before we wire everything up\n        this._setId().then(() => {\n\n            // Get the cells\n            this.FlickityService.cells(this.flickityId).then((cells) => {\n                console.log('cells: ', cells, cells.length);\n\n                // Save the count\n                this.cellCount = cells.length;\n            });\n\n        });\n\n\n    }\n\n\n    setDisabledState() {\n        console.log('in setDisabledStateeeeee');\n\n        // If we can wrap, we should never disable\n        if (this.wrapAround) {\n            this.bcIsDisabled = false;\n        } else {\n            // if we cannot wrap\n\n            // If we are at the end\n            if (this.cellCount - this.selectedIndex < 1) {\n                this.bcIsDisabled = true;\n            } else {\n                this.bcIsDisabled = false;\n            }\n        }\n\n        console.log('in setDisabledState: ', this.cellCount, this.selectedIndex, this.bcIsDisabled);\n\n    }\n\n\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/next.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\nfunction FlickityPreviousDirective($log, $timeout, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?'\n        },\n        link: linkFunction,\n        controller: FlickityPreviousController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Bind the click up to the required controller\n\n        $element.on('click', function () {\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n    }\n\n    /**\n     * Controller\n     */\n    function FlickityPreviousController() {\n        var _this = this;\n\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || FlickityConfig.wrapAround;\n\n        if (this.bcFlickityId) {\n            this.flickityId = this.bcFlickityId;\n        } else {\n            $timeout(function () {\n                FlickityService.getFirst().then(function (instance) {\n                    _this.flickityId = instance.id;\n                }).catch(function (error) {\n                    $log.warn(error);\n                });\n            });\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/flickityPrevious.directive.js\n **/","export function FlickityPreviousDirective(\n    $log, $timeout,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?',\n        },\n        link: linkFunction,\n        controller: FlickityPreviousController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Bind the click up to the required controller\n        $element.on('click', () => {\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n\n    }\n\n\n    /**\n     * Controller\n     */\n    function FlickityPreviousController() {\n\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || FlickityConfig.wrapAround;\n\n        if (this.bcFlickityId) {\n            this.flickityId = this.bcFlickityId;\n        } else {\n            $timeout(() => {\n                FlickityService.getFirst()\n                    .then((instance) => {\n                        this.flickityId = instance.id;\n                    })\n                    .catch((error) => {\n                        $log.warn(error);\n                    })\n                ;\n            });\n        }\n    }\n\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/flickityPrevious.directive.js\n **/"],"sourceRoot":""}