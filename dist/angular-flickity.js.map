{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d22c01ea2a13f311a879","webpack:///./src/index.js","webpack:///./src/index.js?1f39","webpack:///./src/flickity.provider.js","webpack:///./src/flickity.provider.js?01f5","webpack:///./src/flickity.service.js","webpack:///./src/flickity.service.js?ada5","webpack:///./src/flickity.directive.js","webpack:///./src/flickity.directive.js?f624","webpack:///./src/flickity.controller.js","webpack:///./src/flickity.controller.js?ad88","webpack:///./src/next/flickityNext.directive.js","webpack:///./src/next/flickityNext.directive.js?8e3d","webpack:///./src/next/next.controller.js","webpack:///./src/next/next.controller.js?019e","webpack:///./src/previous/flickityPrevious.directive.js","webpack:///./src/previous/flickityPrevious.directive.js?8761","webpack:///./src/previous/previous.controller.js","webpack:///./src/previous/previous.controller.js?b8f9"],"names":[],"mappings":"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","file":"angular-flickity.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-flickity\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-flickity\"] = factory();\n\telse\n\t\troot[\"angular-flickity\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d22c01ea2a13f311a879\n **/","'use strict';\n\nvar _flickity = require('./flickity.provider');\n\nvar _flickity2 = require('./flickity.service');\n\nvar _flickity3 = require('./flickity.directive');\n\nvar _flickityNext = require('./next/flickityNext.directive');\n\nvar _flickityPrevious = require('./previous/flickityPrevious.directive');\n\nangular.module('bc.Flickity', []).provider('FlickityConfig', _flickity.FlickityConfigProvider).service('FlickityService', _flickity2.FlickityService).directive('bcFlickity', _flickity3.FlickityDirective).directive('bcFlickityNext', _flickityNext.FlickityNextDirective).directive('bcFlickityPrevious', _flickityPrevious.FlickityPreviousDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { FlickityConfigProvider } from './flickity.provider'\nimport { FlickityService } from './flickity.service';\nimport { FlickityDirective } from './flickity.directive';\nimport { FlickityNextDirective } from './next/flickityNext.directive';\nimport { FlickityPreviousDirective } from './previous/flickityPrevious.directive';\n\nangular.module('bc.Flickity', [])\n    .provider('FlickityConfig', FlickityConfigProvider)\n    .service('FlickityService', FlickityService)\n    .directive('bcFlickity', FlickityDirective)\n    .directive('bcFlickityNext', FlickityNextDirective)\n    .directive('bcFlickityPrevious', FlickityPreviousDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityConfigProvider = exports.FlickityConfigProvider = (function () {\n    function FlickityConfigProvider() {\n        _classCallCheck(this, FlickityConfigProvider);\n\n        // Define Flickity defaults\n        this.accessibility = true;\n        this.autoPlay = false;\n        this.cellAlign = 'center';\n        this.cellSelector = undefined;\n        this.contain = false;\n        this.draggable = true;\n        this.freeScroll = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction = .28;\n        this.initialIndex = 0;\n        this.lazyLoad = true;\n        this.percentPosition = true;\n        this.prevNextButtons = true;\n        this.pageDots = true;\n        this.resize = true;\n        this.rightToLeft = false;\n        this.setGallerySize = true;\n        this.watchCSS = false;\n        this.wrapAround = false;\n        this.imagesLoaded = true;\n        this.asNavFor = true;\n    }\n\n    _createClass(FlickityConfigProvider, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return FlickityConfigProvider;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.provider.js\n **/","export class FlickityConfigProvider {\n\n    constructor() {\n        // Define Flickity defaults\n        this.accessibility      = true;\n        this.autoPlay           = false;\n        this.cellAlign          = 'center';\n        this.cellSelector       = undefined;\n        this.contain            = false;\n        this.draggable          = true;\n        this.freeScroll         = false;\n        this.freeScrollFriction = false;\n        this.selectedAttraction = .025;\n        this.friction           = .28;\n        this.initialIndex       = 0;\n        this.lazyLoad           = true;\n        this.percentPosition    = true;\n        this.prevNextButtons    = true;\n        this.pageDots           = true;\n        this.resize             = true;\n        this.rightToLeft        = false;\n        this.setGallerySize     = true;\n        this.watchCSS           = false;\n        this.wrapAround         = false;\n        this.imagesLoaded       = true;\n        this.asNavFor           = true;\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.provider.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global Flickity */\n\nvar FlickityService = exports.FlickityService = (function () {\n    function FlickityService($timeout, $q, $rootScope) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityService);\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.instances = [];\n    }\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n\n    _createClass(FlickityService, [{\n        key: 'create',\n        value: function create(element) {\n            var _this = this;\n\n            var id = arguments.length <= 1 || arguments[1] === undefined ? this.instances.length + 1 : arguments[1];\n            var options = arguments[2];\n\n            // Define the new instance\n            var instance = {\n                id: id,\n                instance: new Flickity(element, options)\n            };\n\n            // Save this instance to the array\n            this.instances.push(instance);\n\n            return this.$q(function (resolve) {\n\n                // Bind to all events\n                _this._bindEvents(id).then(function () {\n                    resolve(instance);\n                });\n            });\n        }\n\n        /**\n         * Destroy a Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy(id) {\n            var _this2 = this;\n\n            var pauseBeforeDestruction = 2000;\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                }\n\n                // Pause to allow other scope cleanup to occur\n                // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n                // directive can leave view\n                _this2.$timeout(function () {\n\n                    // Destroy the Flickity instance\n                    _this2.instances[flickityIndex].instance.destroy();\n\n                    // Remove the instance from the array\n                    _this2.instances.splice(flickityIndex, 1);\n\n                    resolve('Instance ' + id + ' destroyed.');\n                }, pauseBeforeDestruction);\n            });\n        }\n\n        /**\n         * Move to the next slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'next',\n        value: function next(id, isWrapped) {\n            var _this3 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the next slide\n                    _this3.instances[flickityIndex].instance.next(isWrapped);\n\n                    resolve(_this3.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Move to the previous slide\n         *\n         * @param {string} id\n         * @param {Bool} isWrapped\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'previous',\n        value: function previous(id, isWrapped) {\n            var _this4 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the previous slide\n                    _this4.instances[flickityIndex].instance.previous(isWrapped);\n\n                    resolve(_this4.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Select a slide\n         *\n         * @param {String} id\n         * @param {Integer} index\n         * @param {Bool} isWrapped\n         * @param {Bool} isInstant\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'select',\n        value: function select(id, index) {\n            var _this5 = this;\n\n            var isWrapped = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n            var isInstant = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Move to the selected slide\n                    _this5.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                    resolve(_this5.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the current slide index\n         *\n         * @param {String} id\n         * @return {Integer} selectedIndex\n         */\n\n    }, {\n        key: 'selectedIndex',\n        value: function selectedIndex(id) {\n            var _this6 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Return the current index\n                    resolve(_this6.instances[flickityIndex].instance.selectedIndex);\n                }\n            });\n        }\n\n        /**\n         * Resize the gallery and re-position cells.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'resize',\n        value: function resize(id) {\n            var _this7 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this7.instances[flickityIndex].instance.resize();\n\n                    resolve(_this7.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Position cells at selected position.\n         * Trigger reposition after the size of a cell has been changed.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reposition',\n        value: function reposition(id) {\n            var _this8 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Trigger the resize\n                    _this8.instances[flickityIndex].instance.reposition();\n\n                    resolve(_this8.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Re-collect all cell elements in `flickity-slider`.\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'reloadCells',\n        value: function reloadCells(id) {\n            var _this9 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Reload cells\n                    _this9.instances[flickityIndex].instance.reloadCells();\n\n                    resolve(_this9.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'get',\n        value: function get(id) {\n            var _this10 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this10.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the first Flickity instance\n         *\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getFirst',\n        value: function getFirst() {\n            var _this11 = this;\n\n            return this.$q(function (resolve, reject) {\n                if (!_this11.instances || _this11.instances.length < 1) {\n                    reject('No instances exist');\n                } else {\n                    resolve(_this11.instances[0]);\n                }\n            });\n        }\n\n        /**\n         * Get the Flickity instance\n         *\n         * @param {Element} element\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'getByElement',\n        value: function getByElement(element) {\n            return this.$q(function (resolve, reject) {\n                var instance = Flickity.data(element);\n\n                if (instance) {\n                    resolve(instance);\n                } else {\n                    reject('Instance not found for ' + element);\n                }\n            });\n        }\n\n        /**\n         * Prepend elements and create cells to the beginning of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'prepend',\n        value: function prepend(id, elements) {\n            var _this12 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Prepend the slides\n                    _this12.instances[flickityIndex].instance.prepend(elements);\n\n                    resolve(_this12.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Append elements and create cells to the end of the gallery.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'append',\n        value: function append(id, elements) {\n            var _this13 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Append the slides\n                    _this13.instances[flickityIndex].instance.append(elements);\n\n                    resolve(_this13.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Insert elements into the gallery and create cells at the desired index.\n         *\n         * @param {String} id\n         * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n         * @param {Integer} index - Zero based index\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'insert',\n        value: function insert(id, elements, index) {\n            var _this14 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    // Insert the slides\n                    _this14.instances[flickityIndex].instance.insert(elements, index);\n\n                    resolve(_this14.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Array} cellElements\n         */\n\n    }, {\n        key: 'getCellElements',\n        value: function getCellElements(id) {\n            var _this15 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this15.instances[flickityIndex].instance.getCellElements());\n                }\n            });\n        }\n\n        /**\n         * Get the elements of the cells\n         *\n         * @param {String} id\n         * @return {Object} instance\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove(id, elements) {\n            var _this16 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    _this16.instances[flickityIndex].instance.remove(elements);\n\n                    resolve(_this16.instances[flickityIndex]);\n                }\n            });\n        }\n\n        /**\n         * Get the currently selected cell element\n         *\n         * @param {String} id\n         * @return {Element} selectedCellElement\n         */\n\n    }, {\n        key: 'selectedElement',\n        value: function selectedElement(id) {\n            var _this17 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this17.instances[flickityIndex].instance.selectedElement);\n                }\n            });\n        }\n\n        /**\n         * Get an array of all cells\n         *\n         * @param {String} id\n         * @return {Array} cells\n         */\n\n    }, {\n        key: 'cells',\n        value: function cells(id) {\n            var _this18 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            return this.$q(function (resolve, reject) {\n                if (flickityIndex < 0) {\n                    reject('Instance ' + id + ' not found');\n                } else {\n                    resolve(_this18.instances[flickityIndex].instance.cells);\n                }\n            });\n        }\n\n        //\n        // Helper methods\n        //\n\n        /**\n         * Find the index for a Flickity instance\n         *\n         * @param {String} id\n         * @return {Integer} flickityIndex\n         */\n\n    }, {\n        key: '_getFlickityIndex',\n        value: function _getFlickityIndex(id) {\n            var negativeIndexForUnfound = -1;\n\n            // If no instances exist, cancel\n            if (this.instances.length < 1) {\n\n                return negativeIndexForUnfound;\n            } else {\n\n                // Find the instance by ID\n                var index = this.instances.findIndex(matchesId);\n\n                if (index === false) {\n                    return negativeIndexForUnfound;\n                } else {\n                    return index;\n                }\n            }\n\n            // Test to match an item in an array based on the id\n            function matchesId(item, index, array) {\n                if (item.id === id) {\n                    return item;\n                }\n            }\n        }\n    }, {\n        key: '_bindEvents',\n        value: function _bindEvents(id) {\n            var _this19 = this;\n\n            var flickityIndex = this._getFlickityIndex(id);\n\n            if (flickityIndex < 0) {\n                return false;\n            }\n\n            return this.$q(function (resolve) {\n                var ID = _this19.instances[flickityIndex].id;\n\n                _this19.instances[flickityIndex].instance.on('cellSelect', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':cellSelect', _this19.instances[flickityIndex]);\n                });\n\n                _this19.instances[flickityIndex].instance.on('settle', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':settle', _this19.instances[flickityIndex]);\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragStart', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragStart');\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragMove', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragMove');\n                });\n\n                _this19.instances[flickityIndex].instance.on('dragEnd', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':dragEnd');\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerDown', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerDown');\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerMove', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerMove');\n                });\n\n                _this19.instances[flickityIndex].instance.on('pointerUp', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':pointerUp');\n                });\n\n                _this19.instances[flickityIndex].instance.on('staticClick', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':staticClick');\n                });\n\n                _this19.instances[flickityIndex].instance.on('lazyLoad', function () {\n                    _this19.$rootScope.$emit('Flickity:' + ID + ':lazyLoad');\n                });\n\n                resolve(true);\n            });\n        }\n    }]);\n\n    return FlickityService;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.service.js\n **/","/* global Flickity */\nexport class FlickityService {\n\n    constructor(\n        $timeout, $q, $rootScope\n    ) {\n        'ngInject';\n\n        this.$timeout = $timeout;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.instances = [];\n\n    }\n\n\n\n\n    /**\n     * Create a new Flickity instance\n     * TODO: We should verify that the ID doesn't exist in case the user passes in an existing ID\n     *\n     * @param {Element} element\n     * @param {String} id\n     * @param {Object} options\n     * @return {Object} instance\n     */\n    create(element, id = this.instances.length + 1, options) {\n        // Define the new instance\n        const instance = {\n            id: id,\n            instance: new Flickity(element, options),\n        };\n\n        // Save this instance to the array\n        this.instances.push(instance);\n\n        return this.$q((resolve) => {\n\n            // Bind to all events\n            this._bindEvents(id).then(() => {\n                resolve(instance);\n            });\n\n        });\n\n    }\n\n\n    /**\n     * Destroy a Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    destroy(id) {\n        const pauseBeforeDestruction = 2000;\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            }\n\n            // Pause to allow other scope cleanup to occur\n            // NOTE: Without this pause, Flickity is being destroyed before the view containing the\n            // directive can leave view\n            this.$timeout(() => {\n\n                // Destroy the Flickity instance\n                this.instances[flickityIndex].instance.destroy();\n\n                // Remove the instance from the array\n                this.instances.splice(flickityIndex, 1);\n\n                resolve('Instance ' + id + ' destroyed.');\n\n            }, pauseBeforeDestruction);\n        });\n\n    }\n\n\n    /**\n     * Move to the next slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    next(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the next slide\n                this.instances[flickityIndex].instance.next(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Move to the previous slide\n     *\n     * @param {string} id\n     * @param {Bool} isWrapped\n     * @return {Object} instance\n     */\n    previous(id, isWrapped) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the previous slide\n                this.instances[flickityIndex].instance.previous(isWrapped);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Select a slide\n     *\n     * @param {String} id\n     * @param {Integer} index\n     * @param {Bool} isWrapped\n     * @param {Bool} isInstant\n     * @return {Object} instance\n     */\n    select(id, index, isWrapped = false, isInstant = false) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Move to the selected slide\n                this.instances[flickityIndex].instance.select(index, isWrapped, isInstant);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the current slide index\n     *\n     * @param {String} id\n     * @return {Integer} selectedIndex\n     */\n    selectedIndex(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Return the current index\n                resolve(this.instances[flickityIndex].instance.selectedIndex);\n            }\n        });\n    }\n\n\n    /**\n     * Resize the gallery and re-position cells.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    resize(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.resize();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Position cells at selected position.\n     * Trigger reposition after the size of a cell has been changed.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reposition(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Trigger the resize\n                this.instances[flickityIndex].instance.reposition();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Re-collect all cell elements in `flickity-slider`.\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    reloadCells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Reload cells\n                this.instances[flickityIndex].instance.reloadCells();\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    get(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the first Flickity instance\n     *\n     * @return {Object} instance\n     */\n    getFirst() {\n        return this.$q((resolve, reject) => {\n            if (!this.instances || this.instances.length < 1) {\n                reject('No instances exist');\n            } else {\n                resolve(this.instances[0]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the Flickity instance\n     *\n     * @param {Element} element\n     * @return {Object} instance\n     */\n    getByElement(element) {\n        return this.$q((resolve, reject) => {\n            const instance = Flickity.data(element)\n\n            if (instance) {\n                resolve(instance);\n            } else {\n                reject('Instance not found for ' + element);\n            }\n        });\n    }\n\n\n    /**\n     * Prepend elements and create cells to the beginning of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    prepend(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Prepend the slides\n                this.instances[flickityIndex].instance.prepend(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Append elements and create cells to the end of the gallery.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @return {Object} instance\n     */\n    append(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Append the slides\n                this.instances[flickityIndex].instance.append(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Insert elements into the gallery and create cells at the desired index.\n     *\n     * @param {String} id\n     * @param {*} element(s) - jQuery object, Array of Elements, Element, or NodeList\n     * @param {Integer} index - Zero based index\n     * @return {Object} instance\n     */\n    insert(id, elements, index) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                // Insert the slides\n                this.instances[flickityIndex].instance.insert(elements, index);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Array} cellElements\n     */\n    getCellElements(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.getCellElements());\n            }\n        });\n    }\n\n\n    /**\n     * Get the elements of the cells\n     *\n     * @param {String} id\n     * @return {Object} instance\n     */\n    remove(id, elements) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                this.instances[flickityIndex].instance.remove(elements);\n\n                resolve(this.instances[flickityIndex]);\n            }\n        });\n    }\n\n\n    /**\n     * Get the currently selected cell element\n     *\n     * @param {String} id\n     * @return {Element} selectedCellElement\n     */\n    selectedElement(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.selectedElement);\n            }\n        });\n    }\n\n\n    /**\n     * Get an array of all cells\n     *\n     * @param {String} id\n     * @return {Array} cells\n     */\n    cells(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        return this.$q((resolve, reject) => {\n            if (flickityIndex < 0) {\n                reject('Instance ' + id + ' not found');\n            } else {\n                resolve(this.instances[flickityIndex].instance.cells);\n            }\n        });\n    }\n\n\n\n    //\n    // Helper methods\n    //\n\n\n    /**\n     * Find the index for a Flickity instance\n     *\n     * @param {String} id\n     * @return {Integer} flickityIndex\n     */\n    _getFlickityIndex(id) {\n        const negativeIndexForUnfound = -1;\n\n        // If no instances exist, cancel\n        if (this.instances.length < 1) {\n\n            return negativeIndexForUnfound;\n\n        } else {\n\n            // Find the instance by ID\n            const index = this.instances.findIndex(matchesId);\n\n            if (index === false) {\n                return negativeIndexForUnfound;\n            } else {\n                return index;\n            }\n\n        }\n\n        // Test to match an item in an array based on the id\n        function matchesId(item, index, array) {\n            if (item.id === id) {\n                return item;\n            }\n        }\n\n    }\n\n\n    _bindEvents(id) {\n        const flickityIndex = this._getFlickityIndex(id);\n\n        if (flickityIndex < 0) {\n            return false;\n        }\n\n        return this.$q((resolve) => {\n            const ID = this.instances[flickityIndex].id;\n\n            this.instances[flickityIndex].instance.on('cellSelect', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':cellSelect',\n                                      this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('settle', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':settle',\n                                      this.instances[flickityIndex]);\n            });\n\n            this.instances[flickityIndex].instance.on('dragStart', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragStart');\n            });\n\n            this.instances[flickityIndex].instance.on('dragMove', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragMove');\n            });\n\n            this.instances[flickityIndex].instance.on('dragEnd', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':dragEnd');\n            });\n\n            this.instances[flickityIndex].instance.on('pointerDown', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerDown');\n            });\n\n            this.instances[flickityIndex].instance.on('pointerMove', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerMove');\n            });\n\n            this.instances[flickityIndex].instance.on('pointerUp', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':pointerUp');\n            });\n\n            this.instances[flickityIndex].instance.on('staticClick', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':staticClick');\n            });\n\n            this.instances[flickityIndex].instance.on('lazyLoad', () => {\n                this.$rootScope.$emit('Flickity:' + ID + ':lazyLoad');\n            });\n\n            resolve(true);\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityDirective = FlickityDirective;\n\nvar _flickity = require('./flickity.controller');\n\nfunction FlickityDirective($timeout, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction\n            };\n        },\n        controller: _flickity.FlickityController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure the DOM has initialized\n\n        angular.element(document).ready(function () {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options).then(function (flickityInstance) {\n\n                // Expose the Flickity instance and ID\n                $controller.Flickity = flickityInstance.instance;\n                $controller.bcFlickityId = flickityInstance.id;\n            });\n        });\n\n        // When the directive is being destroyed\n        var onDestroy = $scope.$on('$destroy', function (event) {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n    }\n} /* global Flickity */\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.directive.js\n **/","/* global Flickity */\nimport { FlickityController } from './flickity.controller';\n\nexport function FlickityDirective(\n    $timeout,\n    FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickity: '@?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n                post: postLinkFunction,\n            };\n        },\n        controller: FlickityController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // If no ID was passed in\n        if (!$controller.bcFlickityId) {\n            // Use the element's ID if one exists\n            if ($attrs.id) {\n                $controller.bcFlickityId = $attrs.id;\n            }\n        }\n\n    }\n\n    /**\n     * Post Link\n     */\n    function postLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Make sure the DOM has initialized\n        angular.element(document).ready(() => {\n\n            // Initialize Flickity\n            FlickityService.create($element[0], $controller.bcFlickityId, $controller.options)\n                .then((flickityInstance) => {\n\n                    // Expose the Flickity instance and ID\n                    $controller.Flickity = flickityInstance.instance;\n                    $controller.bcFlickityId = flickityInstance.id;\n\n                });\n        });\n\n        // When the directive is being destroyed\n        const onDestroy = $scope.$on('$destroy', (event) => {\n            // Make sure we destroy the Flickity instance\n            FlickityService.destroy($controller.bcFlickityId);\n        });\n\n    }\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FlickityController = exports.FlickityController = (function () {\n    function FlickityController(FlickityConfig) {\n        'ngInject';\n\n        _classCallCheck(this, FlickityController);\n\n        this.FlickityConfig = FlickityConfig;\n\n        this._activate();\n    }\n\n    _createClass(FlickityController, [{\n        key: '_activate',\n        value: function _activate() {\n\n            // Extend the default options with user configuration\n            this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n        }\n    }]);\n\n    return FlickityController;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/flickity.controller.js\n **/","export class FlickityController {\n\n    constructor(\n        FlickityConfig\n    ) {\n        'ngInject';\n\n        this.FlickityConfig = FlickityConfig;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n\n        // Extend the default options with user configuration\n        this.options = angular.extend({}, this.FlickityConfig, angular.fromJson(this.bcFlickity));\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/flickity.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityNextDirective = FlickityNextDirective;\n\nvar _next = require('./next.controller');\n\nfunction FlickityNextDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _next.NextController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/flickityNext.directive.js\n **/","import { NextController } from './next.controller';\n\nexport function FlickityNextDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityNext: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: NextController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.cells.length, data.instance.selectedIndex + 1);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.next($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index, cellCount) {\n\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === cellCount) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/flickityNext.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar NextController = exports.NextController = (function () {\n    function NextController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, NextController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(NextController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return NextController;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/next/next.controller.js\n **/","export class NextController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityNext || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/next/next.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.FlickityPreviousDirective = FlickityPreviousDirective;\n\nvar _previous = require('./previous.controller');\n\nfunction FlickityPreviousDirective($log, $timeout, $rootScope, FlickityConfig, FlickityService) {\n    'ngInject';\n\n    var directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?'\n        },\n        compile: function compile() {\n            return {\n                pre: preLinkFunction\n            };\n        },\n        controller: _previous.PreviousController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction($scope, $element, $attrs, $controller) {\n        'ngInject';\n\n        // Get the ID\n\n        var ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        var selectEvent = 'Flickity:' + ID + ':cellSelect';\n        var settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        var cellSelect = $rootScope.$on(selectEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        var settle = $rootScope.$on(settleEvent, function (event, data) {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n        $element.on('click', function () {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n        });\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/flickityPrevious.directive.js\n **/","import { PreviousController } from './previous.controller';\n\nexport function FlickityPreviousDirective(\n    $log, $timeout, $rootScope,\n    FlickityConfig, FlickityService\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'A',\n        scope: {},\n        bindToController: {\n            bcFlickityPrevious: '=?',\n            bcFlickityId: '@?',\n        },\n        compile: () => {\n            return {\n                pre: preLinkFunction,\n            };\n        },\n        controller: PreviousController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Pre Link\n     */\n    function preLinkFunction(\n        $scope, $element, $attrs, $controller\n    ) {\n        'ngInject';\n\n        // Get the ID\n        const ID = $controller.flickityId;\n\n        // Define the broadcast names to listen for\n        const selectEvent = 'Flickity:' + ID + ':cellSelect';\n        const settleEvent = 'Flickity:' + $controller.flickityId + ':settle';\n\n        // Listen\n        const cellSelect = $rootScope.$on(selectEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n        const settle = $rootScope.$on(settleEvent, (event, data) => {\n            _disableButtonIfNeeded(data.instance.selectedIndex);\n        });\n\n\n        $element.on('click', () => {\n\n            // Move to the next cell\n            FlickityService.previous($controller.flickityId, $controller.wrapAround);\n\n        });\n\n\n\n\n        /**\n         * Disable button if needed\n         *\n         * @param {Int} index\n         */\n        function _disableButtonIfNeeded(index) {\n            // Disable button if at the beginning and we shouldn't wrap\n            if (!$controller.wrapAround && index === 0) {\n                $attrs.$set('disabled', 'disabled');\n            } else {\n                $attrs.$set('disabled', false);\n            }\n        }\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/flickityPrevious.directive.js\n **/","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PreviousController = exports.PreviousController = (function () {\n    function PreviousController($log, $q, $timeout, FlickityConfig, FlickityService) {\n        'ngInject';\n\n        _classCallCheck(this, PreviousController);\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n        this._activate();\n    }\n\n    _createClass(PreviousController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Assign or fall back to default\n            this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n            this.flickityId = null;\n\n            // Make sure we have an ID\n            this._setId();\n        }\n\n        /**\n         * Set ID to what is defined, fallback to first instance\n         *\n         * @return {String} flickityId\n         */\n\n    }, {\n        key: '_setId',\n        value: function _setId() {\n            var _this = this;\n\n            return this.$q(function (resolve, reject) {\n\n                if (_this.bcFlickityId) {\n                    _this.flickityId = _this.bcFlickityId;\n                    resolve(_this.flickityId);\n                } else {\n                    _this.$timeout(function () {\n                        _this.FlickityService.getFirst().then(function (instance) {\n                            _this.flickityId = instance.id;\n                            resolve(_this.flickityId);\n                        }).catch(function (error) {\n                            _this.$log.warn(error);\n                            reject(error);\n                        });\n                    });\n                }\n            });\n        }\n    }]);\n\n    return PreviousController;\n})();\n\n\n/** WEBPACK FOOTER **\n ** ./src/previous/previous.controller.js\n **/","export class PreviousController {\n\n    constructor(\n        $log, $q, $timeout,\n        FlickityConfig, FlickityService\n    ) {\n        'ngInject';\n\n        this.$log = $log;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.FlickityConfig = FlickityConfig;\n        this.FlickityService = FlickityService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Assign or fall back to default\n        this.wrapAround = this.bcFlickityPrevious || this.FlickityConfig.wrapAround;\n        this.flickityId = null;\n\n        // Make sure we have an ID\n        this._setId();\n\n    }\n\n\n    /**\n     * Set ID to what is defined, fallback to first instance\n     *\n     * @return {String} flickityId\n     */\n    _setId() {\n\n        return this.$q((resolve, reject) => {\n\n            if (this.bcFlickityId) {\n                this.flickityId = this.bcFlickityId;\n                resolve(this.flickityId);\n            } else {\n                this.$timeout(() => {\n                    this.FlickityService.getFirst()\n                        .then((instance) => {\n                            this.flickityId = instance.id;\n                            resolve(this.flickityId);\n                        })\n                        .catch((error) => {\n                            this.$log.warn(error);\n                            reject(error);\n                        })\n                    ;\n                });\n            }\n\n        });\n\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/previous/previous.controller.js\n **/"],"sourceRoot":""}