!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("angular-flickity",[],e):"object"==typeof exports?exports["angular-flickity"]=e():t["angular-flickity"]=e()}(this,function(){return function(t){function e(i){if(n[i])return n[i].exports;var c=n[i]={exports:{},id:i,loaded:!1};return t[i].call(c.exports,c,c.exports,e),c.loaded=!0,c.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";var i=n(1),c=n(2),r=n(3),o=n(5),s=n(7);angular.module("bc.Flickity",[]).provider("FlickityConfig",i.FlickityConfigProvider).service("FlickityService",c.FlickityService).directive("bcFlickity",r.FlickityDirective).directive("bcFlickityNext",o.FlickityNextDirective).directive("bcFlickityPrevious",s.FlickityPreviousDirective)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.FlickityConfigProvider=function(){function t(){n(this,t),this.accessibility=!0,this.adaptiveHeight=!1,this.autoPlay=!1,this.cellAlign="center",this.cellSelector=void 0,this.contain=!1,this.draggable=!0,this.dragThreshold=3,this.freeScroll=!1,this.freeScrollFriction=!1,this.selectedAttraction=.025,this.friction=.28,this.groupCells=!1,this.initialIndex=0,this.lazyLoad=!0,this.percentPosition=!0,this.prevNextButtons=!0,this.pageDots=!0,this.resize=!0,this.rightToLeft=!1,this.setGallerySize=!0,this.watchCSS=!1,this.wrapAround=!1,this.imagesLoaded=!0,this.asNavFor=!0}return i(t,[{key:"$get",value:function(){return this}}]),t}()},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.FlickityService=function(){function t(e,i,c,r){"ngInject";n(this,t),this.$timeout=e,this.$q=i,this.$rootScope=c,this.$log=r,this.instances=[]}return t.$inject=["$timeout","$q","$rootScope","$log"],i(t,[{key:"create",value:function(t,e,n){var i=this;return new Promise(function(c,r){if(e||(e=t.id?t.id:i.instances.length+1),i._findObjectById(i.instances,e)){var o=i._getFlickityIndex(e);i.$log.error("This ID is already in use: ",i.instances[o]),r()}var s={id:e,instance:new Flickity(t,n)};return i.instances.push(s),i._bindEvents(e).then(function(){return c(s)})})}},{key:"destroy",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):(e.instances[c].instance.destroy(),e.instances.splice(c,1),n("Instance "+t+" destroyed."))})}},{key:"getAll",value:function(){var t=this;return new Promise(function(e,n){e(t.instances)})}},{key:"next",value:function(t,e,n){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(t);return o<0?r("Instance "+t+" not found"):(i.instances[o].instance.next(e,n),c(i.instances[o]))})}},{key:"previous",value:function(t,e,n){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(t);return o<0?r("Instance "+t+" not found"):(i.instances[o].instance.previous(e,n),c(i.instances[o]))})}},{key:"select",value:function(t,e){var n=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return new Promise(function(r,o){var s=n._getFlickityIndex(t);return s<0?o("Instance "+t+" not found"):(n.instances[s].instance.select(e,i,c),r(n.instances[s]))})}},{key:"selectCell",value:function(t,e){var n=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return new Promise(function(r,o){var s=n._getFlickityIndex(t);return s<0?o("Instance "+t+" not found"):(n.instances[s].instance.selectCell(e,i,c),r(n.instances[s]))})}},{key:"selectedIndex",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):n(e.instances[c].instance.selectedIndex)})}},{key:"resize",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):(e.instances[c].instance.resize(),n(e.instances[c]))})}},{key:"reposition",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):(e.instances[c].instance.reposition(),n(e.instances[c]))})}},{key:"reloadCells",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):(e.instances[c].instance.reloadCells(),n(e.instances[c]))})}},{key:"get",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):n(e.instances[c])})}},{key:"getFirst",value:function(){var t=this;return new Promise(function(e,n){return!t.instances||t.instances.length<1?n("No instances exist"):e(t.instances[0])})}},{key:"getByElement",value:function(t){return new Promise(function(e,n){var i=Flickity.data(t);return i?e(i):n("Instance not found for "+t)})}},{key:"prepend",value:function(t,e){var n=this;return new Promise(function(i,c){var r=n._getFlickityIndex(t);return r<0?c("Instance "+t+" not found"):(n.instances[r].instance.prepend(e),i(n.instances[r]))})}},{key:"append",value:function(t,e){var n=this;return new Promise(function(i,c){var r=n._getFlickityIndex(t);return r<0?c("Instance "+t+" not found"):(n.instances[r].instance.append(e),i(n.instances[r]))})}},{key:"insert",value:function(t,e,n){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(t);return o<0?r("Instance "+t+" not found"):(i.instances[o].instance.insert(e,n),c(i.instances[o]))})}},{key:"getCellElements",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):n(e.instances[c].instance.getCellElements())})}},{key:"remove",value:function(t,e){var n=this;return new Promise(function(i,c){var r=n._getFlickityIndex(t);return r<0?c("Instance "+t+" not found"):(n.instances[r].instance.remove(e),i(n.instances[r]))})}},{key:"selectedElement",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):n(e.instances[c].instance.selectedElement)})}},{key:"cells",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);return c<0?i("Instance "+t+" not found"):n(e.instances[c].instance.cells)})}},{key:"_getFlickityIndex",value:function(t){var e=void 0,n=-1;return this.instances.length?this.instances.forEach(function(n,i){n.id===t&&(e=i)}):e=n,e}},{key:"_bindEvents",value:function(t){var e=this;return new Promise(function(n,i){var c=e._getFlickityIndex(t);if(c<0)return i();var r=e.instances[c].id;return e.instances[c].instance.on("select",function(){e.$rootScope.$emit("Flickity:"+r+":select",e.instances[c])}),e.instances[c].instance.on("settle",function(){e.$rootScope.$emit("Flickity:"+r+":settle",e.instances[c])}),e.instances[c].instance.on("scroll",function(t,n){e.$rootScope.$emit("Flickity:"+r+":scroll",{progress:t,positionX:n})}),e.instances[c].instance.on("dragStart",function(t,n){e.$rootScope.$emit("Flickity:"+r+":dragStart",{event:t,pointer:n})}),e.instances[c].instance.on("dragMove",function(t,n,i){e.$rootScope.$emit("Flickity:"+r+":dragMove",{event:t,pointer:n,moveVector:i})}),e.instances[c].instance.on("dragEnd",function(t,n){e.$rootScope.$emit("Flickity:"+r+":dragEnd",{event:t,pointer:n})}),e.instances[c].instance.on("pointerDown",function(t,n){e.$rootScope.$emit("Flickity:"+r+":pointerDown",{event:t,pointer:n})}),e.instances[c].instance.on("pointerMove",function(t,n,i){e.$rootScope.$emit("Flickity:"+r+":pointerMove",{event:t,pointer:n,moveVector:i})}),e.instances[c].instance.on("pointerUp",function(t,n){e.$rootScope.$emit("Flickity:"+r+":pointerUp",{event:t,pointer:n})}),e.instances[c].instance.on("staticClick",function(t,n,i,c){e.$rootScope.$emit("Flickity:"+r+":staticClick",{event:t,pointer:n,cellElement:i,cellIndex:c})}),e.instances[c].instance.on("lazyLoad",function(t,n){e.$rootScope.$emit("Flickity:"+r+":lazyLoad",{event:t,cellElement:n})}),n(!0)})}},{key:"_findObjectById",value:function(t,e){return t.filter(function(t){return t.id===e})[0]}}]),t}()},function(t,e,n){"use strict";function i(t,e){"ngInject";function n(t,e,n,i){i.bcFlickityId||n.id&&(i.bcFlickityId=n.id)}function i(n,i,c,r){t(function(){e.create(i[0],r.bcFlickityId,r.options).then(function(t){r.Flickity=t.instance,r.bcFlickityId=t.id})});n.$on("$destroy",function(t){e.destroy(r.bcFlickityId)})}n.$inject=["$scope","$element","$attrs","$controller"],i.$inject=["$scope","$element","$attrs","$controller"];var r={restrict:"A",scope:{},bindToController:{bcFlickity:"@?",bcFlickityId:"@?"},compile:function(){return{pre:n,post:i}},controller:c.FlickityController,controllerAs:"vm"};return r}i.$inject=["$timeout","FlickityService"],Object.defineProperty(e,"__esModule",{value:!0}),e.FlickityDirective=i;var c=n(4)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.FlickityController=function(){function t(e){"ngInject";n(this,t),this.FlickityConfig=e,this._activate()}return t.$inject=["FlickityConfig"],i(t,[{key:"_activate",value:function(){this.options=angular.extend({},this.FlickityConfig,angular.fromJson(this.bcFlickity||{}))}}]),t}()},function(t,e,n){"use strict";function i(t,e,n,i,r){"ngInject";function o(t,e,i,c){function o(t,e){c.wrapAround||t!==e?i.$set("disabled",!1):i.$set("disabled","disabled")}var s=c.flickityId,l="Flickity:"+s+":cellSelect",a="Flickity:"+c.flickityId+":settle";n.$on(l,function(t,e){o(e.instance.cells.length,e.instance.selectedIndex+1)}),n.$on(a,function(t,e){o(e.instance.cells.length,e.instance.selectedIndex+1)});e.on("click",function(){r.next(c.flickityId,c.wrapAround)})}o.$inject=["$scope","$element","$attrs","$controller"];var s={restrict:"A",scope:{},bindToController:{bcFlickityNext:"=?",bcFlickityId:"@?"},compile:function(){return{pre:o}},controller:c.NextController,controllerAs:"vm"};return s}i.$inject=["$log","$timeout","$rootScope","FlickityConfig","FlickityService"],Object.defineProperty(e,"__esModule",{value:!0}),e.FlickityNextDirective=i;var c=n(6)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.NextController=function(){function t(e,i,c,r,o){"ngInject";n(this,t),this.$log=e,this.$q=i,this.$timeout=c,this.FlickityConfig=r,this.FlickityService=o,this._activate()}return t.$inject=["$log","$q","$timeout","FlickityConfig","FlickityService"],i(t,[{key:"_activate",value:function(){this.wrapAround=this.bcFlickityNext||this.FlickityConfig.wrapAround,this.flickityId=null,this._setId()}},{key:"_setId",value:function(){var t=this;return this.$q(function(e,n){t.bcFlickityId?(t.flickityId=t.bcFlickityId,e(t.flickityId)):t.$timeout(function(){t.FlickityService.getFirst().then(function(n){t.flickityId=n.id,e(t.flickityId)})["catch"](function(e){t.$log.warn(e),n(e)})})})}}]),t}()},function(t,e,n){"use strict";function i(t,e,n,i,r){"ngInject";function o(t,e,i,c){function o(t){c.wrapAround||0!==t?i.$set("disabled",!1):i.$set("disabled","disabled")}var s=c.flickityId,l="Flickity:"+s+":cellSelect",a="Flickity:"+c.flickityId+":settle";n.$on(l,function(t,e){o(e.instance.selectedIndex)}),n.$on(a,function(t,e){o(e.instance.selectedIndex)});e.on("click",function(){r.previous(c.flickityId,c.wrapAround)})}o.$inject=["$scope","$element","$attrs","$controller"];var s={restrict:"A",scope:{},bindToController:{bcFlickityPrevious:"=?",bcFlickityId:"@?"},compile:function(){return{pre:o}},controller:c.PreviousController,controllerAs:"vm"};return s}i.$inject=["$log","$timeout","$rootScope","FlickityConfig","FlickityService"],Object.defineProperty(e,"__esModule",{value:!0}),e.FlickityPreviousDirective=i;var c=n(8)},function(t,e){"use strict";function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();e.PreviousController=function(){function t(e,i,c,r,o){"ngInject";n(this,t),this.$log=e,this.$q=i,this.$timeout=c,this.FlickityConfig=r,this.FlickityService=o,this._activate()}return t.$inject=["$log","$q","$timeout","FlickityConfig","FlickityService"],i(t,[{key:"_activate",value:function(){this.wrapAround=this.bcFlickityPrevious||this.FlickityConfig.wrapAround,this.flickityId=null,this._setId()}},{key:"_setId",value:function(){var t=this;return this.$q(function(e,n){t.bcFlickityId?(t.flickityId=t.bcFlickityId,e(t.flickityId)):t.$timeout(function(){t.FlickityService.getFirst().then(function(n){t.flickityId=n.id,e(t.flickityId)})["catch"](function(e){t.$log.warn(e),n(e)})})})}}]),t}()}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uPzVjYTYiLCJ3ZWJwYWNrOi8vL2FuZ3VsYXItZmxpY2tpdHkubWluLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBiYmU2NjFjYjdkM2U5YTE4YjgxMT83ZjIxIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz85NTUyIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcz8xZjM5KiIsIndlYnBhY2s6Ly8vLi9zcmMvZmxpY2tpdHkucHJvdmlkZXIuanM/ZjdhMiIsIndlYnBhY2s6Ly8vLi9zcmMvZmxpY2tpdHkucHJvdmlkZXIuanM/MDFmNSoiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsaWNraXR5LnNlcnZpY2UuanM/NzgwMCIsIndlYnBhY2s6Ly8vLi9zcmMvZmxpY2tpdHkuc2VydmljZS5qcz9hZGE1KiIsIndlYnBhY2s6Ly8vLi9zcmMvZmxpY2tpdHkuZGlyZWN0aXZlLmpzPzM0YWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZsaWNraXR5LmRpcmVjdGl2ZS5qcz9mNjI0KiIsIndlYnBhY2s6Ly8vLi9zcmMvZmxpY2tpdHkuY29udHJvbGxlci5qcz9iMDdmIiwid2VicGFjazovLy8uL3NyYy9mbGlja2l0eS5jb250cm9sbGVyLmpzP2FkODgqIiwid2VicGFjazovLy8uL3NyYy9uZXh0L2ZsaWNraXR5TmV4dC5kaXJlY3RpdmUuanM/M2M2MyIsIndlYnBhY2s6Ly8vLi9zcmMvbmV4dC9mbGlja2l0eU5leHQuZGlyZWN0aXZlLmpzPzhlM2QqIiwid2VicGFjazovLy8uL3NyYy9uZXh0L25leHQuY29udHJvbGxlci5qcz82ODMwIiwid2VicGFjazovLy8uL3NyYy9uZXh0L25leHQuY29udHJvbGxlci5qcz8wMTllKiIsIndlYnBhY2s6Ly8vLi9zcmMvcHJldmlvdXMvZmxpY2tpdHlQcmV2aW91cy5kaXJlY3RpdmUuanM/ODA1NyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJldmlvdXMvZmxpY2tpdHlQcmV2aW91cy5kaXJlY3RpdmUuanM/ODc2MSoiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ByZXZpb3VzL3ByZXZpb3VzLmNvbnRyb2xsZXIuanM/ZTAyMCIsIndlYnBhY2s6Ly8vLi9zcmMvcHJldmlvdXMvcHJldmlvdXMuY29udHJvbGxlci5qcz9iOGY5KiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfZmxpY2tpdHkiLCJfZmxpY2tpdHkyIiwiX2ZsaWNraXR5MyIsIl9mbGlja2l0eU5leHQiLCJfZmxpY2tpdHlQcmV2aW91cyIsImFuZ3VsYXIiLCJwcm92aWRlciIsIkZsaWNraXR5Q29uZmlnUHJvdmlkZXIiLCJzZXJ2aWNlIiwiRmxpY2tpdHlTZXJ2aWNlIiwiZGlyZWN0aXZlIiwiRmxpY2tpdHlEaXJlY3RpdmUiLCJGbGlja2l0eU5leHREaXJlY3RpdmUiLCJGbGlja2l0eVByZXZpb3VzRGlyZWN0aXZlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImF1dG9QbGF5IiwiY2VsbEFsaWduIiwiY2VsbFNlbGVjdG9yIiwidW5kZWZpbmVkIiwiY29udGFpbiIsImRyYWdnYWJsZSIsImRyYWdUaHJlc2hvbGQiLCJmcmVlU2Nyb2xsIiwiZnJlZVNjcm9sbEZyaWN0aW9uIiwic2VsZWN0ZWRBdHRyYWN0aW9uIiwiZnJpY3Rpb24iLCJncm91cENlbGxzIiwiaW5pdGlhbEluZGV4IiwibGF6eUxvYWQiLCJwZXJjZW50UG9zaXRpb24iLCJwcmV2TmV4dEJ1dHRvbnMiLCJwYWdlRG90cyIsInJlc2l6ZSIsInJpZ2h0VG9MZWZ0Iiwic2V0R2FsbGVyeVNpemUiLCJ3YXRjaENTUyIsIndyYXBBcm91bmQiLCJpbWFnZXNMb2FkZWQiLCJhc05hdkZvciIsIiR0aW1lb3V0IiwiJHEiLCIkcm9vdFNjb3BlIiwiJGxvZyIsImluc3RhbmNlcyIsIiRpbmplY3QiLCJlbGVtZW50Iiwib3B0aW9ucyIsIl90aGlzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfZmluZE9iamVjdEJ5SWQiLCJpbmRleCIsIl9nZXRGbGlja2l0eUluZGV4IiwiZXJyb3IiLCJGbGlja2l0eSIsInB1c2giLCJfYmluZEV2ZW50cyIsInRoZW4iLCJfdGhpczIiLCJmbGlja2l0eUluZGV4IiwiZGVzdHJveSIsInNwbGljZSIsIl90aGlzMyIsImlzV3JhcHBlZCIsImlzSW5zdGFudCIsIl90aGlzNCIsIm5leHQiLCJfdGhpczUiLCJwcmV2aW91cyIsIl90aGlzNiIsImFyZ3VtZW50cyIsInNlbGVjdCIsIl90aGlzNyIsInNlbGVjdENlbGwiLCJfdGhpczgiLCJzZWxlY3RlZEluZGV4IiwiX3RoaXM5IiwiX3RoaXMxMCIsInJlcG9zaXRpb24iLCJfdGhpczExIiwicmVsb2FkQ2VsbHMiLCJfdGhpczEyIiwiX3RoaXMxMyIsImRhdGEiLCJlbGVtZW50cyIsIl90aGlzMTQiLCJwcmVwZW5kIiwiX3RoaXMxNSIsImFwcGVuZCIsIl90aGlzMTYiLCJpbnNlcnQiLCJfdGhpczE3IiwiZ2V0Q2VsbEVsZW1lbnRzIiwiX3RoaXMxOCIsInJlbW92ZSIsIl90aGlzMTkiLCJzZWxlY3RlZEVsZW1lbnQiLCJfdGhpczIwIiwiY2VsbHMiLCJmb3VuZEluZGV4IiwiTk9UX0ZPVU5EIiwiZm9yRWFjaCIsIl90aGlzMjEiLCJJRCIsIm9uIiwiJGVtaXQiLCJwcm9ncmVzcyIsInBvc2l0aW9uWCIsImV2ZW50IiwicG9pbnRlciIsIm1vdmVWZWN0b3IiLCJjZWxsRWxlbWVudCIsImNlbGxJbmRleCIsInNvdXJjZSIsImZpbHRlciIsIm9iamVjdCIsInByZUxpbmtGdW5jdGlvbiIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHJzIiwiJGNvbnRyb2xsZXIiLCJiY0ZsaWNraXR5SWQiLCJwb3N0TGlua0Z1bmN0aW9uIiwiY3JlYXRlIiwiZmxpY2tpdHlJbnN0YW5jZSIsIiRvbiIsInJlc3RyaWN0Iiwic2NvcGUiLCJiaW5kVG9Db250cm9sbGVyIiwiYmNGbGlja2l0eSIsImNvbXBpbGUiLCJwcmUiLCJwb3N0IiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIkZsaWNraXR5Q29udHJvbGxlciIsIkZsaWNraXR5Q29uZmlnIiwiX2FjdGl2YXRlIiwiZXh0ZW5kIiwiZnJvbUpzb24iLCJfZGlzYWJsZUJ1dHRvbklmTmVlZGVkIiwiY2VsbENvdW50IiwiJHNldCIsImZsaWNraXR5SWQiLCJzZWxlY3RFdmVudCIsInNldHRsZUV2ZW50IiwiYmNGbGlja2l0eU5leHQiLCJfbmV4dCIsIk5leHRDb250cm9sbGVyIiwiX3NldElkIiwiZ2V0Rmlyc3QiLCJ3YXJuIiwiYmNGbGlja2l0eVByZXZpb3VzIiwiX3ByZXZpb3VzIiwiUHJldmlvdXNDb250cm9sbGVyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxJQUNBLGtCQUFBRyxnQkFBQUMsSUFDQUQsT0FBQSxzQkFBQUgsR0FDQSxnQkFBQUMsU0FDQUEsUUFBQSxvQkFBQUQsSUFFQUQsRUFBQSxvQkFBQUMsS0FDQ0ssS0FBQSxXQUNELE1DQWdCLFVBQVVDLEdDTjFCLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFB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QUFBaUQsR0FBQWhGLElBRUwsT0FBT0EsTUFBS3lFLEdBQUcsU0FBQ1MsRUFBU0MsR0FFakJILEVBQUsyRSxjQUNMM0UsRUFBS2lHLFdBQWFqRyxFQUFLMkUsYUFDdkJ6RSxFQUFRRixFQUFLaUcsYUFFYmpHLEVBQUtSLFNBQVMsV0FDVlEsRUFBSzVELGdCQUFnQm9LLFdBQ2hCN0YsS0FBSyxTQUFDakUsR0FDSHNELEVBQUtpRyxXQUFhdkosRUFBU3JCLEdBQzNCNkUsRUFBUUYsRUFBS2lHLGNBSHJCakcsU0FLVyxTQUFDTyxHQUNKUCxFQUFLTCxLQUFLOEcsS0FBS2xHLEdBQ2ZKLEVBQU9JLGFEYXhCcUciLCJmaWxlIjoiYW5ndWxhci1mbGlja2l0eS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcImFuZ3VsYXItZmxpY2tpdHlcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYW5ndWxhci1mbGlja2l0eVwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhbmd1bGFyLWZsaWNraXR5XCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJhbmd1bGFyLWZsaWNraXR5XCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFuZ3VsYXItZmxpY2tpdHlcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYW5ndWxhci1mbGlja2l0eVwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9mbGlja2l0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHR2YXIgX2ZsaWNraXR5MiA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2ZsaWNraXR5MyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX2ZsaWNraXR5TmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX2ZsaWNraXR5UHJldmlvdXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0YW5ndWxhci5tb2R1bGUoJ2JjLkZsaWNraXR5JywgW10pLnByb3ZpZGVyKCdGbGlja2l0eUNvbmZpZycsIF9mbGlja2l0eS5GbGlja2l0eUNvbmZpZ1Byb3ZpZGVyKS5zZXJ2aWNlKCdGbGlja2l0eVNlcnZpY2UnLCBfZmxpY2tpdHkyLkZsaWNraXR5U2VydmljZSkuZGlyZWN0aXZlKCdiY0ZsaWNraXR5JywgX2ZsaWNraXR5My5GbGlja2l0eURpcmVjdGl2ZSkuZGlyZWN0aXZlKCdiY0ZsaWNraXR5TmV4dCcsIF9mbGlja2l0eU5leHQuRmxpY2tpdHlOZXh0RGlyZWN0aXZlKS5kaXJlY3RpdmUoJ2JjRmxpY2tpdHlQcmV2aW91cycsIF9mbGlja2l0eVByZXZpb3VzLkZsaWNraXR5UHJldmlvdXNEaXJlY3RpdmUpO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIEZsaWNraXR5Q29uZmlnUHJvdmlkZXIgPSBleHBvcnRzLkZsaWNraXR5Q29uZmlnUHJvdmlkZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBGbGlja2l0eUNvbmZpZ1Byb3ZpZGVyKCkge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlja2l0eUNvbmZpZ1Byb3ZpZGVyKTtcblx0XG5cdCAgICAgICAgLy8gRGVmaW5lIEZsaWNraXR5IGRlZmF1bHRzXG5cdCAgICAgICAgdGhpcy5hY2Nlc3NpYmlsaXR5ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmFkYXB0aXZlSGVpZ2h0ID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5hdXRvUGxheSA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuY2VsbEFsaWduID0gJ2NlbnRlcic7XG5cdCAgICAgICAgdGhpcy5jZWxsU2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgdGhpcy5jb250YWluID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuZHJhZ1RocmVzaG9sZCA9IDM7XG5cdCAgICAgICAgdGhpcy5mcmVlU2Nyb2xsID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5mcmVlU2Nyb2xsRnJpY3Rpb24gPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLnNlbGVjdGVkQXR0cmFjdGlvbiA9IC4wMjU7XG5cdCAgICAgICAgdGhpcy5mcmljdGlvbiA9IC4yODtcblx0ICAgICAgICB0aGlzLmdyb3VwQ2VsbHMgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmluaXRpYWxJbmRleCA9IDA7XG5cdCAgICAgICAgdGhpcy5sYXp5TG9hZCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5wZXJjZW50UG9zaXRpb24gPSB0cnVlO1xuXHQgICAgICAgIHRoaXMucHJldk5leHRCdXR0b25zID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnBhZ2VEb3RzID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLnJlc2l6ZSA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5yaWdodFRvTGVmdCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuc2V0R2FsbGVyeVNpemUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMud2F0Y2hDU1MgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLndyYXBBcm91bmQgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5hc05hdkZvciA9IHRydWU7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEZsaWNraXR5Q29uZmlnUHJvdmlkZXIsIFt7XG5cdCAgICAgICAga2V5OiAnJGdldCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICRnZXQoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gRmxpY2tpdHlDb25maWdQcm92aWRlcjtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0Ly9pbXBvcnQgRmxpY2tpdHkgZnJvbSAnZmxpY2tpdHknO1xuXHQvKiBnbG9iYWwgRmxpY2tpdHkgKi9cblx0dmFyIEZsaWNraXR5U2VydmljZSA9IGV4cG9ydHMuRmxpY2tpdHlTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgRmxpY2tpdHlTZXJ2aWNlLiRpbmplY3QgPSBbXCIkdGltZW91dFwiLCBcIiRxXCIsIFwiJHJvb3RTY29wZVwiLCBcIiRsb2dcIl07XG5cdCAgICBmdW5jdGlvbiBGbGlja2l0eVNlcnZpY2UoJHRpbWVvdXQsICRxLCAkcm9vdFNjb3BlLCAkbG9nKSB7XG5cdCAgICAgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZsaWNraXR5U2VydmljZSk7XG5cdFxuXHQgICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcblx0ICAgICAgICB0aGlzLiRxID0gJHE7XG5cdCAgICAgICAgdGhpcy4kcm9vdFNjb3BlID0gJHJvb3RTY29wZTtcblx0ICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXHRcblx0ICAgICAgICB0aGlzLmluc3RhbmNlcyA9IFtdO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQ3JlYXRlIGEgbmV3IEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG5cdCAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgKi9cblx0XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEZsaWNraXR5U2VydmljZSwgW3tcblx0ICAgICAgICBrZXk6ICdjcmVhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoZWxlbWVudCwgaWQsIG9wdGlvbnMpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBJZiBubyBJRCB3YXMgcGFzc2VkIGluXG5cdCAgICAgICAgICAgICAgICBpZiAoIWlkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBlbGVtZW50J3MgSUQgaWYgaXQgZXhpc3RzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gZWxlbWVudC5pZDtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGFzc2lnbiBhIG5ldyBJRFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IF90aGlzLmluc3RhbmNlcy5sZW5ndGggKyAxO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIElEIGlzIGFscmVhZHkgaW4gdXNlXG5cdCAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbmRPYmplY3RCeUlkKF90aGlzLmluc3RhbmNlcywgaWQpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX3RoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzLiRsb2cuZXJyb3IoJ1RoaXMgSUQgaXMgYWxyZWFkeSBpbiB1c2U6ICcsIF90aGlzLmluc3RhbmNlc1tpbmRleF0pO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0ge1xuXHQgICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcblx0ICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogbmV3IEZsaWNraXR5KGVsZW1lbnQsIG9wdGlvbnMpXG5cdCAgICAgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhpcyBpbnN0YW5jZSB0byB0aGUgYXJyYXlcblx0ICAgICAgICAgICAgICAgIF90aGlzLmluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBCaW5kIHRvIGFsbCBldmVudHNcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fYmluZEV2ZW50cyhpZCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaW5zdGFuY2UpO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRGVzdHJveSBhIEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2Rlc3Ryb3knLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KGlkKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMyLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgICAgICAgICAgICBfdGhpczIuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLmRlc3Ryb3koKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGFycmF5XG5cdCAgICAgICAgICAgICAgICBfdGhpczIuaW5zdGFuY2VzLnNwbGljZShmbGlja2l0eUluZGV4LCAxKTtcblx0XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgnSW5zdGFuY2UgJyArIGlkICsgJyBkZXN0cm95ZWQuJyk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmV0dXJuIGFsbCBpbnN0YW5jZXNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBpbnN0YW5jZXNcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZ2V0QWxsJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsKCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzMy5pbnN0YW5jZXMpO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIE1vdmUgdG8gdGhlIG5leHQgc2xpZGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG5cdCAgICAgICAgICogQHBhcmFtIHtCb29sfSBpc0luc3RhbnRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ25leHQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KGlkLCBpc1dyYXBwZWQsIGlzSW5zdGFudCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzNC5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBzbGlkZVxuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzNC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UubmV4dChpc1dyYXBwZWQsIGlzSW5zdGFudCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczQuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBNb3ZlIHRvIHRoZSBwcmV2aW91cyBzbGlkZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHBhcmFtIHtCb29sfSBpc1dyYXBwZWRcblx0ICAgICAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzSW5zdGFudFxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2Vcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncHJldmlvdXMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2aW91cyhpZCwgaXNXcmFwcGVkLCBpc0luc3RhbnQpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczUuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHByZXZpb3VzIHNsaWRlXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXM1Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5wcmV2aW91cyhpc1dyYXBwZWQsIGlzSW5zdGFudCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczUuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTZWxlY3QgYSBzbGlkZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleFxuXHQgICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG5cdCAgICAgICAgICogQHBhcmFtIHtCb29sfSBpc0luc3RhbnRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3NlbGVjdCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdChpZCwgaW5kZXgpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgaXNXcmFwcGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblx0ICAgICAgICAgICAgdmFyIGlzSW5zdGFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczYuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHNlbGVjdGVkIHNsaWRlXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXM2Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5zZWxlY3QoaW5kZXgsIGlzV3JhcHBlZCwgaXNJbnN0YW50KTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzNi5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNlbGVjdCBhIHNsaWRlIG9mIGEgY2VsbFxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfFN0cmluZ30gdmFsdWVcblx0ICAgICAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzV3JhcHBlZFxuXHQgICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNJbnN0YW50XG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdzZWxlY3RDZWxsJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0Q2VsbChpZCwgdmFsdWUpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgaXNXcmFwcGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblx0ICAgICAgICAgICAgdmFyIGlzSW5zdGFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczcuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHNlbGVjdGVkIHNsaWRlXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXM3Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5zZWxlY3RDZWxsKHZhbHVlLCBpc1dyYXBwZWQsIGlzSW5zdGFudCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczcuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgc2xpZGUgaW5kZXhcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEByZXR1cm4ge0ludGVnZXJ9IHNlbGVjdGVkSW5kZXhcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnc2VsZWN0ZWRJbmRleCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdGVkSW5kZXgoaWQpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczguX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3VycmVudCBpbmRleFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzOC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uuc2VsZWN0ZWRJbmRleCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzaXplIHRoZSBnYWxsZXJ5IGFuZCByZS1wb3NpdGlvbiBjZWxscy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2Vcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncmVzaXplJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplKGlkKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM5Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSByZXNpemVcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczkuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnJlc2l6ZSgpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXM5Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUG9zaXRpb24gY2VsbHMgYXQgc2VsZWN0ZWQgcG9zaXRpb24uXG5cdCAgICAgICAgICogVHJpZ2dlciByZXBvc2l0aW9uIGFmdGVyIHRoZSBzaXplIG9mIGEgY2VsbCBoYXMgYmVlbiBjaGFuZ2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZXBvc2l0aW9uJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVwb3NpdGlvbihpZCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczEwLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSByZXBvc2l0aW9uXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMxMC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucmVwb3NpdGlvbigpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxMC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlLWNvbGxlY3QgYWxsIGNlbGwgZWxlbWVudHMgaW4gYGZsaWNraXR5LXNsaWRlcmAuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbG9hZENlbGxzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVsb2FkQ2VsbHMoaWQpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxMS5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmVsb2FkIGNlbGxzXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMxMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucmVsb2FkQ2VsbHMoKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgYSBGbGlja2l0eSBpbnN0YW5jZSBieSBJRFxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoaWQpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMTIgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxMi5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTIuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgdGhlIGZpcnN0IEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldEZpcnN0Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3QoKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczEzID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIV90aGlzMTMuaW5zdGFuY2VzIHx8IF90aGlzMTMuaW5zdGFuY2VzLmxlbmd0aCA8IDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdObyBpbnN0YW5jZXMgZXhpc3QnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTMuaW5zdGFuY2VzWzBdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgdGhlIEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldEJ5RWxlbWVudCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJ5RWxlbWVudChlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBGbGlja2l0eS5kYXRhKGVsZW1lbnQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpbnN0YW5jZSk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlIG5vdCBmb3VuZCBmb3IgJyArIGVsZW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFByZXBlbmQgZWxlbWVudHMgYW5kIGNyZWF0ZSBjZWxscyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBnYWxsZXJ5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdwcmVwZW5kJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGVuZChpZCwgZWxlbWVudHMpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMTQgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxNC5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUHJlcGVuZCB0aGUgc2xpZGVzXG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMxNC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucHJlcGVuZChlbGVtZW50cyk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczE0Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQXBwZW5kIGVsZW1lbnRzIGFuZCBjcmVhdGUgY2VsbHMgdG8gdGhlIGVuZCBvZiB0aGUgZ2FsbGVyeS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEBwYXJhbSB7Kn0gZWxlbWVudChzKSAtIGpRdWVyeSBvYmplY3QsIEFycmF5IG9mIEVsZW1lbnRzLCBFbGVtZW50LCBvciBOb2RlTGlzdFxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2Vcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnYXBwZW5kJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKGlkLCBlbGVtZW50cykge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMxNSA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczE1Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHNsaWRlc1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMTUuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLmFwcGVuZChlbGVtZW50cyk7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2Vcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczE1Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5zZXJ0IGVsZW1lbnRzIGludG8gdGhlIGdhbGxlcnkgYW5kIGNyZWF0ZSBjZWxscyBhdCB0aGUgZGVzaXJlZCBpbmRleC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEBwYXJhbSB7Kn0gZWxlbWVudChzKSAtIGpRdWVyeSBvYmplY3QsIEFycmF5IG9mIEVsZW1lbnRzLCBFbGVtZW50LCBvciBOb2RlTGlzdFxuXHQgICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBaZXJvIGJhc2VkIGluZGV4XG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdpbnNlcnQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnQoaWQsIGVsZW1lbnRzLCBpbmRleCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMxNiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczE2Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBJbnNlcnQgdGhlIHNsaWRlc1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMTYuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLmluc2VydChlbGVtZW50cywgaW5kZXgpO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxNi5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEdldCB0aGUgZWxlbWVudHMgb2YgdGhlIGNlbGxzXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gY2VsbEVsZW1lbnRzXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldENlbGxFbGVtZW50cycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENlbGxFbGVtZW50cyhpZCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczE3Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGFycmF5IG9mIGNlbGwgZWxlbWVudHNcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczE3Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5nZXRDZWxsRWxlbWVudHMoKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVtb3ZlIGNlbGxzIGJ5IGVsZW1lbnRcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fEVsZW1lbnR9IGVsZW1lbnQocylcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbW92ZScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShpZCwgZWxlbWVudHMpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMTggPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxOC5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMxOC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucmVtb3ZlKGVsZW1lbnRzKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTguaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBjZWxsIGVsZW1lbnRcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuXHQgICAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IHNlbGVjdGVkQ2VsbEVsZW1lbnRcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnc2VsZWN0ZWRFbGVtZW50Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0ZWRFbGVtZW50KGlkKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczE5ID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMTkuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VsZWN0ZWQgZWxlbWVudFxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTkuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnNlbGVjdGVkRWxlbWVudCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjZWxsc1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHJldHVybiB7QXJyYXl9IGNlbGxzXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NlbGxzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2VsbHMoaWQpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMjAgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMyMC5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBjZWxsc1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMjAuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLmNlbGxzKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvL1xuXHQgICAgICAgIC8vIEhlbHBlciBtZXRob2RzXG5cdCAgICAgICAgLy9cblx0XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmQgdGhlIGluZGV4IGZvciBhIEZsaWNraXR5IGluc3RhbmNlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBmbGlja2l0eUluZGV4XG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ19nZXRGbGlja2l0eUluZGV4Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEZsaWNraXR5SW5kZXgoaWQpIHtcblx0ICAgICAgICAgICAgdmFyIGZvdW5kSW5kZXggPSB2b2lkIDA7XG5cdCAgICAgICAgICAgIHZhciBOT1RfRk9VTkQgPSAtMTtcblx0XG5cdCAgICAgICAgICAgIC8vIElmIG5vIGluc3RhbmNlcyBleGlzdFxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzLmxlbmd0aCkge1xuXHRcblx0ICAgICAgICAgICAgICAgIGZvdW5kSW5kZXggPSBOT1RfRk9VTkQ7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBpZiBpbnN0YW5jZXMgZG8gZXhpc3Rcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgSUQgb2YgZWFjaCBpbnN0YW5jZVxuXHQgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UsIGluZGV4KSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0IG1hdGNoZXMgb3VyIElELCBzZXQgdGhlIGluZGV4XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlkID09PSBpZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBmb3VuZEluZGV4O1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQmluZCBhbGwgZXZlbnRzIGZvciBhIG5ldyBpbnN0YW5jZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG5cdCAgICAgICAgICogQHJldHVybiB7Qm9vbH0gaXNGaW5pc2hlZFxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdfYmluZEV2ZW50cycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9iaW5kRXZlbnRzKGlkKSB7XG5cdCAgICAgICAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMjEuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICB2YXIgSUQgPSBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pZDtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc2VsZWN0JywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMjEuJHJvb3RTY29wZS4kZW1pdCgnRmxpY2tpdHk6JyArIElEICsgJzpzZWxlY3QnLCBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc2V0dGxlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMjEuJHJvb3RTY29wZS4kZW1pdCgnRmxpY2tpdHk6JyArIElEICsgJzpzZXR0bGUnLCBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc2Nyb2xsJywgZnVuY3Rpb24gKHByb2dyZXNzLCBwb3NpdGlvblgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6c2Nyb2xsJywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uWDogcG9zaXRpb25YXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignZHJhZ1N0YXJ0JywgZnVuY3Rpb24gKGV2ZW50LCBwb2ludGVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOmRyYWdTdGFydCcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignZHJhZ01vdmUnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6ZHJhZ01vdmUnLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVZlY3RvcjogbW92ZVZlY3RvclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgX3RoaXMyMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ2RyYWdFbmQnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6ZHJhZ0VuZCcsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbigncG9pbnRlckRvd24nLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6cG9pbnRlckRvd24nLCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgX3RoaXMyMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ3BvaW50ZXJNb3ZlJywgZnVuY3Rpb24gKGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOnBvaW50ZXJNb3ZlJywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVWZWN0b3I6IG1vdmVWZWN0b3Jcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdwb2ludGVyVXAnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6cG9pbnRlclVwJywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdzdGF0aWNDbGljaycsIGZ1bmN0aW9uIChldmVudCwgcG9pbnRlciwgY2VsbEVsZW1lbnQsIGNlbGxJbmRleCkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMjEuJHJvb3RTY29wZS4kZW1pdCgnRmxpY2tpdHk6JyArIElEICsgJzpzdGF0aWNDbGljaycsIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsRWxlbWVudDogY2VsbEVsZW1lbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleDogY2VsbEluZGV4XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignbGF6eUxvYWQnLCBmdW5jdGlvbiAoZXZlbnQsIGNlbGxFbGVtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOmxhenlMb2FkJywge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxFbGVtZW50OiBjZWxsRWxlbWVudFxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluZCBhbiBvYmplY3Qgd2l0aGluIGFuIGFycmF5IGJ5IElEXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2Vcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG1hdGNoXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ19maW5kT2JqZWN0QnlJZCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kT2JqZWN0QnlJZChzb3VyY2UsIGlkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzb3VyY2UuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3QpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QuaWQgPT09IGlkO1xuXHQgICAgICAgICAgICB9KVswXTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEZsaWNraXR5U2VydmljZTtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0RmxpY2tpdHlEaXJlY3RpdmUuJGluamVjdCA9IFtcIiR0aW1lb3V0XCIsIFwiRmxpY2tpdHlTZXJ2aWNlXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLkZsaWNraXR5RGlyZWN0aXZlID0gRmxpY2tpdHlEaXJlY3RpdmU7XG5cdFxuXHR2YXIgX2ZsaWNraXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdGZ1bmN0aW9uIEZsaWNraXR5RGlyZWN0aXZlKCR0aW1lb3V0LCBGbGlja2l0eVNlcnZpY2UpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgcHJlTGlua0Z1bmN0aW9uLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkZWxlbWVudFwiLCBcIiRhdHRyc1wiLCBcIiRjb250cm9sbGVyXCJdO1xuXHQgICAgcG9zdExpbmtGdW5jdGlvbi4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgXCIkY29udHJvbGxlclwiXTtcblx0ICAgIHZhciBkaXJlY3RpdmUgPSB7XG5cdCAgICAgICAgcmVzdHJpY3Q6ICdBJyxcblx0ICAgICAgICBzY29wZToge30sXG5cdCAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuXHQgICAgICAgICAgICBiY0ZsaWNraXR5OiAnQD8nLFxuXHQgICAgICAgICAgICBiY0ZsaWNraXR5SWQ6ICdAPydcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICBwcmU6IHByZUxpbmtGdW5jdGlvbixcblx0ICAgICAgICAgICAgICAgIHBvc3Q6IHBvc3RMaW5rRnVuY3Rpb25cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNvbnRyb2xsZXI6IF9mbGlja2l0eS5GbGlja2l0eUNvbnRyb2xsZXIsXG5cdCAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBkaXJlY3RpdmU7XG5cdFxuXHQgICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICAvLyBJZiBubyBJRCB3YXMgcGFzc2VkIGluXG5cdFxuXHQgICAgICAgIGlmICghJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkKSB7XG5cdCAgICAgICAgICAgIC8vIFVzZSB0aGUgZWxlbWVudCdzIElEIGlmIG9uZSBleGlzdHNcblx0ICAgICAgICAgICAgaWYgKCRhdHRycy5pZCkge1xuXHQgICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkID0gJGF0dHJzLmlkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUG9zdCBMaW5rXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHBvc3RMaW5rRnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY29udHJvbGxlcikge1xuXHQgICAgICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIGBjcmVhdGUoKWAgZ2V0cyBwaWNrZWQgdXAgaW4gdGhlIG5leHQgZGlnZXN0IGN5Y2xlXG5cdFxuXHQgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XG5cdCAgICAgICAgICAgIC8vIEluaXRpYWxpemUgRmxpY2tpdHlcblx0ICAgICAgICAgICAgRmxpY2tpdHlTZXJ2aWNlLmNyZWF0ZSgkZWxlbWVudFswXSwgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkLCAkY29udHJvbGxlci5vcHRpb25zKS50aGVuKGZ1bmN0aW9uIChmbGlja2l0eUluc3RhbmNlKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBGbGlja2l0eSBpbnN0YW5jZSBhbmQgSURcblx0ICAgICAgICAgICAgICAgICRjb250cm9sbGVyLkZsaWNraXR5ID0gZmxpY2tpdHlJbnN0YW5jZS5pbnN0YW5jZTtcblx0ICAgICAgICAgICAgICAgICRjb250cm9sbGVyLmJjRmxpY2tpdHlJZCA9IGZsaWNraXR5SW5zdGFuY2UuaWQ7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAvLyBXaGVuIHRoZSBkaXJlY3RpdmUgaXMgYmVpbmcgZGVzdHJveWVkXG5cdCAgICAgICAgdmFyIG9uRGVzdHJveSA9ICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkZXN0cm95IHRoZSBGbGlja2l0eSBpbnN0YW5jZVxuXHQgICAgICAgICAgICBGbGlja2l0eVNlcnZpY2UuZGVzdHJveSgkY29udHJvbGxlci5iY0ZsaWNraXR5SWQpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHR9IC8qIGdsb2JhbCBGbGlja2l0eSAqL1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIEZsaWNraXR5Q29udHJvbGxlciA9IGV4cG9ydHMuRmxpY2tpdHlDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgRmxpY2tpdHlDb250cm9sbGVyLiRpbmplY3QgPSBbXCJGbGlja2l0eUNvbmZpZ1wiXTtcblx0ICAgIGZ1bmN0aW9uIEZsaWNraXR5Q29udHJvbGxlcihGbGlja2l0eUNvbmZpZykge1xuXHQgICAgICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlja2l0eUNvbnRyb2xsZXIpO1xuXHRcblx0ICAgICAgICB0aGlzLkZsaWNraXR5Q29uZmlnID0gRmxpY2tpdHlDb25maWc7XG5cdFxuXHQgICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEZsaWNraXR5Q29udHJvbGxlciwgW3tcblx0ICAgICAgICBrZXk6ICdfYWN0aXZhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWN0aXZhdGUoKSB7XG5cdCAgICAgICAgICAgIC8vIEV4dGVuZCB0aGUgZGVmYXVsdCBvcHRpb25zIHdpdGggdXNlciBjb25maWd1cmF0aW9uXG5cdCAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCB0aGlzLkZsaWNraXR5Q29uZmlnLCBhbmd1bGFyLmZyb21Kc29uKHRoaXMuYmNGbGlja2l0eSB8fCB7fSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gRmxpY2tpdHlDb250cm9sbGVyO1xuXHR9KCk7XG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRGbGlja2l0eU5leHREaXJlY3RpdmUuJGluamVjdCA9IFtcIiRsb2dcIiwgXCIkdGltZW91dFwiLCBcIiRyb290U2NvcGVcIiwgXCJGbGlja2l0eUNvbmZpZ1wiLCBcIkZsaWNraXR5U2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5GbGlja2l0eU5leHREaXJlY3RpdmUgPSBGbGlja2l0eU5leHREaXJlY3RpdmU7XG5cdFxuXHR2YXIgX25leHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXHRcblx0ZnVuY3Rpb24gRmxpY2tpdHlOZXh0RGlyZWN0aXZlKCRsb2csICR0aW1lb3V0LCAkcm9vdFNjb3BlLCBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgIHByZUxpbmtGdW5jdGlvbi4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgXCIkY29udHJvbGxlclwiXTtcblx0ICAgIHZhciBkaXJlY3RpdmUgPSB7XG5cdCAgICAgICAgcmVzdHJpY3Q6ICdBJyxcblx0ICAgICAgICBzY29wZToge30sXG5cdCAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuXHQgICAgICAgICAgICBiY0ZsaWNraXR5TmV4dDogJz0/Jyxcblx0ICAgICAgICAgICAgYmNGbGlja2l0eUlkOiAnQD8nXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKCkge1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgcHJlOiBwcmVMaW5rRnVuY3Rpb25cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNvbnRyb2xsZXI6IF9uZXh0Lk5leHRDb250cm9sbGVyLFxuXHQgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gZGlyZWN0aXZlO1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUHJlIExpbmtcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICAvLyBHZXQgdGhlIElEXG5cdFxuXHQgICAgICAgIHZhciBJRCA9ICRjb250cm9sbGVyLmZsaWNraXR5SWQ7XG5cdFxuXHQgICAgICAgIC8vIERlZmluZSB0aGUgYnJvYWRjYXN0IG5hbWVzIHRvIGxpc3RlbiBmb3Jcblx0ICAgICAgICB2YXIgc2VsZWN0RXZlbnQgPSAnRmxpY2tpdHk6JyArIElEICsgJzpjZWxsU2VsZWN0Jztcblx0ICAgICAgICB2YXIgc2V0dGxlRXZlbnQgPSAnRmxpY2tpdHk6JyArICRjb250cm9sbGVyLmZsaWNraXR5SWQgKyAnOnNldHRsZSc7XG5cdFxuXHQgICAgICAgIC8vIExpc3RlblxuXHQgICAgICAgIHZhciBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuXHQgICAgICAgICAgICBfZGlzYWJsZUJ1dHRvbklmTmVlZGVkKGRhdGEuaW5zdGFuY2UuY2VsbHMubGVuZ3RoLCBkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXggKyAxKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB2YXIgc2V0dGxlID0gJHJvb3RTY29wZS4kb24oc2V0dGxlRXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuXHQgICAgICAgICAgICBfZGlzYWJsZUJ1dHRvbklmTmVlZGVkKGRhdGEuaW5zdGFuY2UuY2VsbHMubGVuZ3RoLCBkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXggKyAxKTtcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgJGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcblx0ICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBjZWxsXG5cdCAgICAgICAgICAgIEZsaWNraXR5U2VydmljZS5uZXh0KCRjb250cm9sbGVyLmZsaWNraXR5SWQsICRjb250cm9sbGVyLndyYXBBcm91bmQpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEaXNhYmxlIGJ1dHRvbiBpZiBuZWVkZWRcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SW50fSBpbmRleFxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgsIGNlbGxDb3VudCkge1xuXHRcblx0ICAgICAgICAgICAgLy8gRGlzYWJsZSBidXR0b24gaWYgYXQgdGhlIGJlZ2lubmluZyBhbmQgd2Ugc2hvdWxkbid0IHdyYXBcblx0ICAgICAgICAgICAgaWYgKCEkY29udHJvbGxlci53cmFwQXJvdW5kICYmIGluZGV4ID09PSBjZWxsQ291bnQpIHtcblx0ICAgICAgICAgICAgICAgICRhdHRycy4kc2V0KCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgJGF0dHJzLiRzZXQoJ2Rpc2FibGVkJywgZmFsc2UpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHR2YXIgTmV4dENvbnRyb2xsZXIgPSBleHBvcnRzLk5leHRDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgTmV4dENvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRsb2dcIiwgXCIkcVwiLCBcIiR0aW1lb3V0XCIsIFwiRmxpY2tpdHlDb25maWdcIiwgXCJGbGlja2l0eVNlcnZpY2VcIl07XG5cdCAgICBmdW5jdGlvbiBOZXh0Q29udHJvbGxlcigkbG9nLCAkcSwgJHRpbWVvdXQsIEZsaWNraXR5Q29uZmlnLCBGbGlja2l0eVNlcnZpY2UpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV4dENvbnRyb2xsZXIpO1xuXHRcblx0ICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXHQgICAgICAgIHRoaXMuJHEgPSAkcTtcblx0ICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG5cdCAgICAgICAgdGhpcy5GbGlja2l0eUNvbmZpZyA9IEZsaWNraXR5Q29uZmlnO1xuXHQgICAgICAgIHRoaXMuRmxpY2tpdHlTZXJ2aWNlID0gRmxpY2tpdHlTZXJ2aWNlO1xuXHRcblx0ICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhOZXh0Q29udHJvbGxlciwgW3tcblx0ICAgICAgICBrZXk6ICdfYWN0aXZhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWN0aXZhdGUoKSB7XG5cdCAgICAgICAgICAgIC8vIEFzc2lnbiBvciBmYWxsIGJhY2sgdG8gZGVmYXVsdFxuXHQgICAgICAgICAgICB0aGlzLndyYXBBcm91bmQgPSB0aGlzLmJjRmxpY2tpdHlOZXh0IHx8IHRoaXMuRmxpY2tpdHlDb25maWcud3JhcEFyb3VuZDtcblx0ICAgICAgICAgICAgdGhpcy5mbGlja2l0eUlkID0gbnVsbDtcblx0XG5cdCAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGFuIElEXG5cdCAgICAgICAgICAgIHRoaXMuX3NldElkKCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTZXQgSUQgdG8gd2hhdCBpcyBkZWZpbmVkLCBmYWxsYmFjayB0byBmaXJzdCBpbnN0YW5jZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBmbGlja2l0eUlkXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ19zZXRJZCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRJZCgpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLiRxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoX3RoaXMuYmNGbGlja2l0eUlkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmxpY2tpdHlJZCA9IF90aGlzLmJjRmxpY2tpdHlJZDtcblx0ICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmZsaWNraXR5SWQpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpcy4kdGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkZsaWNraXR5U2VydmljZS5nZXRGaXJzdCgpLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5mbGlja2l0eUlkID0gaW5zdGFuY2UuaWQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmZsaWNraXR5SWQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRsb2cud2FybihlcnJvcik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBOZXh0Q29udHJvbGxlcjtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0RmxpY2tpdHlQcmV2aW91c0RpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJGxvZ1wiLCBcIiR0aW1lb3V0XCIsIFwiJHJvb3RTY29wZVwiLCBcIkZsaWNraXR5Q29uZmlnXCIsIFwiRmxpY2tpdHlTZXJ2aWNlXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLkZsaWNraXR5UHJldmlvdXNEaXJlY3RpdmUgPSBGbGlja2l0eVByZXZpb3VzRGlyZWN0aXZlO1xuXHRcblx0dmFyIF9wcmV2aW91cyA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cdFxuXHRmdW5jdGlvbiBGbGlja2l0eVByZXZpb3VzRGlyZWN0aXZlKCRsb2csICR0aW1lb3V0LCAkcm9vdFNjb3BlLCBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgIHByZUxpbmtGdW5jdGlvbi4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgXCIkY29udHJvbGxlclwiXTtcblx0ICAgIHZhciBkaXJlY3RpdmUgPSB7XG5cdCAgICAgICAgcmVzdHJpY3Q6ICdBJyxcblx0ICAgICAgICBzY29wZToge30sXG5cdCAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuXHQgICAgICAgICAgICBiY0ZsaWNraXR5UHJldmlvdXM6ICc9PycsXG5cdCAgICAgICAgICAgIGJjRmxpY2tpdHlJZDogJ0A/J1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZSgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHByZTogcHJlTGlua0Z1bmN0aW9uXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjb250cm9sbGVyOiBfcHJldmlvdXMuUHJldmlvdXNDb250cm9sbGVyLFxuXHQgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gZGlyZWN0aXZlO1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogUHJlIExpbmtcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICAvLyBHZXQgdGhlIElEXG5cdFxuXHQgICAgICAgIHZhciBJRCA9ICRjb250cm9sbGVyLmZsaWNraXR5SWQ7XG5cdFxuXHQgICAgICAgIC8vIERlZmluZSB0aGUgYnJvYWRjYXN0IG5hbWVzIHRvIGxpc3RlbiBmb3Jcblx0ICAgICAgICB2YXIgc2VsZWN0RXZlbnQgPSAnRmxpY2tpdHk6JyArIElEICsgJzpjZWxsU2VsZWN0Jztcblx0ICAgICAgICB2YXIgc2V0dGxlRXZlbnQgPSAnRmxpY2tpdHk6JyArICRjb250cm9sbGVyLmZsaWNraXR5SWQgKyAnOnNldHRsZSc7XG5cdFxuXHQgICAgICAgIC8vIExpc3RlblxuXHQgICAgICAgIHZhciBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuXHQgICAgICAgICAgICBfZGlzYWJsZUJ1dHRvbklmTmVlZGVkKGRhdGEuaW5zdGFuY2Uuc2VsZWN0ZWRJbmRleCk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdmFyIHNldHRsZSA9ICRyb290U2NvcGUuJG9uKHNldHRsZUV2ZW50LCBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcblx0ICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXgpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAkZWxlbWVudC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cdFxuXHQgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGNlbGxcblx0ICAgICAgICAgICAgRmxpY2tpdHlTZXJ2aWNlLnByZXZpb3VzKCRjb250cm9sbGVyLmZsaWNraXR5SWQsICRjb250cm9sbGVyLndyYXBBcm91bmQpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEaXNhYmxlIGJ1dHRvbiBpZiBuZWVkZWRcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SW50fSBpbmRleFxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgpIHtcblx0ICAgICAgICAgICAgLy8gRGlzYWJsZSBidXR0b24gaWYgYXQgdGhlIGJlZ2lubmluZyBhbmQgd2Ugc2hvdWxkbid0IHdyYXBcblx0ICAgICAgICAgICAgaWYgKCEkY29udHJvbGxlci53cmFwQXJvdW5kICYmIGluZGV4ID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAkYXR0cnMuJHNldCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICRhdHRycy4kc2V0KCdkaXNhYmxlZCcsIGZhbHNlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIFByZXZpb3VzQ29udHJvbGxlciA9IGV4cG9ydHMuUHJldmlvdXNDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJldmlvdXNDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkbG9nXCIsIFwiJHFcIiwgXCIkdGltZW91dFwiLCBcIkZsaWNraXR5Q29uZmlnXCIsIFwiRmxpY2tpdHlTZXJ2aWNlXCJdO1xuXHQgICAgZnVuY3Rpb24gUHJldmlvdXNDb250cm9sbGVyKCRsb2csICRxLCAkdGltZW91dCwgRmxpY2tpdHlDb25maWcsIEZsaWNraXR5U2VydmljZSkge1xuXHQgICAgICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmV2aW91c0NvbnRyb2xsZXIpO1xuXHRcblx0ICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXHQgICAgICAgIHRoaXMuJHEgPSAkcTtcblx0ICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG5cdCAgICAgICAgdGhpcy5GbGlja2l0eUNvbmZpZyA9IEZsaWNraXR5Q29uZmlnO1xuXHQgICAgICAgIHRoaXMuRmxpY2tpdHlTZXJ2aWNlID0gRmxpY2tpdHlTZXJ2aWNlO1xuXHRcblx0ICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhQcmV2aW91c0NvbnRyb2xsZXIsIFt7XG5cdCAgICAgICAga2V5OiAnX2FjdGl2YXRlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FjdGl2YXRlKCkge1xuXHQgICAgICAgICAgICAvLyBBc3NpZ24gb3IgZmFsbCBiYWNrIHRvIGRlZmF1bHRcblx0ICAgICAgICAgICAgdGhpcy53cmFwQXJvdW5kID0gdGhpcy5iY0ZsaWNraXR5UHJldmlvdXMgfHwgdGhpcy5GbGlja2l0eUNvbmZpZy53cmFwQXJvdW5kO1xuXHQgICAgICAgICAgICB0aGlzLmZsaWNraXR5SWQgPSBudWxsO1xuXHRcblx0ICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYW4gSURcblx0ICAgICAgICAgICAgdGhpcy5fc2V0SWQoKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNldCBJRCB0byB3aGF0IGlzIGRlZmluZWQsIGZhbGxiYWNrIHRvIGZpcnN0IGluc3RhbmNlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGZsaWNraXR5SWRcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX3NldElkJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldElkKCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXHRcblx0ICAgICAgICAgICAgICAgIGlmIChfdGhpcy5iY0ZsaWNraXR5SWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpcy5mbGlja2l0eUlkID0gX3RoaXMuYmNGbGlja2l0eUlkO1xuXHQgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZmxpY2tpdHlJZCk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzLiR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuRmxpY2tpdHlTZXJ2aWNlLmdldEZpcnN0KCkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmZsaWNraXR5SWQgPSBpbnN0YW5jZS5pZDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZmxpY2tpdHlJZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGxvZy53YXJuKGVycm9yKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIFByZXZpb3VzQ29udHJvbGxlcjtcblx0fSgpO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogYW5ndWxhci1mbGlja2l0eS5taW4uanNcbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIGJiZTY2MWNiN2QzZTlhMThiODExXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2ZsaWNraXR5ID0gcmVxdWlyZSgnLi9mbGlja2l0eS5wcm92aWRlcicpO1xuXG52YXIgX2ZsaWNraXR5MiA9IHJlcXVpcmUoJy4vZmxpY2tpdHkuc2VydmljZScpO1xuXG52YXIgX2ZsaWNraXR5MyA9IHJlcXVpcmUoJy4vZmxpY2tpdHkuZGlyZWN0aXZlJyk7XG5cbnZhciBfZmxpY2tpdHlOZXh0ID0gcmVxdWlyZSgnLi9uZXh0L2ZsaWNraXR5TmV4dC5kaXJlY3RpdmUnKTtcblxudmFyIF9mbGlja2l0eVByZXZpb3VzID0gcmVxdWlyZSgnLi9wcmV2aW91cy9mbGlja2l0eVByZXZpb3VzLmRpcmVjdGl2ZScpO1xuXG5hbmd1bGFyLm1vZHVsZSgnYmMuRmxpY2tpdHknLCBbXSkucHJvdmlkZXIoJ0ZsaWNraXR5Q29uZmlnJywgX2ZsaWNraXR5LkZsaWNraXR5Q29uZmlnUHJvdmlkZXIpLnNlcnZpY2UoJ0ZsaWNraXR5U2VydmljZScsIF9mbGlja2l0eTIuRmxpY2tpdHlTZXJ2aWNlKS5kaXJlY3RpdmUoJ2JjRmxpY2tpdHknLCBfZmxpY2tpdHkzLkZsaWNraXR5RGlyZWN0aXZlKS5kaXJlY3RpdmUoJ2JjRmxpY2tpdHlOZXh0JywgX2ZsaWNraXR5TmV4dC5GbGlja2l0eU5leHREaXJlY3RpdmUpLmRpcmVjdGl2ZSgnYmNGbGlja2l0eVByZXZpb3VzJywgX2ZsaWNraXR5UHJldmlvdXMuRmxpY2tpdHlQcmV2aW91c0RpcmVjdGl2ZSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvaW5kZXguanNcbiAqKi8iLCJpbXBvcnQgeyBGbGlja2l0eUNvbmZpZ1Byb3ZpZGVyIH0gZnJvbSAnLi9mbGlja2l0eS5wcm92aWRlcidcbmltcG9ydCB7IEZsaWNraXR5U2VydmljZSB9IGZyb20gJy4vZmxpY2tpdHkuc2VydmljZSc7XG5pbXBvcnQgeyBGbGlja2l0eURpcmVjdGl2ZSB9IGZyb20gJy4vZmxpY2tpdHkuZGlyZWN0aXZlJztcbmltcG9ydCB7IEZsaWNraXR5TmV4dERpcmVjdGl2ZSB9IGZyb20gJy4vbmV4dC9mbGlja2l0eU5leHQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEZsaWNraXR5UHJldmlvdXNEaXJlY3RpdmUgfSBmcm9tICcuL3ByZXZpb3VzL2ZsaWNraXR5UHJldmlvdXMuZGlyZWN0aXZlJztcblxuYW5ndWxhci5tb2R1bGUoJ2JjLkZsaWNraXR5JywgW10pXG4gICAgLnByb3ZpZGVyKCdGbGlja2l0eUNvbmZpZycsIEZsaWNraXR5Q29uZmlnUHJvdmlkZXIpXG4gICAgLnNlcnZpY2UoJ0ZsaWNraXR5U2VydmljZScsIEZsaWNraXR5U2VydmljZSlcbiAgICAuZGlyZWN0aXZlKCdiY0ZsaWNraXR5JywgRmxpY2tpdHlEaXJlY3RpdmUpXG4gICAgLmRpcmVjdGl2ZSgnYmNGbGlja2l0eU5leHQnLCBGbGlja2l0eU5leHREaXJlY3RpdmUpXG4gICAgLmRpcmVjdGl2ZSgnYmNGbGlja2l0eVByZXZpb3VzJywgRmxpY2tpdHlQcmV2aW91c0RpcmVjdGl2ZSlcbjtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvaW5kZXguanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEZsaWNraXR5Q29uZmlnUHJvdmlkZXIgPSBleHBvcnRzLkZsaWNraXR5Q29uZmlnUHJvdmlkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmxpY2tpdHlDb25maWdQcm92aWRlcigpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZsaWNraXR5Q29uZmlnUHJvdmlkZXIpO1xuXG4gICAgICAgIC8vIERlZmluZSBGbGlja2l0eSBkZWZhdWx0c1xuICAgICAgICB0aGlzLmFjY2Vzc2liaWxpdHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkYXB0aXZlSGVpZ2h0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXV0b1BsYXkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jZWxsQWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgdGhpcy5jZWxsU2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29udGFpbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuZHJhZ1RocmVzaG9sZCA9IDM7XG4gICAgICAgIHRoaXMuZnJlZVNjcm9sbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZWVTY3JvbGxGcmljdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQXR0cmFjdGlvbiA9IC4wMjU7XG4gICAgICAgIHRoaXMuZnJpY3Rpb24gPSAuMjg7XG4gICAgICAgIHRoaXMuZ3JvdXBDZWxscyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluaXRpYWxJbmRleCA9IDA7XG4gICAgICAgIHRoaXMubGF6eUxvYWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlcmNlbnRQb3NpdGlvbiA9IHRydWU7XG4gICAgICAgIHRoaXMucHJldk5leHRCdXR0b25zID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYWdlRG90cyA9IHRydWU7XG4gICAgICAgIHRoaXMucmVzaXplID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yaWdodFRvTGVmdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNldEdhbGxlcnlTaXplID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53YXRjaENTUyA9IGZhbHNlO1xuICAgICAgICB0aGlzLndyYXBBcm91bmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmFzTmF2Rm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRmxpY2tpdHlDb25maWdQcm92aWRlciwgW3tcbiAgICAgICAga2V5OiAnJGdldCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAkZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRmxpY2tpdHlDb25maWdQcm92aWRlcjtcbn0oKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9mbGlja2l0eS5wcm92aWRlci5qc1xuICoqLyIsImV4cG9ydCBjbGFzcyBGbGlja2l0eUNvbmZpZ1Byb3ZpZGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBEZWZpbmUgRmxpY2tpdHkgZGVmYXVsdHNcbiAgICAgICAgdGhpcy5hY2Nlc3NpYmlsaXR5ICAgICAgPSB0cnVlO1xuICAgICAgICB0aGlzLmFkYXB0aXZlSGVpZ2h0ICAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLmF1dG9QbGF5ICAgICAgICAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNlbGxBbGlnbiAgICAgICAgICA9ICdjZW50ZXInO1xuICAgICAgICB0aGlzLmNlbGxTZWxlY3RvciAgICAgICA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb250YWluICAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGUgICAgICAgICAgPSB0cnVlO1xuICAgICAgICB0aGlzLmRyYWdUaHJlc2hvbGQgICAgICA9IDM7XG4gICAgICAgIHRoaXMuZnJlZVNjcm9sbCAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZnJlZVNjcm9sbEZyaWN0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBdHRyYWN0aW9uID0gLjAyNTtcbiAgICAgICAgdGhpcy5mcmljdGlvbiAgICAgICAgICAgPSAuMjg7XG4gICAgICAgIHRoaXMuZ3JvdXBDZWxscyAgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5pdGlhbEluZGV4ICAgICAgID0gMDtcbiAgICAgICAgdGhpcy5sYXp5TG9hZCAgICAgICAgICAgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlcmNlbnRQb3NpdGlvbiAgICA9IHRydWU7XG4gICAgICAgIHRoaXMucHJldk5leHRCdXR0b25zICAgID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYWdlRG90cyAgICAgICAgICAgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlc2l6ZSAgICAgICAgICAgICA9IHRydWU7XG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgICAgICAgID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0R2FsbGVyeVNpemUgICAgID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53YXRjaENTUyAgICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53cmFwQXJvdW5kICAgICAgICAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgICAgICAgPSB0cnVlO1xuICAgICAgICB0aGlzLmFzTmF2Rm9yICAgICAgICAgICA9IHRydWU7XG4gICAgfVxuXG5cblxuXG4gICAgJGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvZmxpY2tpdHkucHJvdmlkZXIuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLy9pbXBvcnQgRmxpY2tpdHkgZnJvbSAnZmxpY2tpdHknO1xuLyogZ2xvYmFsIEZsaWNraXR5ICovXG52YXIgRmxpY2tpdHlTZXJ2aWNlID0gZXhwb3J0cy5GbGlja2l0eVNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmxpY2tpdHlTZXJ2aWNlKCR0aW1lb3V0LCAkcSwgJHJvb3RTY29wZSwgJGxvZykge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlja2l0eVNlcnZpY2UpO1xuXG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEZsaWNraXR5IGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cblxuXG4gICAgX2NyZWF0ZUNsYXNzKEZsaWNraXR5U2VydmljZSwgW3tcbiAgICAgICAga2V5OiAnY3JlYXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShlbGVtZW50LCBpZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBubyBJRCB3YXMgcGFzc2VkIGluXG4gICAgICAgICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBlbGVtZW50J3MgSUQgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGVsZW1lbnQuaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGFzc2lnbiBhIG5ldyBJRFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBfdGhpcy5pbnN0YW5jZXMubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgSUQgaXMgYWxyZWFkeSBpbiB1c2VcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbmRPYmplY3RCeUlkKF90aGlzLmluc3RhbmNlcywgaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGxvZy5lcnJvcignVGhpcyBJRCBpcyBhbHJlYWR5IGluIHVzZTogJywgX3RoaXMuaW5zdGFuY2VzW2luZGV4XSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IG5ldyBGbGlja2l0eShlbGVtZW50LCBvcHRpb25zKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoaXMgaW5zdGFuY2UgdG8gdGhlIGFycmF5XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmluZCB0byBhbGwgZXZlbnRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9iaW5kRXZlbnRzKGlkKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVzdHJveSBhIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkZXN0cm95JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koaWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMyLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERlc3Ryb3kgdGhlIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICAgICAgICAgICAgX3RoaXMyLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGFycmF5XG4gICAgICAgICAgICAgICAgX3RoaXMyLmluc3RhbmNlcy5zcGxpY2UoZmxpY2tpdHlJbmRleCwgMSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgnSW5zdGFuY2UgJyArIGlkICsgJyBkZXN0cm95ZWQuJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gYWxsIGluc3RhbmNlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gaW5zdGFuY2VzXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXRBbGwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpczMuaW5zdGFuY2VzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdmUgdG8gdGhlIG5leHQgc2xpZGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNJbnN0YW50XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ25leHQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dChpZCwgaXNXcmFwcGVkLCBpc0luc3RhbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM0Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgc2xpZGVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5uZXh0KGlzV3JhcHBlZCwgaXNJbnN0YW50KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzNC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vdmUgdG8gdGhlIHByZXZpb3VzIHNsaWRlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzV3JhcHBlZFxuICAgICAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzSW5zdGFudFxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmV2aW91cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmV2aW91cyhpZCwgaXNXcmFwcGVkLCBpc0luc3RhbnQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM1Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHByZXZpb3VzIHNsaWRlXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucHJldmlvdXMoaXNXcmFwcGVkLCBpc0luc3RhbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXM1Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2VsZWN0IGEgc2xpZGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXhcbiAgICAgICAgICogQHBhcmFtIHtCb29sfSBpc1dyYXBwZWRcbiAgICAgICAgICogQHBhcmFtIHtCb29sfSBpc0luc3RhbnRcbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2VsZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdChpZCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgaXNXcmFwcGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpc0luc3RhbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM2Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHNlbGVjdGVkIHNsaWRlXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNi5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uuc2VsZWN0KGluZGV4LCBpc1dyYXBwZWQsIGlzSW5zdGFudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczYuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWxlY3QgYSBzbGlkZSBvZiBhIGNlbGxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IHZhbHVlXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG4gICAgICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNJbnN0YW50XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NlbGVjdENlbGwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0Q2VsbChpZCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgaXNXcmFwcGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpc0luc3RhbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM3Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIHNlbGVjdGVkIHNsaWRlXG4gICAgICAgICAgICAgICAgICAgIF90aGlzNy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uuc2VsZWN0Q2VsbCh2YWx1ZSwgaXNXcmFwcGVkLCBpc0luc3RhbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXM3Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBjdXJyZW50IHNsaWRlIGluZGV4XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBzZWxlY3RlZEluZGV4XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZWxlY3RlZEluZGV4JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdGVkSW5kZXgoaWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXM4Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3VycmVudCBpbmRleFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczguaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2l6ZSB0aGUgZ2FsbGVyeSBhbmQgcmUtcG9zaXRpb24gY2VsbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXNpemUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzaXplKGlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzOS5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSByZXNpemVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM5Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5yZXNpemUoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzOS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvc2l0aW9uIGNlbGxzIGF0IHNlbGVjdGVkIHBvc2l0aW9uLlxuICAgICAgICAgKiBUcmlnZ2VyIHJlcG9zaXRpb24gYWZ0ZXIgdGhlIHNpemUgb2YgYSBjZWxsIGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdyZXBvc2l0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcG9zaXRpb24oaWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMTAuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aGUgcmVwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBfdGhpczEwLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5yZXBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczEwLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmUtY29sbGVjdCBhbGwgY2VsbCBlbGVtZW50cyBpbiBgZmxpY2tpdHktc2xpZGVyYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbG9hZENlbGxzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbG9hZENlbGxzKGlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczExLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbG9hZCBjZWxsc1xuICAgICAgICAgICAgICAgICAgICBfdGhpczExLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5yZWxvYWRDZWxscygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIEZsaWNraXR5IGluc3RhbmNlIGJ5IElEXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczEyLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxMi5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgZmlyc3QgRmxpY2tpdHkgaW5zdGFuY2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0Rmlyc3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rmlyc3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpczEzLmluc3RhbmNlcyB8fCBfdGhpczEzLmluc3RhbmNlcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ05vIGluc3RhbmNlcyBleGlzdCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxMy5pbnN0YW5jZXNbMF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgRmxpY2tpdHkgaW5zdGFuY2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2dldEJ5RWxlbWVudCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCeUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBGbGlja2l0eS5kYXRhKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlIG5vdCBmb3VuZCBmb3IgJyArIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByZXBlbmQgZWxlbWVudHMgYW5kIGNyZWF0ZSBjZWxscyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBnYWxsZXJ5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3ByZXBlbmQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcGVuZChpZCwgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMTQuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJlcGVuZCB0aGUgc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTQuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnByZXBlbmQoZWxlbWVudHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxNC5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGVuZCBlbGVtZW50cyBhbmQgY3JlYXRlIGNlbGxzIHRvIHRoZSBlbmQgb2YgdGhlIGdhbGxlcnkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcGFyYW0geyp9IGVsZW1lbnQocykgLSBqUXVlcnkgb2JqZWN0LCBBcnJheSBvZiBFbGVtZW50cywgRWxlbWVudCwgb3IgTm9kZUxpc3RcbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYXBwZW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZChpZCwgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczE1ID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMTUuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMxNS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UuYXBwZW5kKGVsZW1lbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTUuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgZWxlbWVudHMgaW50byB0aGUgZ2FsbGVyeSBhbmQgY3JlYXRlIGNlbGxzIGF0IHRoZSBkZXNpcmVkIGluZGV4LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gaW5kZXggLSBaZXJvIGJhc2VkIGluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2luc2VydCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnQoaWQsIGVsZW1lbnRzLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxNi5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbnNlcnQgdGhlIHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICBfdGhpczE2Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5pbnNlcnQoZWxlbWVudHMsIGluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzMTYuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgdGhlIGVsZW1lbnRzIG9mIHRoZSBjZWxsc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IGNlbGxFbGVtZW50c1xuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0Q2VsbEVsZW1lbnRzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENlbGxFbGVtZW50cyhpZCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMTcgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBmbGlja2l0eUluZGV4ID0gX3RoaXMxNy5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGFycmF5IG9mIGNlbGwgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMxNy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UuZ2V0Q2VsbEVsZW1lbnRzKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBjZWxscyBieSBlbGVtZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdHxBcnJheXxFbGVtZW50fSBlbGVtZW50KHMpXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbW92ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoaWQsIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczE4Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMTguaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnJlbW92ZShlbGVtZW50cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczE4Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgY2VsbCBlbGVtZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSBzZWxlY3RlZENlbGxFbGVtZW50XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZWxlY3RlZEVsZW1lbnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0ZWRFbGVtZW50KGlkKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMxOSA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGZsaWNraXR5SW5kZXggPSBfdGhpczE5Ll9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VsZWN0ZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczE5Lmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5zZWxlY3RlZEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhbiBhcnJheSBvZiBhbGwgY2VsbHNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjZWxsc1xuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2VsbHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2VsbHMoaWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIwID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMjAuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBjZWxsc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpczIwLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5jZWxscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL1xuICAgICAgICAvLyBIZWxwZXIgbWV0aG9kc1xuICAgICAgICAvL1xuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgdGhlIGluZGV4IGZvciBhIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBmbGlja2l0eUluZGV4XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfZ2V0RmxpY2tpdHlJbmRleCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RmxpY2tpdHlJbmRleChpZCkge1xuICAgICAgICAgICAgdmFyIGZvdW5kSW5kZXggPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgTk9UX0ZPVU5EID0gLTE7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGluc3RhbmNlcyBleGlzdFxuICAgICAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgICAgIGZvdW5kSW5kZXggPSBOT1RfRk9VTkQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGlmIGluc3RhbmNlcyBkbyBleGlzdFxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIElEIG9mIGVhY2ggaW5zdGFuY2VcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSwgaW5kZXgpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCBtYXRjaGVzIG91ciBJRCwgc2V0IHRoZSBpbmRleFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQmluZCBhbGwgZXZlbnRzIGZvciBhIG5ldyBpbnN0YW5jZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgICAgICogQHJldHVybiB7Qm9vbH0gaXNGaW5pc2hlZFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnX2JpbmRFdmVudHMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRFdmVudHMoaWQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmxpY2tpdHlJbmRleCA9IF90aGlzMjEuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgSUQgPSBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pZDtcblxuICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdzZWxlY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMjEuJHJvb3RTY29wZS4kZW1pdCgnRmxpY2tpdHk6JyArIElEICsgJzpzZWxlY3QnLCBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc2V0dGxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6c2V0dGxlJywgX3RoaXMyMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMyMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ3Njcm9sbCcsIGZ1bmN0aW9uIChwcm9ncmVzcywgcG9zaXRpb25YKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMjEuJHJvb3RTY29wZS4kZW1pdCgnRmxpY2tpdHk6JyArIElEICsgJzpzY3JvbGwnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblg6IHBvc2l0aW9uWFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdkcmFnU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOmRyYWdTdGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignZHJhZ01vdmUnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIsIG1vdmVWZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOmRyYWdNb3ZlJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVWZWN0b3I6IG1vdmVWZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignZHJhZ0VuZCcsIGZ1bmN0aW9uIChldmVudCwgcG9pbnRlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6ZHJhZ0VuZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbigncG9pbnRlckRvd24nLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOnBvaW50ZXJEb3duJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlclxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdwb2ludGVyTW92ZScsIGZ1bmN0aW9uIChldmVudCwgcG9pbnRlciwgbW92ZVZlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6cG9pbnRlck1vdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVZlY3RvcjogbW92ZVZlY3RvclxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIF90aGlzMjEuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdwb2ludGVyVXAnLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOnBvaW50ZXJVcCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpczIxLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc3RhdGljQ2xpY2snLCBmdW5jdGlvbiAoZXZlbnQsIHBvaW50ZXIsIGNlbGxFbGVtZW50LCBjZWxsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyMS4kcm9vdFNjb3BlLiRlbWl0KCdGbGlja2l0eTonICsgSUQgKyAnOnN0YXRpY0NsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxFbGVtZW50OiBjZWxsRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleDogY2VsbEluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMyMS5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ2xhenlMb2FkJywgZnVuY3Rpb24gKGV2ZW50LCBjZWxsRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIxLiRyb290U2NvcGUuJGVtaXQoJ0ZsaWNraXR5OicgKyBJRCArICc6bGF6eUxvYWQnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsRWxlbWVudDogY2VsbEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpbmQgYW4gb2JqZWN0IHdpdGhpbiBhbiBhcnJheSBieSBJRFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2VcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gbWF0Y2hcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19maW5kT2JqZWN0QnlJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZE9iamVjdEJ5SWQoc291cmNlLCBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5maWx0ZXIoZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QuaWQgPT09IGlkO1xuICAgICAgICAgICAgfSlbMF07XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRmxpY2tpdHlTZXJ2aWNlO1xufSgpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2ZsaWNraXR5LnNlcnZpY2UuanNcbiAqKi8iLCIvL2ltcG9ydCBGbGlja2l0eSBmcm9tICdmbGlja2l0eSc7XG4vKiBnbG9iYWwgRmxpY2tpdHkgKi9cbmV4cG9ydCBjbGFzcyBGbGlja2l0eVNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICR0aW1lb3V0LCAkcSwgJHJvb3RTY29wZSwgJGxvZ1xuICAgICkge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gW107XG5cbiAgICB9XG5cblxuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRmxpY2tpdHkgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNyZWF0ZShlbGVtZW50LCBpZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgbm8gSUQgd2FzIHBhc3NlZCBpblxuICAgICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgZWxlbWVudCdzIElEIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICBpZCA9IGVsZW1lbnQuaWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBhc3NpZ24gYSBuZXcgSURcbiAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLmluc3RhbmNlcy5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBJRCBpcyBhbHJlYWR5IGluIHVzZVxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbmRPYmplY3RCeUlkKHRoaXMuaW5zdGFuY2VzLCBpZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuJGxvZy5lcnJvcignVGhpcyBJRCBpcyBhbHJlYWR5IGluIHVzZTogJywgdGhpcy5pbnN0YW5jZXNbaW5kZXhdKTtcblxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZpbmUgdGhlIG5ldyBpbnN0YW5jZVxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiBuZXcgRmxpY2tpdHkoZWxlbWVudCwgb3B0aW9ucyksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBTYXZlIHRoaXMgaW5zdGFuY2UgdG8gdGhlIGFycmF5XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcblxuICAgICAgICAgICAgLy8gQmluZCB0byBhbGwgZXZlbnRzXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZEV2ZW50cyhpZCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveSBhIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICovXG4gICAgZGVzdHJveShpZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXN0cm95IHRoZSBGbGlja2l0eSBpbnN0YW5jZVxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGFycmF5XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zcGxpY2UoZmxpY2tpdHlJbmRleCwgMSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCdJbnN0YW5jZSAnICsgaWQgKyAnIGRlc3Ryb3llZC4nKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYWxsIGluc3RhbmNlc1xuICAgICAqXG4gICAgICogQHJldHVybiB7QXJyYXl9IGluc3RhbmNlc1xuICAgICAqL1xuICAgIGdldEFsbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5pbnN0YW5jZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdG8gdGhlIG5leHQgc2xpZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG4gICAgICogQHBhcmFtIHtCb29sfSBpc0luc3RhbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICovXG4gICAgbmV4dChpZCwgaXNXcmFwcGVkLCBpc0luc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBzbGlkZVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm5leHQoaXNXcmFwcGVkLCBpc0luc3RhbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRvIHRoZSBwcmV2aW91cyBzbGlkZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gICAgICogQHBhcmFtIHtCb29sfSBpc1dyYXBwZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzSW5zdGFudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBwcmV2aW91cyhpZCwgaXNXcmFwcGVkLCBpc0luc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgcHJldmlvdXMgc2xpZGVcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5wcmV2aW91cyhpc1dyYXBwZWQsIGlzSW5zdGFudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNlbGVjdCBhIHNsaWRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGluZGV4XG4gICAgICogQHBhcmFtIHtCb29sfSBpc1dyYXBwZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2x9IGlzSW5zdGFudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBzZWxlY3QoaWQsIGluZGV4LCBpc1dyYXBwZWQgPSBmYWxzZSwgaXNJbnN0YW50ID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgc2VsZWN0ZWQgc2xpZGVcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5zZWxlY3QoaW5kZXgsIGlzV3JhcHBlZCwgaXNJbnN0YW50KTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0IGEgc2xpZGUgb2YgYSBjZWxsXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ8U3RyaW5nfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbH0gaXNXcmFwcGVkXG4gICAgICogQHBhcmFtIHtCb29sfSBpc0luc3RhbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICovXG4gICAgc2VsZWN0Q2VsbChpZCwgdmFsdWUsIGlzV3JhcHBlZCA9IGZhbHNlLCBpc0luc3RhbnQgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBzZWxlY3RlZCBzbGlkZVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnNlbGVjdENlbGwodmFsdWUsIGlzV3JhcHBlZCwgaXNJbnN0YW50KTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHNsaWRlIGluZGV4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBzZWxlY3RlZEluZGV4XG4gICAgICovXG4gICAgc2VsZWN0ZWRJbmRleChpZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGN1cnJlbnQgaW5kZXhcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhlIGdhbGxlcnkgYW5kIHJlLXBvc2l0aW9uIGNlbGxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlc2l6ZShpZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSByZXNpemVcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5yZXNpemUoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gY2VsbHMgYXQgc2VsZWN0ZWQgcG9zaXRpb24uXG4gICAgICogVHJpZ2dlciByZXBvc2l0aW9uIGFmdGVyIHRoZSBzaXplIG9mIGEgY2VsbCBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlcG9zaXRpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aGUgcmVwb3NpdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnJlcG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmUtY29sbGVjdCBhbGwgY2VsbCBlbGVtZW50cyBpbiBgZmxpY2tpdHktc2xpZGVyYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICByZWxvYWRDZWxscyhpZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZWxvYWQgY2VsbHNcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5yZWxvYWRDZWxscygpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBGbGlja2l0eSBpbnN0YW5jZSBieSBJRFxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGdldChpZCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmxpY2tpdHlJbmRleCA9IHRoaXMuX2dldEZsaWNraXR5SW5kZXgoaWQpO1xuXG4gICAgICAgICAgICBpZiAoZmxpY2tpdHlJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdJbnN0YW5jZSAnICsgaWQgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmlyc3QgRmxpY2tpdHkgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBnZXRGaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZXMgfHwgdGhpcy5pbnN0YW5jZXMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ05vIGluc3RhbmNlcyBleGlzdCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy5pbnN0YW5jZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgRmxpY2tpdHkgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBnZXRCeUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBGbGlja2l0eS5kYXRhKGVsZW1lbnQpXG5cbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpbnN0YW5jZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlIG5vdCBmb3VuZCBmb3IgJyArIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFByZXBlbmQgZWxlbWVudHMgYW5kIGNyZWF0ZSBjZWxscyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBnYWxsZXJ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIHByZXBlbmQoaWQsIGVsZW1lbnRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmbGlja2l0eUluZGV4ID0gdGhpcy5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cbiAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFByZXBlbmQgdGhlIHNsaWRlc1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnByZXBlbmQoZWxlbWVudHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmQgZWxlbWVudHMgYW5kIGNyZWF0ZSBjZWxscyB0byB0aGUgZW5kIG9mIHRoZSBnYWxsZXJ5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGFwcGVuZChpZCwgZWxlbWVudHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBzbGlkZXNcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5hcHBlbmQoZWxlbWVudHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgZWxlbWVudHMgaW50byB0aGUgZ2FsbGVyeSBhbmQgY3JlYXRlIGNlbGxzIGF0IHRoZSBkZXNpcmVkIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHBhcmFtIHsqfSBlbGVtZW50KHMpIC0galF1ZXJ5IG9iamVjdCwgQXJyYXkgb2YgRWxlbWVudHMsIEVsZW1lbnQsIG9yIE5vZGVMaXN0XG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpbmRleCAtIFplcm8gYmFzZWQgaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlXG4gICAgICovXG4gICAgaW5zZXJ0KGlkLCBlbGVtZW50cywgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHRoZSBzbGlkZXNcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5pbnNlcnQoZWxlbWVudHMsIGluZGV4KTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBlbGVtZW50cyBvZiB0aGUgY2VsbHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge0FycmF5fSBjZWxsRWxlbWVudHNcbiAgICAgKi9cbiAgICBnZXRDZWxsRWxlbWVudHMoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBjZWxsIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UuZ2V0Q2VsbEVsZW1lbnRzKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjZWxscyBieSBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcGFyYW0ge09iamVjdHxBcnJheXxFbGVtZW50fSBlbGVtZW50KHMpXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlbW92ZShpZCwgZWxlbWVudHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2UucmVtb3ZlKGVsZW1lbnRzKTtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgY2VsbCBlbGVtZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJuIHtFbGVtZW50fSBzZWxlY3RlZENlbGxFbGVtZW50XG4gICAgICovXG4gICAgc2VsZWN0ZWRFbGVtZW50KGlkKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmbGlja2l0eUluZGV4ID0gdGhpcy5fZ2V0RmxpY2tpdHlJbmRleChpZCk7XG5cbiAgICAgICAgICAgIGlmIChmbGlja2l0eUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0luc3RhbmNlICcgKyBpZCArICcgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VsZWN0ZWQgZWxlbWVudFxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLnNlbGVjdGVkRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IGFuIGFycmF5IG9mIGFsbCBjZWxsc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7QXJyYXl9IGNlbGxzXG4gICAgICovXG4gICAgY2VsbHMoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnSW5zdGFuY2UgJyArIGlkICsgJyBub3QgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBjZWxsc1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLmNlbGxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG5cblxuICAgIC8vXG4gICAgLy8gSGVscGVyIG1ldGhvZHNcbiAgICAvL1xuXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIHRoZSBpbmRleCBmb3IgYSBGbGlja2l0eSBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gICAgICogQHJldHVybiB7SW50ZWdlcn0gZmxpY2tpdHlJbmRleFxuICAgICAqL1xuICAgIF9nZXRGbGlja2l0eUluZGV4KGlkKSB7XG4gICAgICAgIGxldCBmb3VuZEluZGV4O1xuICAgICAgICBjb25zdCBOT1RfRk9VTkQgPSAtMTtcblxuICAgICAgICAvLyBJZiBubyBpbnN0YW5jZXMgZXhpc3RcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlcy5sZW5ndGgpIHtcblxuICAgICAgICAgICAgZm91bmRJbmRleCA9IE5PVF9GT1VORDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgaW5zdGFuY2VzIGRvIGV4aXN0XG5cbiAgICAgICAgICAgIC8vIENoZWNrIHRoZSBJRCBvZiBlYWNoIGluc3RhbmNlXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSwgaW5kZXgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIElmIGl0IG1hdGNoZXMgb3VyIElELCBzZXQgdGhlIGluZGV4XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXg7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBCaW5kIGFsbCBldmVudHMgZm9yIGEgbmV3IGluc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICAgKiBAcmV0dXJuIHtCb29sfSBpc0ZpbmlzaGVkXG4gICAgICovXG4gICAgX2JpbmRFdmVudHMoaWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsaWNraXR5SW5kZXggPSB0aGlzLl9nZXRGbGlja2l0eUluZGV4KGlkKTtcblxuICAgICAgICAgICAgaWYgKGZsaWNraXR5SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBJRCA9IHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmlkO1xuXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc2VsZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3RTY29wZS4kZW1pdChgRmxpY2tpdHk6JHtJRH06c2VsZWN0YCwgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdzZXR0bGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpzZXR0bGVgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ3Njcm9sbCcsIChwcm9ncmVzcywgcG9zaXRpb25YKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpzY3JvbGxgLCB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25YOiBwb3NpdGlvblgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ2RyYWdTdGFydCcsIChldmVudCwgcG9pbnRlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3RTY29wZS4kZW1pdChgRmxpY2tpdHk6JHtJRH06ZHJhZ1N0YXJ0YCwge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ2RyYWdNb3ZlJywgKGV2ZW50LCBwb2ludGVyLCBtb3ZlVmVjdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpkcmFnTW92ZWAsIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlVmVjdG9yOiBtb3ZlVmVjdG9yLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdkcmFnRW5kJywgKGV2ZW50LCBwb2ludGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpkcmFnRW5kYCwge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXNbZmxpY2tpdHlJbmRleF0uaW5zdGFuY2Uub24oJ3BvaW50ZXJEb3duJywgKGV2ZW50LCBwb2ludGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpwb2ludGVyRG93bmAsIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzW2ZsaWNraXR5SW5kZXhdLmluc3RhbmNlLm9uKCdwb2ludGVyTW92ZScsKGV2ZW50LCBwb2ludGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZVZlY3RvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3RTY29wZS4kZW1pdChgRmxpY2tpdHk6JHtJRH06cG9pbnRlck1vdmVgLCB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICAgICAgICAgICAgbW92ZVZlY3RvcjogbW92ZVZlY3RvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbigncG9pbnRlclVwJywgKGV2ZW50LCBwb2ludGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpwb2ludGVyVXBgLCB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignc3RhdGljQ2xpY2snLCAoZXZlbnQsIHBvaW50ZXIsIGNlbGxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJHJvb3RTY29wZS4kZW1pdChgRmxpY2tpdHk6JHtJRH06c3RhdGljQ2xpY2tgLCB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICAgICAgICAgICAgY2VsbEVsZW1lbnQ6IGNlbGxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBjZWxsSW5kZXg6IGNlbGxJbmRleCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc1tmbGlja2l0eUluZGV4XS5pbnN0YW5jZS5vbignbGF6eUxvYWQnLCAoZXZlbnQsIGNlbGxFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kcm9vdFNjb3BlLiRlbWl0KGBGbGlja2l0eToke0lEfTpsYXp5TG9hZGAsIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBjZWxsRWxlbWVudDogY2VsbEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFuIG9iamVjdCB3aXRoaW4gYW4gYXJyYXkgYnkgSURcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gbWF0Y2hcbiAgICAgKi9cbiAgICBfZmluZE9iamVjdEJ5SWQoc291cmNlLCBpZCkge1xuICAgICAgICByZXR1cm4gc291cmNlLmZpbHRlcigob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmlkID09PSBpZDtcbiAgICAgICAgfSlbMF07XG4gICAgfVxuXG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9lc2xpbnQtbG9hZGVyIS4vc3JjL2ZsaWNraXR5LnNlcnZpY2UuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmxpY2tpdHlEaXJlY3RpdmUgPSBGbGlja2l0eURpcmVjdGl2ZTtcblxudmFyIF9mbGlja2l0eSA9IHJlcXVpcmUoJy4vZmxpY2tpdHkuY29udHJvbGxlcicpO1xuXG5mdW5jdGlvbiBGbGlja2l0eURpcmVjdGl2ZSgkdGltZW91dCwgRmxpY2tpdHlTZXJ2aWNlKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNGbGlja2l0eTogJ0A/JyxcbiAgICAgICAgICAgIGJjRmxpY2tpdHlJZDogJ0A/J1xuICAgICAgICB9LFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcmU6IHByZUxpbmtGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBwb3N0OiBwb3N0TGlua0Z1bmN0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBfZmxpY2tpdHkuRmxpY2tpdHlDb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIGZ1bmN0aW9uIHByZUxpbmtGdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRjb250cm9sbGVyKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgLy8gSWYgbm8gSUQgd2FzIHBhc3NlZCBpblxuXG4gICAgICAgIGlmICghJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGVsZW1lbnQncyBJRCBpZiBvbmUgZXhpc3RzXG4gICAgICAgICAgICBpZiAoJGF0dHJzLmlkKSB7XG4gICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkID0gJGF0dHJzLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9zdCBMaW5rXG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9zdExpbmtGdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRjb250cm9sbGVyKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgYGNyZWF0ZSgpYCBnZXRzIHBpY2tlZCB1cCBpbiB0aGUgbmV4dCBkaWdlc3QgY3ljbGVcblxuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgRmxpY2tpdHlcbiAgICAgICAgICAgIEZsaWNraXR5U2VydmljZS5jcmVhdGUoJGVsZW1lbnRbMF0sICRjb250cm9sbGVyLmJjRmxpY2tpdHlJZCwgJGNvbnRyb2xsZXIub3B0aW9ucykudGhlbihmdW5jdGlvbiAoZmxpY2tpdHlJbnN0YW5jZSkge1xuXG4gICAgICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBGbGlja2l0eSBpbnN0YW5jZSBhbmQgSURcbiAgICAgICAgICAgICAgICAkY29udHJvbGxlci5GbGlja2l0eSA9IGZsaWNraXR5SW5zdGFuY2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkID0gZmxpY2tpdHlJbnN0YW5jZS5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXaGVuIHRoZSBkaXJlY3RpdmUgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgIHZhciBvbkRlc3Ryb3kgPSAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRlc3Ryb3kgdGhlIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICAgICAgICBGbGlja2l0eVNlcnZpY2UuZGVzdHJveSgkY29udHJvbGxlci5iY0ZsaWNraXR5SWQpO1xuICAgICAgICB9KTtcbiAgICB9XG59IC8qIGdsb2JhbCBGbGlja2l0eSAqL1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2ZsaWNraXR5LmRpcmVjdGl2ZS5qc1xuICoqLyIsIi8qIGdsb2JhbCBGbGlja2l0eSAqL1xuaW1wb3J0IHsgRmxpY2tpdHlDb250cm9sbGVyIH0gZnJvbSAnLi9mbGlja2l0eS5jb250cm9sbGVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIEZsaWNraXR5RGlyZWN0aXZlKFxuICAgICR0aW1lb3V0LFxuICAgIEZsaWNraXR5U2VydmljZVxuKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICBiY0ZsaWNraXR5OiAnQD8nLFxuICAgICAgICAgICAgYmNGbGlja2l0eUlkOiAnQD8nLFxuICAgICAgICB9LFxuICAgICAgICBjb21waWxlOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByZTogcHJlTGlua0Z1bmN0aW9uLFxuICAgICAgICAgICAgICAgIHBvc3Q6IHBvc3RMaW5rRnVuY3Rpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBGbGlja2l0eUNvbnRyb2xsZXIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuXG4gICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBJZiBubyBJRCB3YXMgcGFzc2VkIGluXG4gICAgICAgIGlmICghJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIGVsZW1lbnQncyBJRCBpZiBvbmUgZXhpc3RzXG4gICAgICAgICAgICBpZiAoJGF0dHJzLmlkKSB7XG4gICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkID0gJGF0dHJzLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQb3N0IExpbmtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwb3N0TGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhpcyBgY3JlYXRlKClgIGdldHMgcGlja2VkIHVwIGluIHRoZSBuZXh0IGRpZ2VzdCBjeWNsZVxuICAgICAgICAkdGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgRmxpY2tpdHlcbiAgICAgICAgICAgIEZsaWNraXR5U2VydmljZS5jcmVhdGUoJGVsZW1lbnRbMF0sICRjb250cm9sbGVyLmJjRmxpY2tpdHlJZCwgJGNvbnRyb2xsZXIub3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigoZmxpY2tpdHlJbnN0YW5jZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4cG9zZSB0aGUgRmxpY2tpdHkgaW5zdGFuY2UgYW5kIElEXG4gICAgICAgICAgICAgICAgICAgICRjb250cm9sbGVyLkZsaWNraXR5ID0gZmxpY2tpdHlJbnN0YW5jZS5pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRyb2xsZXIuYmNGbGlja2l0eUlkID0gZmxpY2tpdHlJbnN0YW5jZS5pZDtcblxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2hlbiB0aGUgZGlyZWN0aXZlIGlzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICBjb25zdCBvbkRlc3Ryb3kgPSAkc2NvcGUuJG9uKCckZGVzdHJveScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRlc3Ryb3kgdGhlIEZsaWNraXR5IGluc3RhbmNlXG4gICAgICAgICAgICBGbGlja2l0eVNlcnZpY2UuZGVzdHJveSgkY29udHJvbGxlci5iY0ZsaWNraXR5SWQpO1xuICAgICAgICB9KTtcblxuICAgIH1cblxuXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9mbGlja2l0eS5kaXJlY3RpdmUuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEZsaWNraXR5Q29udHJvbGxlciA9IGV4cG9ydHMuRmxpY2tpdHlDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZsaWNraXR5Q29udHJvbGxlcihGbGlja2l0eUNvbmZpZykge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGbGlja2l0eUNvbnRyb2xsZXIpO1xuXG4gICAgICAgIHRoaXMuRmxpY2tpdHlDb25maWcgPSBGbGlja2l0eUNvbmZpZztcblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhGbGlja2l0eUNvbnRyb2xsZXIsIFt7XG4gICAgICAgIGtleTogJ19hY3RpdmF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWN0aXZhdGUoKSB7XG4gICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGRlZmF1bHQgb3B0aW9ucyB3aXRoIHVzZXIgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIHRoaXMuRmxpY2tpdHlDb25maWcsIGFuZ3VsYXIuZnJvbUpzb24odGhpcy5iY0ZsaWNraXR5IHx8IHt9KSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRmxpY2tpdHlDb250cm9sbGVyO1xufSgpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2ZsaWNraXR5LmNvbnRyb2xsZXIuanNcbiAqKi8iLCJleHBvcnQgY2xhc3MgRmxpY2tpdHlDb250cm9sbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBGbGlja2l0eUNvbmZpZ1xuICAgICkge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIHRoaXMuRmxpY2tpdHlDb25maWcgPSBGbGlja2l0eUNvbmZpZztcblxuXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XG5cbiAgICB9XG5cblxuXG5cbiAgICBfYWN0aXZhdGUoKSB7XG4gICAgICAgIC8vIEV4dGVuZCB0aGUgZGVmYXVsdCBvcHRpb25zIHdpdGggdXNlciBjb25maWd1cmF0aW9uXG4gICAgICAgIHRoaXMub3B0aW9ucyA9XG4gICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh7fSwgdGhpcy5GbGlja2l0eUNvbmZpZywgYW5ndWxhci5mcm9tSnNvbih0aGlzLmJjRmxpY2tpdHkgfHwge30pKTtcbiAgICB9XG5cblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9mbGlja2l0eS5jb250cm9sbGVyLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZsaWNraXR5TmV4dERpcmVjdGl2ZSA9IEZsaWNraXR5TmV4dERpcmVjdGl2ZTtcblxudmFyIF9uZXh0ID0gcmVxdWlyZSgnLi9uZXh0LmNvbnRyb2xsZXInKTtcblxuZnVuY3Rpb24gRmxpY2tpdHlOZXh0RGlyZWN0aXZlKCRsb2csICR0aW1lb3V0LCAkcm9vdFNjb3BlLCBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNGbGlja2l0eU5leHQ6ICc9PycsXG4gICAgICAgICAgICBiY0ZsaWNraXR5SWQ6ICdAPydcbiAgICAgICAgfSxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gY29tcGlsZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJlOiBwcmVMaW5rRnVuY3Rpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6IF9uZXh0Lk5leHRDb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIFByZSBMaW5rXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBHZXQgdGhlIElEXG5cbiAgICAgICAgdmFyIElEID0gJGNvbnRyb2xsZXIuZmxpY2tpdHlJZDtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGJyb2FkY2FzdCBuYW1lcyB0byBsaXN0ZW4gZm9yXG4gICAgICAgIHZhciBzZWxlY3RFdmVudCA9ICdGbGlja2l0eTonICsgSUQgKyAnOmNlbGxTZWxlY3QnO1xuICAgICAgICB2YXIgc2V0dGxlRXZlbnQgPSAnRmxpY2tpdHk6JyArICRjb250cm9sbGVyLmZsaWNraXR5SWQgKyAnOnNldHRsZSc7XG5cbiAgICAgICAgLy8gTGlzdGVuXG4gICAgICAgIHZhciBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLmNlbGxzLmxlbmd0aCwgZGF0YS5pbnN0YW5jZS5zZWxlY3RlZEluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2V0dGxlID0gJHJvb3RTY29wZS4kb24oc2V0dGxlRXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLmNlbGxzLmxlbmd0aCwgZGF0YS5pbnN0YW5jZS5zZWxlY3RlZEluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBjZWxsXG4gICAgICAgICAgICBGbGlja2l0eVNlcnZpY2UubmV4dCgkY29udHJvbGxlci5mbGlja2l0eUlkLCAkY29udHJvbGxlci53cmFwQXJvdW5kKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgYnV0dG9uIGlmIG5lZWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0ludH0gaW5kZXhcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgsIGNlbGxDb3VudCkge1xuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGJ1dHRvbiBpZiBhdCB0aGUgYmVnaW5uaW5nIGFuZCB3ZSBzaG91bGRuJ3Qgd3JhcFxuICAgICAgICAgICAgaWYgKCEkY29udHJvbGxlci53cmFwQXJvdW5kICYmIGluZGV4ID09PSBjZWxsQ291bnQpIHtcbiAgICAgICAgICAgICAgICAkYXR0cnMuJHNldCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGF0dHJzLiRzZXQoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL25leHQvZmxpY2tpdHlOZXh0LmRpcmVjdGl2ZS5qc1xuICoqLyIsImltcG9ydCB7IE5leHRDb250cm9sbGVyIH0gZnJvbSAnLi9uZXh0LmNvbnRyb2xsZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gRmxpY2tpdHlOZXh0RGlyZWN0aXZlKFxuICAgICRsb2csICR0aW1lb3V0LCAkcm9vdFNjb3BlLFxuICAgIEZsaWNraXR5Q29uZmlnLCBGbGlja2l0eVNlcnZpY2Vcbikge1xuICAgICduZ0luamVjdCc7XG5cbiAgICBjb25zdCBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNGbGlja2l0eU5leHQ6ICc9PycsXG4gICAgICAgICAgICBiY0ZsaWNraXR5SWQ6ICdAPycsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBpbGU6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJlOiBwcmVMaW5rRnVuY3Rpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBOZXh0Q29udHJvbGxlcixcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgIH07XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlO1xuXG5cblxuXG4gICAgLyoqXG4gICAgICogUHJlIExpbmtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcmVMaW5rRnVuY3Rpb24oXG4gICAgICAgICRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXJcbiAgICApIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBHZXQgdGhlIElEXG4gICAgICAgIGNvbnN0IElEID0gJGNvbnRyb2xsZXIuZmxpY2tpdHlJZDtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGJyb2FkY2FzdCBuYW1lcyB0byBsaXN0ZW4gZm9yXG4gICAgICAgIGNvbnN0IHNlbGVjdEV2ZW50ID0gJ0ZsaWNraXR5OicgKyBJRCArICc6Y2VsbFNlbGVjdCc7XG4gICAgICAgIGNvbnN0IHNldHRsZUV2ZW50ID0gJ0ZsaWNraXR5OicgKyAkY29udHJvbGxlci5mbGlja2l0eUlkICsgJzpzZXR0bGUnO1xuXG4gICAgICAgIC8vIExpc3RlblxuICAgICAgICBjb25zdCBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIChldmVudCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLmNlbGxzLmxlbmd0aCwgZGF0YS5pbnN0YW5jZS5zZWxlY3RlZEluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzZXR0bGUgPSAkcm9vdFNjb3BlLiRvbihzZXR0bGVFdmVudCwgKGV2ZW50LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBfZGlzYWJsZUJ1dHRvbklmTmVlZGVkKGRhdGEuaW5zdGFuY2UuY2VsbHMubGVuZ3RoLCBkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXggKyAxKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICAkZWxlbWVudC5vbignY2xpY2snLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIC8vIE1vdmUgdG8gdGhlIG5leHQgY2VsbFxuICAgICAgICAgICAgRmxpY2tpdHlTZXJ2aWNlLm5leHQoJGNvbnRyb2xsZXIuZmxpY2tpdHlJZCwgJGNvbnRyb2xsZXIud3JhcEFyb3VuZCk7XG5cbiAgICAgICAgfSk7XG5cblxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgYnV0dG9uIGlmIG5lZWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0ludH0gaW5kZXhcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgsIGNlbGxDb3VudCkge1xuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGJ1dHRvbiBpZiBhdCB0aGUgYmVnaW5uaW5nIGFuZCB3ZSBzaG91bGRuJ3Qgd3JhcFxuICAgICAgICAgICAgaWYgKCEkY29udHJvbGxlci53cmFwQXJvdW5kICYmIGluZGV4ID09PSBjZWxsQ291bnQpIHtcbiAgICAgICAgICAgICAgICAkYXR0cnMuJHNldCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGF0dHJzLiRzZXQoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvbmV4dC9mbGlja2l0eU5leHQuZGlyZWN0aXZlLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBOZXh0Q29udHJvbGxlciA9IGV4cG9ydHMuTmV4dENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmV4dENvbnRyb2xsZXIoJGxvZywgJHEsICR0aW1lb3V0LCBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5leHRDb250cm9sbGVyKTtcblxuICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuICAgICAgICB0aGlzLiRxID0gJHE7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgdGhpcy5GbGlja2l0eUNvbmZpZyA9IEZsaWNraXR5Q29uZmlnO1xuICAgICAgICB0aGlzLkZsaWNraXR5U2VydmljZSA9IEZsaWNraXR5U2VydmljZTtcblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhOZXh0Q29udHJvbGxlciwgW3tcbiAgICAgICAga2V5OiAnX2FjdGl2YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIC8vIEFzc2lnbiBvciBmYWxsIGJhY2sgdG8gZGVmYXVsdFxuICAgICAgICAgICAgdGhpcy53cmFwQXJvdW5kID0gdGhpcy5iY0ZsaWNraXR5TmV4dCB8fCB0aGlzLkZsaWNraXR5Q29uZmlnLndyYXBBcm91bmQ7XG4gICAgICAgICAgICB0aGlzLmZsaWNraXR5SWQgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhbiBJRFxuICAgICAgICAgICAgdGhpcy5fc2V0SWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgSUQgdG8gd2hhdCBpcyBkZWZpbmVkLCBmYWxsYmFjayB0byBmaXJzdCBpbnN0YW5jZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGZsaWNraXR5SWRcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19zZXRJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SWQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kcShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuYmNGbGlja2l0eUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmZsaWNraXR5SWQgPSBfdGhpcy5iY0ZsaWNraXR5SWQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZmxpY2tpdHlJZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuRmxpY2tpdHlTZXJ2aWNlLmdldEZpcnN0KCkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5mbGlja2l0eUlkID0gaW5zdGFuY2UuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5mbGlja2l0eUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRsb2cud2FybihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBOZXh0Q29udHJvbGxlcjtcbn0oKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9uZXh0L25leHQuY29udHJvbGxlci5qc1xuICoqLyIsImV4cG9ydCBjbGFzcyBOZXh0Q29udHJvbGxlciB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgJGxvZywgJHEsICR0aW1lb3V0LFxuICAgICAgICBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgdGhpcy4kbG9nID0gJGxvZztcbiAgICAgICAgdGhpcy4kcSA9ICRxO1xuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuRmxpY2tpdHlDb25maWcgPSBGbGlja2l0eUNvbmZpZztcbiAgICAgICAgdGhpcy5GbGlja2l0eVNlcnZpY2UgPSBGbGlja2l0eVNlcnZpY2U7XG5cblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuXG4gICAgfVxuXG5cblxuXG4gICAgX2FjdGl2YXRlKCkge1xuICAgICAgICAvLyBBc3NpZ24gb3IgZmFsbCBiYWNrIHRvIGRlZmF1bHRcbiAgICAgICAgdGhpcy53cmFwQXJvdW5kID0gdGhpcy5iY0ZsaWNraXR5TmV4dCB8fCB0aGlzLkZsaWNraXR5Q29uZmlnLndyYXBBcm91bmQ7XG4gICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IG51bGw7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYW4gSURcbiAgICAgICAgdGhpcy5fc2V0SWQoKTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2V0IElEIHRvIHdoYXQgaXMgZGVmaW5lZCwgZmFsbGJhY2sgdG8gZmlyc3QgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZmxpY2tpdHlJZFxuICAgICAqL1xuICAgIF9zZXRJZCgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy4kcSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJjRmxpY2tpdHlJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IHRoaXMuYmNGbGlja2l0eUlkO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5mbGlja2l0eUlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRmxpY2tpdHlTZXJ2aWNlLmdldEZpcnN0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IGluc3RhbmNlLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5mbGlja2l0eUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9nLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9uZXh0L25leHQuY29udHJvbGxlci5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GbGlja2l0eVByZXZpb3VzRGlyZWN0aXZlID0gRmxpY2tpdHlQcmV2aW91c0RpcmVjdGl2ZTtcblxudmFyIF9wcmV2aW91cyA9IHJlcXVpcmUoJy4vcHJldmlvdXMuY29udHJvbGxlcicpO1xuXG5mdW5jdGlvbiBGbGlja2l0eVByZXZpb3VzRGlyZWN0aXZlKCRsb2csICR0aW1lb3V0LCAkcm9vdFNjb3BlLCBGbGlja2l0eUNvbmZpZywgRmxpY2tpdHlTZXJ2aWNlKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNGbGlja2l0eVByZXZpb3VzOiAnPT8nLFxuICAgICAgICAgICAgYmNGbGlja2l0eUlkOiAnQD8nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIGNvbXBpbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHByZTogcHJlTGlua0Z1bmN0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBfcHJldmlvdXMuUHJldmlvdXNDb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuICAgIC8qKlxuICAgICAqIFByZSBMaW5rXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJlTGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBHZXQgdGhlIElEXG5cbiAgICAgICAgdmFyIElEID0gJGNvbnRyb2xsZXIuZmxpY2tpdHlJZDtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGJyb2FkY2FzdCBuYW1lcyB0byBsaXN0ZW4gZm9yXG4gICAgICAgIHZhciBzZWxlY3RFdmVudCA9ICdGbGlja2l0eTonICsgSUQgKyAnOmNlbGxTZWxlY3QnO1xuICAgICAgICB2YXIgc2V0dGxlRXZlbnQgPSAnRmxpY2tpdHk6JyArICRjb250cm9sbGVyLmZsaWNraXR5SWQgKyAnOnNldHRsZSc7XG5cbiAgICAgICAgLy8gTGlzdGVuXG4gICAgICAgIHZhciBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNldHRsZSA9ICRyb290U2NvcGUuJG9uKHNldHRsZUV2ZW50LCBmdW5jdGlvbiAoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoZGF0YS5pbnN0YW5jZS5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGNlbGxcbiAgICAgICAgICAgIEZsaWNraXR5U2VydmljZS5wcmV2aW91cygkY29udHJvbGxlci5mbGlja2l0eUlkLCAkY29udHJvbGxlci53cmFwQXJvdW5kKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgYnV0dG9uIGlmIG5lZWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0ludH0gaW5kZXhcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIERpc2FibGUgYnV0dG9uIGlmIGF0IHRoZSBiZWdpbm5pbmcgYW5kIHdlIHNob3VsZG4ndCB3cmFwXG4gICAgICAgICAgICBpZiAoISRjb250cm9sbGVyLndyYXBBcm91bmQgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkYXR0cnMuJHNldCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGF0dHJzLiRzZXQoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3ByZXZpb3VzL2ZsaWNraXR5UHJldmlvdXMuZGlyZWN0aXZlLmpzXG4gKiovIiwiaW1wb3J0IHsgUHJldmlvdXNDb250cm9sbGVyIH0gZnJvbSAnLi9wcmV2aW91cy5jb250cm9sbGVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIEZsaWNraXR5UHJldmlvdXNEaXJlY3RpdmUoXG4gICAgJGxvZywgJHRpbWVvdXQsICRyb290U2NvcGUsXG4gICAgRmxpY2tpdHlDb25maWcsIEZsaWNraXR5U2VydmljZVxuKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICBiY0ZsaWNraXR5UHJldmlvdXM6ICc9PycsXG4gICAgICAgICAgICBiY0ZsaWNraXR5SWQ6ICdAPycsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBpbGU6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcHJlOiBwcmVMaW5rRnVuY3Rpb24sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBQcmV2aW91c0NvbnRyb2xsZXIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuXG4gICAgLyoqXG4gICAgICogUHJlIExpbmtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcmVMaW5rRnVuY3Rpb24oXG4gICAgICAgICRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgJGNvbnRyb2xsZXJcbiAgICApIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBHZXQgdGhlIElEXG4gICAgICAgIGNvbnN0IElEID0gJGNvbnRyb2xsZXIuZmxpY2tpdHlJZDtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGJyb2FkY2FzdCBuYW1lcyB0byBsaXN0ZW4gZm9yXG4gICAgICAgIGNvbnN0IHNlbGVjdEV2ZW50ID0gJ0ZsaWNraXR5OicgKyBJRCArICc6Y2VsbFNlbGVjdCc7XG4gICAgICAgIGNvbnN0IHNldHRsZUV2ZW50ID0gJ0ZsaWNraXR5OicgKyAkY29udHJvbGxlci5mbGlja2l0eUlkICsgJzpzZXR0bGUnO1xuXG4gICAgICAgIC8vIExpc3RlblxuICAgICAgICBjb25zdCBjZWxsU2VsZWN0ID0gJHJvb3RTY29wZS4kb24oc2VsZWN0RXZlbnQsIChldmVudCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2V0dGxlID0gJHJvb3RTY29wZS4kb24oc2V0dGxlRXZlbnQsIChldmVudCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgX2Rpc2FibGVCdXR0b25JZk5lZWRlZChkYXRhLmluc3RhbmNlLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgICRlbGVtZW50Lm9uKCdjbGljaycsICgpID0+IHtcblxuICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgbmV4dCBjZWxsXG4gICAgICAgICAgICBGbGlja2l0eVNlcnZpY2UucHJldmlvdXMoJGNvbnRyb2xsZXIuZmxpY2tpdHlJZCwgJGNvbnRyb2xsZXIud3JhcEFyb3VuZCk7XG5cbiAgICAgICAgfSk7XG5cblxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERpc2FibGUgYnV0dG9uIGlmIG5lZWRlZFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0ludH0gaW5kZXhcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIF9kaXNhYmxlQnV0dG9uSWZOZWVkZWQoaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIERpc2FibGUgYnV0dG9uIGlmIGF0IHRoZSBiZWdpbm5pbmcgYW5kIHdlIHNob3VsZG4ndCB3cmFwXG4gICAgICAgICAgICBpZiAoISRjb250cm9sbGVyLndyYXBBcm91bmQgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkYXR0cnMuJHNldCgnZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGF0dHJzLiRzZXQoJ2Rpc2FibGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9wcmV2aW91cy9mbGlja2l0eVByZXZpb3VzLmRpcmVjdGl2ZS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUHJldmlvdXNDb250cm9sbGVyID0gZXhwb3J0cy5QcmV2aW91c0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJldmlvdXNDb250cm9sbGVyKCRsb2csICRxLCAkdGltZW91dCwgRmxpY2tpdHlDb25maWcsIEZsaWNraXR5U2VydmljZSkge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmV2aW91c0NvbnRyb2xsZXIpO1xuXG4gICAgICAgIHRoaXMuJGxvZyA9ICRsb2c7XG4gICAgICAgIHRoaXMuJHEgPSAkcTtcbiAgICAgICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgICAgICB0aGlzLkZsaWNraXR5Q29uZmlnID0gRmxpY2tpdHlDb25maWc7XG4gICAgICAgIHRoaXMuRmxpY2tpdHlTZXJ2aWNlID0gRmxpY2tpdHlTZXJ2aWNlO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFByZXZpb3VzQ29udHJvbGxlciwgW3tcbiAgICAgICAga2V5OiAnX2FjdGl2YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIC8vIEFzc2lnbiBvciBmYWxsIGJhY2sgdG8gZGVmYXVsdFxuICAgICAgICAgICAgdGhpcy53cmFwQXJvdW5kID0gdGhpcy5iY0ZsaWNraXR5UHJldmlvdXMgfHwgdGhpcy5GbGlja2l0eUNvbmZpZy53cmFwQXJvdW5kO1xuICAgICAgICAgICAgdGhpcy5mbGlja2l0eUlkID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYW4gSURcbiAgICAgICAgICAgIHRoaXMuX3NldElkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IElEIHRvIHdoYXQgaXMgZGVmaW5lZCwgZmFsbGJhY2sgdG8gZmlyc3QgaW5zdGFuY2VcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBmbGlja2l0eUlkXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdfc2V0SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldElkKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmJjRmxpY2tpdHlJZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5mbGlja2l0eUlkID0gX3RoaXMuYmNGbGlja2l0eUlkO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF90aGlzLmZsaWNraXR5SWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLkZsaWNraXR5U2VydmljZS5nZXRGaXJzdCgpLnRoZW4oZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmxpY2tpdHlJZCA9IGluc3RhbmNlLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZmxpY2tpdHlJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy4kbG9nLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUHJldmlvdXNDb250cm9sbGVyO1xufSgpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3ByZXZpb3VzL3ByZXZpb3VzLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJleHBvcnQgY2xhc3MgUHJldmlvdXNDb250cm9sbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAkbG9nLCAkcSwgJHRpbWVvdXQsXG4gICAgICAgIEZsaWNraXR5Q29uZmlnLCBGbGlja2l0eVNlcnZpY2VcbiAgICApIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICB0aGlzLiRsb2cgPSAkbG9nO1xuICAgICAgICB0aGlzLiRxID0gJHE7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICAgICAgdGhpcy5GbGlja2l0eUNvbmZpZyA9IEZsaWNraXR5Q29uZmlnO1xuICAgICAgICB0aGlzLkZsaWNraXR5U2VydmljZSA9IEZsaWNraXR5U2VydmljZTtcblxuXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XG5cbiAgICB9XG5cblxuXG5cbiAgICBfYWN0aXZhdGUoKSB7XG4gICAgICAgIC8vIEFzc2lnbiBvciBmYWxsIGJhY2sgdG8gZGVmYXVsdFxuICAgICAgICB0aGlzLndyYXBBcm91bmQgPSB0aGlzLmJjRmxpY2tpdHlQcmV2aW91cyB8fCB0aGlzLkZsaWNraXR5Q29uZmlnLndyYXBBcm91bmQ7XG4gICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IG51bGw7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYW4gSURcbiAgICAgICAgdGhpcy5fc2V0SWQoKTtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2V0IElEIHRvIHdoYXQgaXMgZGVmaW5lZCwgZmFsbGJhY2sgdG8gZmlyc3QgaW5zdGFuY2VcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZmxpY2tpdHlJZFxuICAgICAqL1xuICAgIF9zZXRJZCgpIHtcblxuICAgICAgICByZXR1cm4gdGhpcy4kcSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmJjRmxpY2tpdHlJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IHRoaXMuYmNGbGlja2l0eUlkO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5mbGlja2l0eUlkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRmxpY2tpdHlTZXJ2aWNlLmdldEZpcnN0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpY2tpdHlJZCA9IGluc3RhbmNlLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5mbGlja2l0eUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kbG9nLndhcm4oZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9wcmV2aW91cy9wcmV2aW91cy5jb250cm9sbGVyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==