!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("Flickity")):"function"==typeof define&&define.amd?define("angular-flickity",["Flickity"],n):"object"==typeof exports?exports["angular-flickity"]=n(require("Flickity")):e["angular-flickity"]=n(e.Flickity)}(this,function(e){return function(e){function n(i){if(t[i])return t[i].exports;var c=t[i]={exports:{},id:i,loaded:!1};return e[i].call(c.exports,c,c.exports,n),c.loaded=!0,c.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(e,n,t){"use strict";var i=t(1),c=t(2),r=t(4),o=t(6),s=t(8);angular.module("bc.Flickity",[]).provider("FlickityConfig",i.FlickityConfigProvider).service("FlickityService",c.FlickityService).directive("bcFlickity",r.FlickityDirective).directive("bcFlickityNext",o.FlickityNextDirective).directive("bcFlickityPrevious",s.FlickityPreviousDirective)},function(e,n){"use strict";function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();n.FlickityConfigProvider=function(){function e(){t(this,e),this.accessibility=!0,this.cellAlign="center",this.freeScrollFriction=.075,this.friction=.28,this.percentPosition=!0,this.resize=!0,this.selectedAttraction=.025,this.setGallerySize=!0}return i(e,[{key:"$get",value:function(){return this}}]),e}()},function(e,n,t){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function c(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n.FlickityService=void 0;var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}(),o=t(3),s=i(o);n.FlickityService=function(){function e(n,t,i,r){"ngInject";c(this,e),this.$timeout=n,this.$q=t,this.$rootScope=i,this.$log=r,this.instances=[]}return e.$inject=["$timeout","$q","$rootScope","$log"],r(e,[{key:"create",value:function(e,n,t){var i=this;return new Promise(function(c,r){if(n||(n=e.id?e.id:i.instances.length+1),i._findObjectById(i.instances,n)){var o=i._getFlickityIndex(n);i.$log.error("This ID is already in use: ",i.instances[o]),r("This ID is already in use.")}var l={id:n,instance:new s["default"](e,t)};return i.instances.push(l),i._bindEvents(n).then(function(){return c(l)})})}},{key:"destroy",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):(n.instances[c].instance.destroy(),n.instances.splice(c,1),t("Instance "+e+" destroyed."))})}},{key:"getAll",value:function(){var e=this;return new Promise(function(n){n(e.instances)})}},{key:"next",value:function(e,n,t){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(e);return o<0?r("Instance "+e+" not found."):(i.instances[o].instance.next(n,t),c(i.instances[o]))})}},{key:"previous",value:function(e,n,t){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(e);return o<0?r("Instance "+e+" not found."):(i.instances[o].instance.previous(n,t),c(i.instances[o]))})}},{key:"select",value:function(e,n){var t=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return new Promise(function(r,o){var s=t._getFlickityIndex(e);return s<0?o("Instance "+e+" not found."):(t.instances[s].instance.select(n,i,c),r(t.instances[s]))})}},{key:"selectCell",value:function(e,n){var t=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],c=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return new Promise(function(r,o){var s=t._getFlickityIndex(e);return s<0?o("Instance "+e+" not found."):(t.instances[s].instance.selectCell(n,i,c),r(t.instances[s]))})}},{key:"selectedIndex",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):t(n.instances[c].instance.selectedIndex)})}},{key:"resize",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):(n.instances[c].instance.resize(),t(n.instances[c]))})}},{key:"reposition",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):(n.instances[c].instance.reposition(),t(n.instances[c]))})}},{key:"reloadCells",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):(n.instances[c].instance.reloadCells(),t(n.instances[c]))})}},{key:"get",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):t(n.instances[c])})}},{key:"getFirst",value:function(){var e=this;return new Promise(function(n,t){return!e.instances||e.instances.length<1?t("No instances exist."):n(e.instances[0])})}},{key:"getByElement",value:function(e){return new Promise(function(n,t){var i=s["default"].data(e);return i?n(i):t("Instance not found for "+e)})}},{key:"prepend",value:function(e,n){var t=this;return new Promise(function(i,c){var r=t._getFlickityIndex(e);return r<0?c("Instance "+e+" not found."):(t.instances[r].instance.prepend(n),i(t.instances[r]))})}},{key:"append",value:function(e,n){var t=this;return new Promise(function(i,c){var r=t._getFlickityIndex(e);return r<0?c("Instance "+e+" not found."):(t.instances[r].instance.append(n),i(t.instances[r]))})}},{key:"insert",value:function(e,n,t){var i=this;return new Promise(function(c,r){var o=i._getFlickityIndex(e);return o<0?r("Instance "+e+" not found."):(i.instances[o].instance.insert(n,t),c(i.instances[o]))})}},{key:"getCellElements",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):t(n.instances[c].instance.getCellElements())})}},{key:"remove",value:function(e,n){var t=this;return new Promise(function(i,c){var r=t._getFlickityIndex(e);return r<0?c("Instance "+e+" not found."):(t.instances[r].instance.remove(n),i(t.instances[r]))})}},{key:"selectedElement",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):t(n.instances[c].instance.selectedElement)})}},{key:"cells",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);return c<0?i("Instance "+e+" not found."):t(n.instances[c].instance.cells)})}},{key:"_getFlickityIndex",value:function(e){var n=-1;return this.instances.length>0&&this.instances.forEach(function(t,i){t.id===e&&(n=i)}),n}},{key:"_bindEvents",value:function(e){var n=this;return new Promise(function(t,i){var c=n._getFlickityIndex(e);if(c<0)return i();var r=n.instances[c].id;return n.instances[c].instance.on("select",function(){n.$rootScope.$emit("Flickity:"+r+":select",n.instances[c])}),n.instances[c].instance.on("settle",function(){n.$rootScope.$emit("Flickity:"+r+":settle",n.instances[c])}),n.instances[c].instance.on("scroll",function(e,t){n.$rootScope.$emit("Flickity:"+r+":scroll",{progress:e,positionX:t})}),n.instances[c].instance.on("dragStart",function(e,t){n.$rootScope.$emit("Flickity:"+r+":dragStart",{event:e,pointer:t})}),n.instances[c].instance.on("dragMove",function(e,t,i){n.$rootScope.$emit("Flickity:"+r+":dragMove",{event:e,pointer:t,moveVector:i})}),n.instances[c].instance.on("dragEnd",function(e,t){n.$rootScope.$emit("Flickity:"+r+":dragEnd",{event:e,pointer:t})}),n.instances[c].instance.on("pointerDown",function(e,t){n.$rootScope.$emit("Flickity:"+r+":pointerDown",{event:e,pointer:t})}),n.instances[c].instance.on("pointerMove",function(e,t,i){n.$rootScope.$emit("Flickity:"+r+":pointerMove",{event:e,pointer:t,moveVector:i})}),n.instances[c].instance.on("pointerUp",function(e,t){n.$rootScope.$emit("Flickity:"+r+":pointerUp",{event:e,pointer:t})}),n.instances[c].instance.on("staticClick",function(e,t,i,c){n.$rootScope.$emit("Flickity:"+r+":staticClick",{event:e,pointer:t,cellElement:i,cellIndex:c})}),n.instances[c].instance.on("lazyLoad",function(e,t){n.$rootScope.$emit("Flickity:"+r+":lazyLoad",{event:e,cellElement:t})}),t(!0)})}},{key:"_findObjectById",value:function(e,n){return e.filter(function(e){return e.id===n})[0]}}]),e}()},function(n,t){n.exports=e},function(e,n,t){"use strict";function i(e,n){"ngInject";function t(e,n,t,i){i.bcFlickityId||t.id&&(i.bcFlickityId=t.id)}function i(t,i,c,r){e(function(){n.create(i[0],r.bcFlickityId,r.options).then(function(e){r.Flickity=e.instance,r.bcFlickityId=e.id})});t.$on("$destroy",function(e){n.destroy(r.bcFlickityId)})}t.$inject=["$scope","$element","$attrs","$controller"],i.$inject=["$scope","$element","$attrs","$controller"];var r={restrict:"A",scope:{},bindToController:{bcFlickity:"@?",bcFlickityId:"@?"},compile:function(){return{pre:t,post:i}},controller:c.FlickityController,controllerAs:"vm"};return r}i.$inject=["$timeout","FlickityService"],Object.defineProperty(n,"__esModule",{value:!0}),n.FlickityDirective=i;var c=t(5)},function(e,n){"use strict";function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();n.FlickityController=function(){function e(n){"ngInject";t(this,e),this.FlickityConfig=n,this._activate()}return e.$inject=["FlickityConfig"],i(e,[{key:"_activate",value:function(){this.options=angular.extend({},this.FlickityConfig,angular.fromJson(this.bcFlickity||{}))}}]),e}()},function(e,n,t){"use strict";function i(e,n,t,i,r){"ngInject";function o(e,n,i,c){function o(e,n){c.wrapAround||e!==n?i.$set("disabled",!1):i.$set("disabled","disabled")}var s=c.flickityId,l="Flickity:"+s+":cellSelect",u="Flickity:"+s+":settle";t.$on(l,function(e,n){o(n.instance.cells.length,n.instance.selectedIndex+1)}),t.$on(u,function(e,n){o(n.instance.cells.length,n.instance.selectedIndex+1)});n.on("click",function(){r.next(c.flickityId,c.wrapAround).then(function(e){o(e.instance.selectedIndex)})})}o.$inject=["$scope","$element","$attrs","$controller"];var s={restrict:"A",scope:{},bindToController:{bcFlickityNext:"=?",bcFlickityId:"@?"},compile:function(){return{pre:o}},controller:c.NextController,controllerAs:"vm"};return s}i.$inject=["$log","$timeout","$rootScope","FlickityConfig","FlickityService"],Object.defineProperty(n,"__esModule",{value:!0}),n.FlickityNextDirective=i;var c=t(7)},function(e,n){"use strict";function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();n.NextController=function(){function e(n,i,c,r,o){"ngInject";t(this,e),this.$log=n,this.$q=i,this.$timeout=c,this.FlickityConfig=r,this.FlickityService=o,this._activate()}return e.$inject=["$log","$q","$timeout","FlickityConfig","FlickityService"],i(e,[{key:"_activate",value:function(){"undefined"!=typeof this.bcFlickityNext?this.wrapAround=this.bcFlickityNext:"undefined"!=typeof this.FlickityConfig.wrapAround?this.wrapAround=this.FlickityConfig.wrapAround:this.wrapAround=!1,this.flickityId=null,this._setId()}},{key:"_setId",value:function(){var e=this;return new Promise(function(n,t){e.bcFlickityId?(e.flickityId=e.bcFlickityId,n(e.flickityId)):e.$timeout(function(){e.FlickityService.getFirst().then(function(t){e.flickityId=t.id,n(e.flickityId)})["catch"](function(n){e.$log.warn(n),t(n)})})})}}]),e}()},function(e,n,t){"use strict";function i(e,n,t,i,r){"ngInject";function o(e,n,i,c){function o(e){c.wrapAround||0!==e?i.$set("disabled",!1):i.$set("disabled","disabled")}var s=c.flickityId,l="Flickity:"+s+":cellSelect",u="Flickity:"+s+":settle";t.$on(l,function(e,n){o(n.instance.selectedIndex)}),t.$on(u,function(e,n){o(n.instance.selectedIndex)});n.on("click",function(){r.previous(c.flickityId,c.wrapAround).then(function(e){o(e.instance.selectedIndex)})})}o.$inject=["$scope","$element","$attrs","$controller"];var s={restrict:"A",scope:{},bindToController:{bcFlickityPrevious:"=?",bcFlickityId:"@?"},compile:function(){return{pre:o}},controller:c.PreviousController,controllerAs:"vm"};return s}i.$inject=["$log","$timeout","$rootScope","FlickityConfig","FlickityService"],Object.defineProperty(n,"__esModule",{value:!0}),n.FlickityPreviousDirective=i;var c=t(9)},function(e,n){"use strict";function t(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n){for(var t=0;t<n.length;t++){var i=n[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(n,t,i){return t&&e(n.prototype,t),i&&e(n,i),n}}();n.PreviousController=function(){function e(n,i,c,r,o){"ngInject";t(this,e),this.$log=n,this.$q=i,this.$timeout=c,this.FlickityConfig=r,this.FlickityService=o,this._activate()}return e.$inject=["$log","$q","$timeout","FlickityConfig","FlickityService"],i(e,[{key:"_activate",value:function(){"undefined"!=typeof this.bcFlickityPrevious?this.wrapAround=this.bcFlickityPrevious:"undefined"!=typeof this.FlickityConfig.wrapAround?this.wrapAround=this.FlickityConfig.wrapAround:this.wrapAround=!1,this.flickityId=null,this._setId()}},{key:"_setId",value:function(){var e=this;return new Promise(function(n,t){e.bcFlickityId?(e.flickityId=e.bcFlickityId,n(e.flickityId)):e.$timeout(function(){e.FlickityService.getFirst().then(function(t){e.flickityId=t.id,n(e.flickityId)})["catch"](function(n){e.$log.warn(n),t(n)})})})}}]),e}()}])});
//# sourceMappingURL=data:application/json;base64,